<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structamrex_1_1Array4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array4</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" static="no" mutable="no">
        <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
        <definition>T* AMREX_RESTRICT amrex::Array4&lt; T &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1aef2f58d3efd33a6abb0d1fa42c1fa36a" prot="public" static="no" mutable="no">
        <type>long const</type>
        <definition>long const amrex::Array4&lt; T &gt;::jstride</definition>
        <argsstring></argsstring>
        <name>jstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a43564e62c08470ac03cffff6ce2276be" prot="public" static="no" mutable="no">
        <type>long const</type>
        <definition>long const amrex::Array4&lt; T &gt;::kstride</definition>
        <argsstring></argsstring>
        <name>kstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ac119008e55133b0231fe715d52f0813d" prot="public" static="no" mutable="no">
        <type>long const</type>
        <definition>long const amrex::Array4&lt; T &gt;::nstride</definition>
        <argsstring></argsstring>
        <name>nstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1af4d3efc1f36487726112e492c507e1e8" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const</type>
        <definition>Dim3 const amrex::Array4&lt; T &gt;::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1afe21bd728d0afa9d28bff96cc4f959d2" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const</type>
        <definition>Dim3 const amrex::Array4&lt; T &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array4_1aaa08e35fd7ccb15fed1ccccef040043c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;std::is_const&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;rhs) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1afb6b3cfaf0f1493348538d8fe01145a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ae4cc8f1b7d78a66c0614d5b299365832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(T *a_p, Dim3 const &amp;a_begin, Dim3 const &amp;a_end) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type>T *</type>
          <declname>a_p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1acc0b62cfe7d5a2a6d176dff7b78458fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ae0ad6e08e571297198ea92ea248310a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ace3674cc3e82125aac52db99e99603a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="87" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="569">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="568">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="569" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="30" bodyend="114"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array4_1aaa08e35fd7ccb15fed1ccccef040043c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1afb6b3cfaf0f1493348538d8fe01145a7" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1ae4cc8f1b7d78a66c0614d5b299365832" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1af4d3efc1f36487726112e492c507e1e8" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array4_1afe21bd728d0afa9d28bff96cc4f959d2" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>end</name></member>
      <member refid="structamrex_1_1Array4_1aef2f58d3efd33a6abb0d1fa42c1fa36a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>jstride</name></member>
      <member refid="structamrex_1_1Array4_1a43564e62c08470ac03cffff6ce2276be" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>kstride</name></member>
      <member refid="structamrex_1_1Array4_1ac119008e55133b0231fe715d52f0813d" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nstride</name></member>
      <member refid="structamrex_1_1Array4_1acc0b62cfe7d5a2a6d176dff7b78458fe" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1ae0ad6e08e571297198ea92ea248310a0" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>p</name></member>
      <member refid="structamrex_1_1Array4_1ace3674cc3e82125aac52db99e99603a2" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
