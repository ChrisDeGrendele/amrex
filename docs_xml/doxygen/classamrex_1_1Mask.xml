<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Mask" kind="class" language="C++" prot="public">
    <compoundname>amrex::Mask</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; int &gt;</basecompoundref>
    <includes refid="AMReX__Mask_8H" local="no">AMReX_Mask.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>() noexcept</argsstring>
        <name>Mask</name>
        <briefdescription>
<para>default constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ad5e143382d0d4ac3525494db523432ee" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Box &amp;bx, int nc=1, bool alloc=true, bool shared=false)</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>allocating constructor (nc=number of components) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alloc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shared</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>Mask</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>construct from input stream </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a0b66debd0e296197e4a22a891a575e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::~Mask</definition>
        <argsstring>()=default</argsstring>
        <name>~Mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(Mask &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Mask</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Mask::Mask</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>Mask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(const Mask &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>Mask&amp; amrex::Mask::operator=</definition>
        <argsstring>(Mask &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::readFrom</definition>
        <argsstring>(std::istream &amp;)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <briefdescription>
<para>initialize from stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="90" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Mask::writeOn</definition>
        <argsstring>(std::ostream &amp;) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>output to stream, FAB-style </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="80" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator&amp;=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a1bb3b49bc6ea2c47ce34db8fb209c5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place And </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1adcec3ef81cd69f40c714c0d1a92e19b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="220" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1adbe91cdeb110d0b83127d973ac92e52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="230" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1add6c7c686aad084be695958f087ce90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::And</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>And</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace And, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="241" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Mask&amp; amrex::Mask::operator|=</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="153" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1acaf4a5daa782e03347aa2f8e1c52dfe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>in-place Or </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a3debac1afe2f7bb2df0401740ded27a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, but specify source/destination/number of components </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="277" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1afe2e5ccc3407fc3fc9179e0758db8d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;subbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>as above, and specify subregion </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="287" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Mask_1a4283ca7929da1212105b9d2b26c87546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Mask &amp; amrex::Mask::Or</definition>
        <argsstring>(const Mask &amp;src, const Box &amp;srcbox, const Box &amp;destbox, int srccomp, int destcomp, int numcomp=1) noexcept</argsstring>
        <name>Or</name>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>srcbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>destbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>destcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>in-pace Or, over source components to destination components, and on intersection of source and destination boxes </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srcbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destbox</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srccomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>numcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="298" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Mask &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>Initialize from stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Mask &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
<para>output to stream </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="31" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> is a derived Fab class whose elements maintain a logical &quot;TRUE&quot; or &quot;FALSE&quot; state. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform several elementary logical operations on its data members.</para><para>Implement a logical class <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> to maintain the TRUE or FALSE state of elements in a box. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> can perform element-wise logical operations, but is otherwise very similar to an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> object. A <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> object can set its components based on comparing (a subregion of a) real-valued <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> element magnitudes to a scalar value, or by &quot;and&quot;, &quot;or&quot; operations with (the a subregion of) other Masks.</para><para>This class does NOT provide a copy constructor or assignment operator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3265">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="3266" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3267">
        <label>amrex::FabAllocator</label>
        <link refid="structamrex_1_1FabAllocator"/>
      </node>
      <node id="3264">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="3265" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3266">
        <label>amrex::BaseFabData&lt; int &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
        <childnode refid="3267" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3269">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="3270" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3273">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3273" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3272">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="3273" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="3274" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="3274">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3271">
        <label>amrex::FabAllocator</label>
        <link refid="structamrex_1_1FabAllocator"/>
      </node>
      <node id="3268">
        <label>amrex::Mask</label>
        <link refid="classamrex_1_1Mask"/>
        <childnode refid="3269" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3270">
        <label>amrex::BaseFabData&lt; int &gt;</label>
        <link refid="structamrex_1_1BaseFabData"/>
        <childnode refid="3271" relation="public-inheritance">
        </childnode>
        <childnode refid="3272" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.H" bodystart="25" bodyend="209"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1ad9f38baae12166bf4265a51fcdba8841" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a856679a234221554d3479ce58bcafa00" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1afd142f7a5a7db7af8055581157e7df2c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a91513822e781492a9800ae2064f4c6ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Accumulate</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e926f4b5c3640fbcf8a2233c683a6b7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a03e792bdbc3af8f18da6ebbeafb5cb85" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>addproduct</name></member>
      <member refid="classamrex_1_1Mask_1a1bb3b49bc6ea2c47ce34db8fb209c5a5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1adcec3ef81cd69f40c714c0d1a92e19b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1adbe91cdeb110d0b83127d973ac92e52f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1Mask_1add6c7c686aad084be695958f087ce90e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>And</name></member>
      <member refid="classamrex_1_1BaseFab_1a693ad603bec0add41aa9d3406cbec6d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1af5dfb6c89f7151b527899799fe192ce3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a110d719b14e0e569c21c020c96f095a4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a181f61b87fed558e35fce1e12b7ea70a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1acebac4adb6864f7ef198428fce9d5411" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1acd238d1ab1fb73fbe048b40a77e4ad01" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a6017e314248a4604dda1766d45a6e909" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a21b294f3d6ae71c992c0f82b88349cf7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFab</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5846ac0768d9d6934c192d589fdc0475" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFabData</name></member>
      <member refid="structamrex_1_1BaseFabData_1a2c734fc3f402e0749da3a52dba9f1077" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>BaseFabData</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d593f5174ff8909f0954fd99847503b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a9ebd13893eb0315ec776fef5720ea8ec" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a464b4917cdb04317aed88eecf1dc885e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a24c275fec6273b1de82821fc05a1d7a3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a9f39fb4f18b0f876c1b149df459940a7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a4acf650449633da77fb9592d2f9f65b0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a754743e8defd81b6584737ce1643a9bb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1ac38eb2d18e6b2f06711baf2a404161b2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>copyToMem</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a89666897d51ada6c9318b1b8f8fef9d7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1abd8c40ceef60d4ddcc9a7d833c60a083" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::Mask</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1aba0ca6f304195f2abd2ba92fdd73dbb0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a873befb3dca634cbe91ec6d99550b3c9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6f635d8bcaf0ef3070cb451c805059e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acecc6fba7dd7fb3feb9ea6a25b2a6b21" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1af2c5e4cd59c0946b3837128384c96a1f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a6cc230935bccc39bc1d317734514cdca" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a7b23cdcfa132bc6bf79da8e7760c5ec5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aec7b6c37776056c7778fb7f7cb563bda" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a1ff939243e6180bdc5bc1fc9be1f4099" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>divide</name></member>
      <member refid="structamrex_1_1BaseFabData_1a004be47a38cb5df475b32595083287a3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1a60bd1d06d367b740866572efd0130918" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6305f1ef49f4565baa73c35c182a7ef7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a2aa4e1642137c9681ec5c11884b4e77d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a3845769bb072508c4e0566b55dddf8c7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dotmask</name></member>
      <member refid="structamrex_1_1BaseFabData_1a18c921a6524bd14b6d5304528a4b5448" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1a12d0055e4772356e04e23928c18e86eb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BaseFab_1aa7ffb7d3ed11be2617488acee59d5d8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1af056c3d5b73627c4ea8e0e30244aedce" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b537482c611229a7e2b62f1bbf1d4c6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a11ed06775cfb2c8108b56d2158dc796b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a01e76f051c01f45b50e48ef80d39d907" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cb3ce0e34a9e6d0e6826f863f5c55da" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa9f484b4626de9d2f16380e768d6f3e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1a19952541a998878c6c74b764f6d9c2b0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a6543eb02bcb08d12f0c9ebb7a76de51d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a13cedcc75a4ff245cb4db4aa2aef1e50" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a22b0fbd31c67b95c2791e65ade4707ad" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a7aca6d7e0e588649dcfc0721fecac117" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>isCopyOMPSafe</name></member>
      <member refid="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1ad2809e34da3510ad3f6a15ff10dc1dac" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1ae0e5f21d545780688cae3824ec719b8b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1a9e6430645a89c5ca817a27bf68d17170" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Mask_1a5c614b68bcc988e86e52c106c20c5d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ad5e143382d0d4ac3525494db523432ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1a6b295b191764969c7033a967abd45d97" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1aa1437a1b1611cb70a4d8c6a581c7a5bf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1Mask_1ab3bc08bd2f3deea5af111c3720a02b9c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Mask</name></member>
      <member refid="classamrex_1_1BaseFab_1a4732004eb915fd75332e2b785cb50027" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1ac42a330a2706b921e14d9683dcf535c7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a46cd90e23b18fb18b8be37fc95d4de22" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1a398795eb46c9f47ecdcaf24a35ae6b05" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a27956775deb503a38ccee2f7a68e0639" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a3664aa12489eadfbdadaf073849ff168" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a25e1017f1d46df8aace1afa61ad5a0e5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1accb8fba792ba3c928a08af36f6d723f0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a7df22a3c052c547774b12ba80e37d8cf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b0d67d423e3244b319821ee42763278" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a314333f79f6621b91e21537a878d56ee" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ad3f65f484419bf54c596f036415513b8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1af7b25a0151065df3cb1fa193d5ab447f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b9a1ab4ed5f83f25906871e1df38ee3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf8e3b4742be92554a0520ece9e570c9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1ae7bae9bb40d6f5d425e6e874536b8b37" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e8e7b3e7cdc9290b8662499b12c64eb" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a5860c216f035ee3fd917a3402ccb45f3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aafc8d062200b444ae9ffb0daaaedaa55" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a2a4b635d5ca6d4de408d515a53893fb3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a4209a90e9596bce7922e9a4b71c819b2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a159272c95c7ce491b90409dec21fa9d6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae8e93e18fa21b22b52d78d7b089fd8d8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a78790686f29f71e3d8614d0ad0befa5f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a55954f72789dde3b5575c0cb56e58e43" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a2560851d8661ac35b2c8d42a1e5df4d1" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a1de642c8417bcf290b9d253998d74b01" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a928495786e62e27721daa76f9087206f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a3478297805504d12a143db810c799ac8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a5b6e536addc46fadf5d0a37299799ca0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d740e331013b6a760c6705d53e1897f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1adca0acf1d7c39dba780d3bcf4471ad72" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a2100c4e2fe29880f1468f7192a5cf3c5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a6a66322808f1218bc59792cca640d717" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a85af10ff3c11de9a509bc832ad03fe74" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aa72a8f29368f961cb4505023d2f3a5f6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1aebfd37124608efafab89e1d46e949e37" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a024ef815d3aae1c71fc06bb626839e5b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a2ea3836a6832aa23196a2b34327dc60a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1ae8491cd2baa64b0c0f253b2487023d9a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>numPts</name></member>
      <member refid="structamrex_1_1BaseFabData_1a9e0d16aba820042ba77a256b3e342bc5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>nvar</name></member>
      <member refid="classamrex_1_1Mask_1aa6769e9167061ce48e444aca6efd800f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1BaseFab_1a5b342e92bea9a172e94cbc4d1a9b5076" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1aae6b80daa1026b8fd1a485b79a0f553d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1afa418ca88d00c3d464e60dce3c4b42ab" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a15457525136b0d6c1245ec3bb13b6641" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a2980479131a1f8afc7a7df5ec21c00e9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1afa2ae5afa7a990f6d627a069d53a1f19" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1acd902a52e4de1c3dab4756dc9acd5ce0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a2d5ddde85a8771a118e0c88d348bee39" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a3a0aab7ad2404e53f90a1ea870cd29" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1ab4250c323ddf76204759a65cfd98fade" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1ad14630e8f6214699a956035f41602790" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5349c65c01cc64c32e05862660355a4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1Mask_1ae8ef1e1e84d4d8e51b1b765e0f057de7" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1Mask_1a2d7bc995fb1eddf4211d4e93d63d9534" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1ac8e651aa7881ce8282167ad72e4a1af3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1af5d35668c71ddd37fec2b82c8cbc1c37" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; int &gt;::"><scope>amrex::Mask</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Mask_1abfff64dce9dca205fc9d3fdde790dc44" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Mask_1af447fa28de90bdab6394beef1c05f8a9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>operator|=</name></member>
      <member refid="classamrex_1_1Mask_1acaf4a5daa782e03347aa2f8e1c52dfe2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a3debac1afe2f7bb2df0401740ded27a0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1afe2e5ccc3407fc3fc9179e0758db8d59" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1Mask_1a4283ca7929da1212105b9d2b26c87546" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Or</name></member>
      <member refid="classamrex_1_1BaseFab_1ac728572926e2e1bedbe09b1a79878268" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a0efa66913e9fc16f7497c1fe018e1e35" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a40bb9a28120ef4f70f36359b317d4208" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a59b86e4bcc4c58b8c25dddf1aedf32a5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1afccb551ee46bc6e9879b63d2fbb3b73a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1aee8f306b4a4de90d805d521c3a4f3ff5" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab6d21fdf557bde16f53d66a05266ba24" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ad5cba2116d68bb361e91f1104d683336" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a0ad380b77e72a88b14a02002b752585e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a338937545b28e091b3f9fbf0d133e5e8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>preAllocatable</name></member>
      <member refid="classamrex_1_1BaseFab_1a4de3f719fedfaadc126456c24ba7168e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a271ceb346a228bab2c164018e8d93cdf" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a639287e4780404ee1442cd5b66a5985f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ae05c15b82b472537e639f1862a6ed392" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>protected_divide</name></member>
      <member refid="structamrex_1_1BaseFabData_1a16e2d3ceee6c7fd51947348985ba86f8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1Mask_1aa99a533ca8b84883dd44bf870fb7c5b3" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1ad60d82b93432982e0afa6011304541b0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1ab3b14916bdb141b70a0626c66e1b650e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setComplement</name></member>
      <member refid="structamrex_1_1BaseFabData_1aa826bfc656d07f0b2ab7c6a74a62b07a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setOwner</name></member>
      <member refid="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a5f8ebb9050e7ffd02a957d0bdaca9886" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a70fedcae8298de73f286c3c673f7db04" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a6805d31b7989de818560b68b6d830fd9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7bc4827d074f13225637fb60b8f2ca9" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a569a4f6d896da4a3e8eb4b4a9fb5807f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1aff30e8e8e269729948759942fdb9af76" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1acd77774df8d64e6107c4e1f2d2459228" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a9faef9ada202610c6bcc248ff1fbe2dd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac574b5236fd0038cc245c5bf694892d6" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a11a65bddfe194c077995037a43930927" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>setValIfNot</name></member>
      <member refid="structamrex_1_1BaseFabData_1a5894675ed07e11741a736c438bc03a02" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1af9080211623ae547d4a77076be42eeba" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a55589bcc8819d6c8a9291e79a05fbb81" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a2e30e4a2bf961e7ffd1f5293c9505630" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1a454db75001aea1672b807616b0f2f9a2" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1af6a04a591d0036d83f4aa6ccbfa164c0" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1aca58ac4ae57851e2883c84963ee6c331" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1a105ef076b58438b9238767a574847646" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>Transform</name></member>
      <member refid="structamrex_1_1BaseFabData_1a377f301bd074d9ac12b092167603d64b" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a0ce1fdb00260dc6c9cae8755180c6226" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1afcc604d3ca5e132dc774a4caa766e20d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1af67fbfc382cb060d906a2e7dfe5b5f84" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a9be9b2a4a5e2b554ddb17bf203c507ca" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a760c6feb6565af8b7634fc5f057aa060" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a6fda0a98510f2ca60c2f7269b3d341fe" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ac25e73498f4da390b6f04166e1c9262c" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1abc8191a307b3abb8598b4b19b0575876" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a9fa25a8143ce209e1b7e9138eb1b7c9a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f4125f8f9a032c27cf58de62f9b2214" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>view</name></member>
      <member refid="classamrex_1_1Mask_1a5ef706f693c3efeb1fcc340c89ad612f" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BaseFab_1a138dccb1aca456a907ad15a6d5b35cfd" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1a442cc6eaf0d47323491f0922e2266a6a" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1Mask_1a0b66debd0e296197e4a22a891a575e7d" prot="public" virt="non-virtual"><scope>amrex::Mask</scope><name>~Mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
