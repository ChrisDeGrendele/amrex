<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1RealVect" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealVect</compoundname>
    <includes refid="AMReX__RealVect_8H" local="no">AMReX_RealVect.H</includes>
      <sectiondef kind="user-defined">
      <header>Constructors and Accessors</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4e7bc438d40f7550af4b2126459f76ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>()</argsstring>
        <name>RealVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> whose components are zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1aa462510e740bb642c46b404e3e832f01" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;)</argsstring>
        <name>RealVect</name>
        <param>
          <type>const std::vector&lt; Real &gt; &amp;</type>
          <defname>vr</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a2313a38fb23bf3d4ee6a062766e589d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>(AMREX_D_DECL(Real i, Real j, Real k))</argsstring>
        <name>RealVect</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(Real i, Real j, Real k)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> given the specific values for its coordinates. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a8ea3c2659c2528fa44d4c1650f6aade5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>(const RealVect &amp;rhs)</argsstring>
        <name>RealVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The copy constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3259ff925dc91f951be1b456c09c4a88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVect::RealVect</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>RealVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> from an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by coercing each component from <computeroutput>int</computeroutput> to Real. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3990ee658e49128d52c6c347c31e73a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator=</definition>
        <argsstring>(const RealVect &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The assignment operator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a973283e2e46758cfc5ce68c8e775e5e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real &amp;</type>
        <definition>Real &amp; amrex::RealVect::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a modifiable lvalue reference to the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a46f87abfec607a9e836a5fb32e9787d5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Real &amp;</type>
        <definition>const Real &amp; amrex::RealVect::operator[]</definition>
        <argsstring>(int i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="516" bodyend="520"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Comparison Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a5ed15158b0c6792226849d6115095f19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator==</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is equivalent to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1af5b522380918848aee00f97da1bbfe47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator!=</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is different from argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1abc17fb243bfaf15746d9aaeedaea86e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator&lt;</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is less than argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than, less than, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="613" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a32ada0eca664113600e1325cdb97eb74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator&lt;=</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is less than or equal to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="140" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a00ba654d8b349f8c15b42afaa0340807" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator&gt;</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is greater than argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than, less than, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a0be35acfcca753a6724cd36e743a6af4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealVect::operator&gt;=</definition>
        <argsstring>(const RealVect &amp;p) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is greater than or equal to argument <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="634" bodyend="637"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a284646b64c409f73e880d3f753072ee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator+=</definition>
        <argsstring>(Real s)</argsstring>
        <name>operator+=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by addition of a scalar to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ab35f70b0c3170e570e42fb77166b3c02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator+</definition>
        <argsstring>(Real s) const </argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with a scalar s added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="181" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="112" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6be991b1c10ca0cd353f36c77a3f1a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator+=</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise addition by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a8af6ea49c8f547890dd273dcb9f7e6f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator-=</definition>
        <argsstring>(Real s)</argsstring>
        <name>operator-=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by subtraction of a scalar from each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="529" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4a3ca65954102a28262a048b489473af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator-=</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise subtraction by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="537" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ae304331fb01226b908ea7082a55c23c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator-</definition>
        <argsstring>(Real s) const </argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with a scalar s subtracted from each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="207" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ab38038712f6af6042e9c02acf3d33045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator*=</definition>
        <argsstring>(Real s)</argsstring>
        <name>operator*=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by multiplying each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="84" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ae1f260aa04f608e6fc0a1ec23e9080cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RealVect::dotProduct</definition>
        <argsstring>(const RealVect &amp;a_rhs) const </argsstring>
        <name>dotProduct</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a7ae801033dca0017d36e466c1d24d168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator*=</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise multiplication by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4c59a3f75ad911bd269a4eabbd795c1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator*</definition>
        <argsstring>(Real s) const </argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with each component multiplied by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a619165acb0a9584d1301d4429ed71068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator/=</definition>
        <argsstring>(Real s)</argsstring>
        <name>operator/=</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by dividing each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="244" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ae0ceb072e1b76e5ddfac9a3489010353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::operator/=</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by component-wise division by argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a174fea09ddf06b4e6e05022fc40ae07d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator/</definition>
        <argsstring>(Real s) const </argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> with each component divided by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="263" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ad3af41859d32864a1249c2d3139a204d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::scale</definition>
        <argsstring>(Real s)</argsstring>
        <name>scale</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by multiplying each component by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="560" bodyend="564"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other arithmetic operators</header>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a46789da7b76900c32e27ff5ab54643b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect min</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise minimum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="290" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="662" bodyend="667"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1adeff5f3f2cd622d9b994b1c70fc854fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect max</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise maximum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="305" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6e1d6e7aa660792770373bc19904c31f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::min</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by taking component-wise min with <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="641" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a22ab06fcdf9931c95e7a0f83a40e7392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
        <definition>RealVect &amp; amrex::RealVect::max</definition>
        <argsstring>(const RealVect &amp;p)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by taking component-wise max with <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="298" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="652" bodyend="658"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Unary operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a6c65d2b4dfea01146fbb934edcd728ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator+</definition>
        <argsstring>() const </argsstring>
        <name>operator+</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary plus <ndash/> for completeness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1acbd241ebe11d71bb9469a8204c732410" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::RealVect::operator-</definition>
        <argsstring>() const </argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary minus <ndash/> negates all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1acf954f7239a984617163a8f28f9d66d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RealVect::sum</definition>
        <argsstring>() const </argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a8ba80ab0edf2d1c397e5880e5ac25f85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RealVect::vectorLength</definition>
        <argsstring>() const </argsstring>
        <name>vectorLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sqrt(sum squares) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="337" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="575" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a2e70055d67dc124337169c1acc63c426" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RealVect::radSquared</definition>
        <argsstring>() const </argsstring>
        <name>radSquared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sum squares<ndash/>no square root </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="343" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="585" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a3a30f77ff7c43b5490c249d90223ec2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RealVect::product</definition>
        <argsstring>() const </argsstring>
        <name>product</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Product of all components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="349" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="598" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a2688af0459850fc3a3f8f03e6ab5983c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::RealVect::minDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const </argsstring>
        <name>minDir</name>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the minimum value of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="356" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="140" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a0b4d64e1d672576c7c64f143b2fa5924" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::RealVect::maxDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const </argsstring>
        <name>maxDir</name>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the maximum value of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="363" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="164" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data pointer functions</header>
      <memberdef kind="function" id="classamrex_1_1RealVect_1ab206179c838afd606beb2c44ee6cd42d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real * amrex::RealVect::dataPtr</definition>
        <argsstring>() const </argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="376" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVect_1a4573a8dcb3acbaca1c1caa1a98299606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real *</type>
        <definition>Real * amrex::RealVect::dataPtr</definition>
        <argsstring>()</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constants</header>
      <memberdef kind="variable" id="classamrex_1_1RealVect_1ab64ddfe8e473503acf9a5f7103467b13" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::RealVect::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> all of whose components are equal to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealVect_1a6745f136d89bdb15e57c3387ca01e973" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::RealVect::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> all of whose components are equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a7551c8334efdea3fe7e3b615d0ed16d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect BASISREALV</definition>
        <argsstring>(int dir)</argsstring>
        <name>BASISREALV</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a basis vector in the given coordinate direction.<linebreak/>
 In 2-D:<linebreak/>
 BASISREALV(0) == (1.,0.); BASISREALV(1) == (0.,1.).<linebreak/>
 In 3-D:<linebreak/>
 BASISREALV(0) == (1.,0.,0.); BASISREALV(1) == (0.,1.,0.); BASISREALV(2) == (0.,0.,1.).<linebreak/>
 Note that the coordinate directions are based at zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arithmetic friend functions</header>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a32a2419f5fdfa9d4325605f6d54158d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator+</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with a scalar <emphasis>s</emphasis> added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a29df4d4e0cd8272f252c9e7524946119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator-</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="436" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a348a2030fb6c276f807e5d2f437818e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator*</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component multiplied by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="444" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1ab3d7b0d43d124008d055574f4bd21f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator/</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component divided by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a4197923ece4cd4f5211c94bff4a912f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator+</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise sum of RealVects <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="458" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1ae7fecb409f3ddc9de436d139184b4b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator-</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="465" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a9f3bea44dda0f285cd03cf888693afe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator*</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise product of <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="472" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a526b3a7a2488309873f46ea5174318cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect operator/</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise quotient <emphasis>p / s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="478" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1ad7ee6eadc66769f4638897e0b324c2dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect scale</definition>
        <argsstring>(const RealVect &amp;p, Real s)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> obtained by multiplying each of the components of the given <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="486" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="605" bodyend="609"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a6d43195bcf31df34f8faf73a8e4c361d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HDF5Handle</definition>
        <argsstring></argsstring>
        <name>HDF5Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="499" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a7df5aee72e64ca92a9b83ecb5d2dde1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const RealVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> to the given output stream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1RealVect_1a12a8ba870c44c0b8df87fbf476ba0240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="498" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="259" bodyend="282"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealVect_1a0f0b7286c21b06ba0eea3a31c09cf2f1" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealVect::vect[SpaceDim]</definition>
        <argsstring>[SpaceDim]</argsstring>
        <name>vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The individual components of this <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="506" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Real vector in SpaceDim-dimensional space. </para>    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> is an implementation of a Real vector in a SpaceDim-dimensional space. <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="4867">
        <label>Real</label>
      </node>
      <node id="4866">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4866" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4867" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="35" bodyend="508"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealVect_1a7551c8334efdea3fe7e3b615d0ed16d6" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>BASISREALV</name></member>
      <member refid="classamrex_1_1RealVect_1ab206179c838afd606beb2c44ee6cd42d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVect_1a4573a8dcb3acbaca1c1caa1a98299606" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVect_1ae1f260aa04f608e6fc0a1ec23e9080cd" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>dotProduct</name></member>
      <member refid="classamrex_1_1RealVect_1a6d43195bcf31df34f8faf73a8e4c361d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>HDF5Handle</name></member>
      <member refid="classamrex_1_1RealVect_1a22ab06fcdf9931c95e7a0f83a40e7392" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>max</name></member>
      <member refid="classamrex_1_1RealVect_1adeff5f3f2cd622d9b994b1c70fc854fb" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>max</name></member>
      <member refid="classamrex_1_1RealVect_1a0b4d64e1d672576c7c64f143b2fa5924" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1RealVect_1a6e1d6e7aa660792770373bc19904c31f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>min</name></member>
      <member refid="classamrex_1_1RealVect_1a46789da7b76900c32e27ff5ab54643b2" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>min</name></member>
      <member refid="classamrex_1_1RealVect_1a2688af0459850fc3a3f8f03e6ab5983c" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>minDir</name></member>
      <member refid="classamrex_1_1RealVect_1af5b522380918848aee00f97da1bbfe47" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1RealVect_1a4c59a3f75ad911bd269a4eabbd795c1b" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1a348a2030fb6c276f807e5d2f437818e3" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1a9f3bea44dda0f285cd03cf888693afe9" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVect_1ab38038712f6af6042e9c02acf3d33045" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVect_1a7ae801033dca0017d36e466c1d24d168" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVect_1ab35f70b0c3170e570e42fb77166b3c02" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a6c65d2b4dfea01146fbb934edcd728ca" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a32a2419f5fdfa9d4325605f6d54158d1" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a4197923ece4cd4f5211c94bff4a912f1" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVect_1a284646b64c409f73e880d3f753072ee5" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVect_1a6be991b1c10ca0cd353f36c77a3f1a9f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVect_1ae304331fb01226b908ea7082a55c23c5" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1acbd241ebe11d71bb9469a8204c732410" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1a29df4d4e0cd8272f252c9e7524946119" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1ae7fecb409f3ddc9de436d139184b4b04" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVect_1a8af6ea49c8f547890dd273dcb9f7e6f6" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVect_1a4a3ca65954102a28262a048b489473af" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVect_1a174fea09ddf06b4e6e05022fc40ae07d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1ab3d7b0d43d124008d055574f4bd21f25" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1a526b3a7a2488309873f46ea5174318cf" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVect_1a619165acb0a9584d1301d4429ed71068" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVect_1ae0ceb072e1b76e5ddfac9a3489010353" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVect_1abc17fb243bfaf15746d9aaeedaea86e4" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1RealVect_1a7df5aee72e64ca92a9b83ecb5d2dde1f" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1RealVect_1a32ada0eca664113600e1325cdb97eb74" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1RealVect_1a3990ee658e49128d52c6c347c31e73a9" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator=</name></member>
      <member refid="classamrex_1_1RealVect_1a5ed15158b0c6792226849d6115095f19" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1RealVect_1a00ba654d8b349f8c15b42afaa0340807" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1RealVect_1a0be35acfcca753a6724cd36e743a6af4" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1RealVect_1a12a8ba870c44c0b8df87fbf476ba0240" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1RealVect_1a973283e2e46758cfc5ce68c8e775e5e8" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVect_1a46f87abfec607a9e836a5fb32e9787d5" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVect_1a3a30f77ff7c43b5490c249d90223ec2a" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>product</name></member>
      <member refid="classamrex_1_1RealVect_1a2e70055d67dc124337169c1acc63c426" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>radSquared</name></member>
      <member refid="classamrex_1_1RealVect_1a4e7bc438d40f7550af4b2126459f76ba" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1aa462510e740bb642c46b404e3e832f01" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a2313a38fb23bf3d4ee6a062766e589d4" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a8ea3c2659c2528fa44d4c1650f6aade5" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1a3259ff925dc91f951be1b456c09c4a88" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>RealVect</name></member>
      <member refid="classamrex_1_1RealVect_1ad3af41859d32864a1249c2d3139a204d" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1RealVect_1ad7ee6eadc66769f4638897e0b324c2dd" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1RealVect_1acf954f7239a984617163a8f28f9d66d3" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>sum</name></member>
      <member refid="classamrex_1_1RealVect_1a6745f136d89bdb15e57c3387ca01e973" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>Unit</name></member>
      <member refid="classamrex_1_1RealVect_1a0f0b7286c21b06ba0eea3a31c09cf2f1" prot="protected" virt="non-virtual"><scope>amrex::RealVect</scope><name>vect</name></member>
      <member refid="classamrex_1_1RealVect_1a8ba80ab0edf2d1c397e5880e5ac25f85" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>vectorLength</name></member>
      <member refid="classamrex_1_1RealVect_1ab64ddfe8e473503acf9a5f7103467b13" prot="public" virt="non-virtual"><scope>amrex::RealVect</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
