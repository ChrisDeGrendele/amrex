<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FabSet" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabSet</compoundname>
    <includes refid="AMReX__FabSet_8H" local="no">AMReX_FabSet.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabSet_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FabSetIter</definition>
        <argsstring></argsstring>
        <name>FabSetIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabSet_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FluxRegister</definition>
        <argsstring></argsstring>
        <name>FluxRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabSet_1afa58a70c61ea7368f91116f22ccea876" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::FabSet::m_mf</definition>
        <argsstring></argsstring>
        <name>m_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabSet_1a07ac28a240af8aef44560055b09e0411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>()</argsstring>
        <name>FabSet</name>
        <briefdescription>
<para>The default constructor <ndash/> you must later call <ref refid="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" kindref="member">define()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5462d217f9ec7d07c1759f26cde88be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>FabSet</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> of specified number of components on the grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ac79a8fcbd950fa941c9db2c7fa4e892b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::~FabSet</definition>
        <argsstring>()=default</argsstring>
        <name>~FabSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aba4f91a1b74d90439746773600170fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(FabSet &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabSet</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae8ccac97d087013c98ef349c90737123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabSet::FabSet</definition>
        <argsstring>(const FabSet &amp;rhs)=delete</argsstring>
        <name>FabSet</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5f606dfdb767ad78b61c72a9da1c378f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet&amp; amrex::FabSet::operator=</definition>
        <argsstring>(const FabSet &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a320a46748e6a027a5fdf198a1ac1358d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet&amp; amrex::FabSet::operator=</definition>
        <argsstring>(FabSet &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::define</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Define a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> constructed via default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a2badb3776780ac8a213fa965cf0ff13d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
        <definition>FArrayBox const&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a61007a34401538992b3a64b37dbe142b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a4fffa26fb3d1baf9bb293bdab1a60052" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
        <definition>FArrayBox const&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(int i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a3d8c142b6ffa76709400d65786f3a2a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
        <definition>FArrayBox&amp; amrex::FabSet::operator[]</definition>
        <argsstring>(int i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a896c49ff3ec742b65e084b6e3a3d3789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a4fb9954facb78e38d087c17b79bca828" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5a22c9de22472d4f8ca41599617ca848" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabPtr</definition>
        <argsstring>(int i) const </argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a002b794ea4b35e21e461cdb6b144c99c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabPtr</definition>
        <argsstring>(int i)</argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae3c508e9494bfdf5071740162cc5326f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabHostPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a1846f0f6db44aa266078b17c52d76179" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabHostPtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a7cb5d2b009728abc048ee3aec09a3c51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabHostPtr</definition>
        <argsstring>(int i) const </argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a93ef7dd5647853ce4dae5da5778befd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabHostPtr</definition>
        <argsstring>(int i)</argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a3c8994057d3e343fd78bedb32fdfac57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabDevicePtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae28c822f69fab401656e69d989438d51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabDevicePtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ab5492420a080e0b7c904b808c55f8612" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *</type>
        <definition>FArrayBox const* amrex::FabSet::fabDevicePtr</definition>
        <argsstring>(int i) const </argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1af236d8ff26644ad1dd27349a03ed8699" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> *</type>
        <definition>FArrayBox* amrex::FabSet::fabDevicePtr</definition>
        <argsstring>(int i)</argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a182516582f14a4a256cbf668e792c16a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::array</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1af9b050ca294c80ff86db5a5e5904a56b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
        <definition>Array4&lt;Real &gt; amrex::FabSet::array</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a98db637aaf21425da2c071ef85e20b03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt;</type>
        <definition>Array4&lt;Real const&gt; amrex::FabSet::array</definition>
        <argsstring>(int i) const </argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a3e8ffc6f231300dea931b2fc7c888d49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
        <definition>Array4&lt;Real &gt; amrex::FabSet::array</definition>
        <argsstring>(int i)</argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a21fcb9b49d394757a8851c7ad9d1bbb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabSet::fabbox</definition>
        <argsstring>(int K) const </argsstring>
        <name>fabbox</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae3385643e4fd61e113cfce3d8fed45e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabSet::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a41b09240f56561e7475cec5016ec29f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::FabSet::boxArray</definition>
        <argsstring>() const </argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a842c0212a39e9d6a26c0973ca5f7ec45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::FabSet::DistributionMap</definition>
        <argsstring>() const </argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="92" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a5377add0b62a78f2d9c37171a4a115db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabSet::nComp</definition>
        <argsstring>() const </argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a400f9bfe07b9e4a18bee1f6cf6b98b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a2f119b545c70dc14f232664bc31df5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::copyFrom</definition>
        <argsstring>(const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="27" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1affeffcfe2649fbc28d92deae76916215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::copyFrom</definition>
        <argsstring>(const MultiFab &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>copyFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1abb11e15ccfd9eb9cf7b9cfc75f4bd30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::plusFrom</definition>
        <argsstring>(const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="58" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a20ff927f81d91df3a565fb0b06de0ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::plusFrom</definition>
        <argsstring>(const MultiFab &amp;src, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>plusFrom</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="80" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae7dcffed2be89421c4201e39acd821d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::copyTo</definition>
        <argsstring>(MultiFab &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const </argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a4373be6cb5699b5158e3f47e6ae2ce2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::plusTo</definition>
        <argsstring>(MultiFab &amp;dest, int ngrow, int scomp, int dcomp, int ncomp, const Periodicity &amp;period=Periodicity::NonPeriodic()) const </argsstring>
        <name>plusTo</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a634eeba26a1426e7c29db10d476f266f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::setVal</definition>
        <argsstring>(Real val)</argsstring>
        <name>setVal</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="105" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a0d009b1309e07ed944160b4f737fbc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::setVal</definition>
        <argsstring>(Real val, int comp, int num_comp)</argsstring>
        <name>setVal</name>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*this + b*src (FabSets must be commensurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="122" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ae4057548b7e1b8f66f5c340ec4c5f088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::linComb</definition>
        <argsstring>(Real a, Real b, const FabSet &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>linComb</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Linear combination: this := a*mfa + b*mfb. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="140" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a9a76863d5b17027b20d663cd2968c790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet &amp; amrex::FabSet::linComb</definition>
        <argsstring>(Real a, const MultiFab &amp;mfa, int a_comp, Real b, const MultiFab &amp;mfb, int b_comp, int dcomp, int ncomp, int ngrow)</argsstring>
        <name>linComb</name>
        <param>
          <type>Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_comp</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mfb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="163" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1a03119f3ab7d7bdc06e822b46ee1c96d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::write</definition>
        <argsstring>(const std::string &amp;name) const </argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write (used for writing to checkpoint) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabSet_1ab5d92ff15c80180af8a7bc09bbb6c4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::read</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>read</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Read (used for reading from checkpoint) </para>        </briefdescription>
        <detaileddescription>
<para>Local copy function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="219" bodyend="225"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabSet_1a469669c164630747b67a4c290884a5ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabSet::Copy</definition>
        <argsstring>(FabSet &amp;dst, const FabSet &amp;src)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.cpp" bodystart="228" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> is a group of <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>&apos;s. The grouping is designed specifically to represent regions along the boundary of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>&apos;s, and are used to implement boundary conditions to discretized partial differential equations. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> is an array of pointers to FABs. The standard FAB operators, however, have been modified to be more useful for maintaining boundary conditions for partial differential equations discretized on boxes. Under normal circumstances, a FAB will be created for each face of a box. For a group of boxes, a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> will be the group of FABs at a particular orientation (ie. the lo-i side of each grid in a list).</para><para>Since a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> FAB will likely be used to bound a grid box, <ref refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" kindref="member">FArrayBox::resize()</ref> operations are disallowed. Also, to preserve flexibility in applicable boundary scenarios, intersecting FABs in the <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> are not guaranteed to contain identical data<ndash/>thus copy operations from a <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> to any FAB-like structure may be order-dependent.</para><para>FabSets are used primarily as a data storage mechanism, and are manipulated by more sophisticated control classes. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="1503">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1486">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1487" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1490">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1489">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1489" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1504">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1505" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1491">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1492" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1487">
        <label>string</label>
      </node>
      <node id="1506">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1489" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1500">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="1499">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1500" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1501">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1505">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1492">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1497">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="1489" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="1498" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="1495">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1496" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1502">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1503" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1498">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1496">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1491" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1482">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="1483" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="1488">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1493">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1494" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="1495" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1483">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1484" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1484">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1485" relation="public-inheritance">
        </childnode>
        <childnode refid="1489" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1491" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1499" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1501" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1502" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1504" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1506" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1494">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="1485">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1486" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1488" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1489" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1490" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1491" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1493" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="1497" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="37" bodyend="139"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabSet_1a182516582f14a4a256cbf668e792c16a" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1af9b050ca294c80ff86db5a5e5904a56b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1a98db637aaf21425da2c071ef85e20b03" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1a3e8ffc6f231300dea931b2fc7c888d49" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>array</name></member>
      <member refid="classamrex_1_1FabSet_1a41b09240f56561e7475cec5016ec29f1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabSet_1a400f9bfe07b9e4a18bee1f6cf6b98b29" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabSet_1a469669c164630747b67a4c290884a5ed" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>Copy</name></member>
      <member refid="classamrex_1_1FabSet_1a2f119b545c70dc14f232664bc31df5ef" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSet_1affeffcfe2649fbc28d92deae76916215" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1FabSet_1ae7dcffed2be89421c4201e39acd821d1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabSet_1aed21a9ab0931c16cfcd91b36f9f179c2" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>define</name></member>
      <member refid="classamrex_1_1FabSet_1a842c0212a39e9d6a26c0973ca5f7ec45" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabSet_1a21fcb9b49d394757a8851c7ad9d1bbb8" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabSet_1a3c8994057d3e343fd78bedb32fdfac57" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabSet_1ae28c822f69fab401656e69d989438d51" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabSet_1ab5492420a080e0b7c904b808c55f8612" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabSet_1af236d8ff26644ad1dd27349a03ed8699" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabSet_1ae3c508e9494bfdf5071740162cc5326f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a1846f0f6db44aa266078b17c52d76179" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a7cb5d2b009728abc048ee3aec09a3c51" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a93ef7dd5647853ce4dae5da5778befd9" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a896c49ff3ec742b65e084b6e3a3d3789" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a4fb9954facb78e38d087c17b79bca828" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a5a22c9de22472d4f8ca41599617ca848" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a002b794ea4b35e21e461cdb6b144c99c" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabSet_1a07ac28a240af8aef44560055b09e0411" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1a5462d217f9ec7d07c1759f26cde88be2" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1aba4f91a1b74d90439746773600170fd3" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1ae8ccac97d087013c98ef349c90737123" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSet</name></member>
      <member refid="classamrex_1_1FabSet_1a04d9b65884e6bbe0e494af350ee9fe70" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>FabSetIter</name></member>
      <member refid="classamrex_1_1FabSet_1a73a0f9bfd301cc69846f78fbbbec0527" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>FluxRegister</name></member>
      <member refid="classamrex_1_1FabSet_1ae4057548b7e1b8f66f5c340ec4c5f088" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSet_1a9a76863d5b17027b20d663cd2968c790" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>linComb</name></member>
      <member refid="classamrex_1_1FabSet_1afa58a70c61ea7368f91116f22ccea876" prot="private" virt="non-virtual"><scope>amrex::FabSet</scope><name>m_mf</name></member>
      <member refid="classamrex_1_1FabSet_1a5377add0b62a78f2d9c37171a4a115db" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabSet_1a5f606dfdb767ad78b61c72a9da1c378f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSet_1a320a46748e6a027a5fdf198a1ac1358d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabSet_1a2badb3776780ac8a213fa965cf0ff13d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1a61007a34401538992b3a64b37dbe142b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1a4fffa26fb3d1baf9bb293bdab1a60052" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1a3d8c142b6ffa76709400d65786f3a2a9" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabSet_1abb11e15ccfd9eb9cf7b9cfc75f4bd30d" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSet_1a20ff927f81d91df3a565fb0b06de0ef1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1FabSet_1a4373be6cb5699b5158e3f47e6ae2ce2f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>plusTo</name></member>
      <member refid="classamrex_1_1FabSet_1ab5d92ff15c80180af8a7bc09bbb6c4b5" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>read</name></member>
      <member refid="classamrex_1_1FabSet_1a634eeba26a1426e7c29db10d476f266f" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSet_1a0d009b1309e07ed944160b4f737fbc2b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabSet_1ae3385643e4fd61e113cfce3d8fed45e1" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>size</name></member>
      <member refid="classamrex_1_1FabSet_1a03119f3ab7d7bdc06e822b46ee1c96d3" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>write</name></member>
      <member refid="classamrex_1_1FabSet_1ac79a8fcbd950fa941c9db2c7fa4e892b" prot="public" virt="non-virtual"><scope>amrex::FabSet</scope><name>~FabSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
