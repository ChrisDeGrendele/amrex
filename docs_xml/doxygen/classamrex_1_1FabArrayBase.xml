<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FabArrayBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArrayBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FAB &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::CutFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::Mask &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; IArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; TagBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; Real &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; BCTuple &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; GFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; HYPRE_Int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; RealTuple &gt;</derivedcompoundref>
    <includes refid="AMReX__FabArrayBase_8H" local="no">AMReX_FabArrayBase.H</includes>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1BDKey" prot="public">amrex::FabArrayBase::BDKey</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CacheStats" prot="public">amrex::FabArrayBase::CacheStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CFinfo" prot="public">amrex::FabArrayBase::CFinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CopyComTag" prot="public">amrex::FabArrayBase::CopyComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CPC" prot="protected">amrex::FabArrayBase::CPC</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" prot="protected">amrex::FabArrayBase::FabArrayStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabComTag" prot="public">amrex::FabArrayBase::FabComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FB" prot="protected">amrex::FabArrayBase::FB</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FPinfo" prot="public">amrex::FabArrayBase::FPinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1TileArray" prot="public">amrex::FabArrayBase::TileArray</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" static="no">
        <name>CpOp</name>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public">
          <name>COPY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public">
          <name>ADD</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>parallel copy or add </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="374" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1aad1bcd5a45514f9dffbeaa327d3aa880" kindref="member">CopyComTag::CopyComTagsContainer</ref></type>
        <definition>typedef CopyComTag::CopyComTagsContainer amrex::FabArrayBase::CopyComTagsContainer</definition>
        <argsstring></argsstring>
        <name>CopyComTagsContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="183" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1ac93e9be5fadb2a282072412f8801a271" kindref="member">CopyComTag::MapOfCopyComTagContainers</ref></type>
        <definition>typedef CopyComTag::MapOfCopyComTagContainers amrex::FabArrayBase::MapOfCopyComTagContainers</definition>
        <argsstring></argsstring>
        <name>MapOfCopyComTagContainers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="184" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::FPinfo*&gt; amrex::FabArrayBase::FPinfoCache</definition>
        <argsstring></argsstring>
        <name>FPinfoCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" static="no">
        <type>FPinfoCache::iterator</type>
        <definition>typedef FPinfoCache::iterator amrex::FabArrayBase::FPinfoCacheIter</definition>
        <argsstring></argsstring>
        <name>FPinfoCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">FabArrayBase::CFinfo</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::CFinfoCache =  std::multimap&lt;BDKey,FabArrayBase::CFinfo*&gt;</definition>
        <argsstring></argsstring>
        <name>CFinfoCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="357" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" static="no">
        <type>CFinfoCache::iterator</type>
        <definition>using amrex::FabArrayBase::CFinfoCacheIter =  CFinfoCache::iterator</definition>
        <argsstring></argsstring>
        <name>CFinfoCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="358" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="358" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="protected" static="no">
        <type>std::map&lt; std::pair&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;, <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TAMap =  std::map&lt;std::pair&lt;IntVect,IntVect&gt;, TileArray&gt;</definition>
        <argsstring></argsstring>
        <name>TAMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="414" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="protected" static="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" kindref="member">TAMap</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TACache =  std::map&lt;BDKey, TAMap&gt;</definition>
        <argsstring></argsstring>
        <name>TACache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="protected" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FabArrayBase::FB</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::FB*&gt; amrex::FabArrayBase::FBCache</definition>
        <argsstring></argsstring>
        <name>FBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="458" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="protected" static="no">
        <type>FBCache::iterator</type>
        <definition>typedef FBCache::iterator amrex::FabArrayBase::FBCacheIter</definition>
        <argsstring></argsstring>
        <name>FBCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="protected" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::CPC*&gt; amrex::FabArrayBase::CPCache</definition>
        <argsstring></argsstring>
        <name>CPCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="520" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="protected" static="no">
        <type>CPCache::iterator</type>
        <definition>typedef CPCache::iterator amrex::FabArrayBase::CPCacheIter</definition>
        <argsstring></argsstring>
        <name>CPCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="521" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MFIter</definition>
        <argsstring></argsstring>
        <name>MFIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1a0730c47ed240b86d1a24126a0adf6b13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MFGhostIter</definition>
        <argsstring></argsstring>
        <name>MFGhostIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AmrTask</definition>
        <argsstring></argsstring>
        <name>AmrTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1ae11e4187caa383605cab8f4d54ce115c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void FillBoundary</definition>
        <argsstring>(Vector&lt; FabArray&lt; FAB &gt; * &gt; const &amp;mf, const Periodicity &amp;period)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; * &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="40" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::mfiter_tile_size</definition>
        <argsstring></argsstring>
        <name>mfiter_tile_size</name>
        <briefdescription>
<para>Default tilesize in <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::mfghostiter_tile_size</definition>
        <argsstring></argsstring>
        <name>mfghostiter_tile_size</name>
        <briefdescription>
<para>Default tilesize in <ref refid="classamrex_1_1MFGhostIter" kindref="compound">MFGhostIter</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="271" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArrayBase::MaxComp</definition>
        <argsstring></argsstring>
        <name>MaxComp</name>
        <briefdescription>
<para>The maximum number of components to copy() at a time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::comm_tile_size</definition>
        <argsstring></argsstring>
        <name>comm_tile_size</name>
        <briefdescription>
<para>communication tile size </para>        </briefdescription>
        <detaileddescription>
<para>To maximize thread efficiency we now can decompose things like intersections among boxes into smaller tiles. This sets their maximum size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" kindref="member">FPinfoCache</ref></type>
        <definition>FabArrayBase::FPinfoCache amrex::FabArrayBase::m_TheFillPatchCache</definition>
        <argsstring></argsstring>
        <name>m_TheFillPatchCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_FPinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_FPinfo_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="318" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" kindref="member">CFinfoCache</ref></type>
        <definition>FabArrayBase::CFinfoCache amrex::FabArrayBase::m_TheCrseFineCache</definition>
        <argsstring></argsstring>
        <name>m_TheCrseFineCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="360" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_CFinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_CFinfo_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="362" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="362" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::FabArrayBase::boxarray</definition>
        <argsstring></argsstring>
        <name>boxarray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::FabArrayBase::distributionMap</definition>
        <argsstring></argsstring>
        <name>distributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="402" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArrayBase::indexArray</definition>
        <argsstring></argsstring>
        <name>indexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="403" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; amrex::FabArrayBase::ownership</definition>
        <argsstring></argsstring>
        <name>ownership</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::n_grow</definition>
        <argsstring></argsstring>
        <name>n_grow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="405" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArrayBase::n_comp</definition>
        <argsstring></argsstring>
        <name>n_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="protected" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::m_bdkey</definition>
        <argsstring></argsstring>
        <name>m_bdkey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" kindref="member">TACache</ref></type>
        <definition>FabArrayBase::TACache amrex::FabArrayBase::m_TheTileArrayCache</definition>
        <argsstring></argsstring>
        <name>m_TheTileArrayCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="417" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="protected" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_TAC_stats</definition>
        <argsstring></argsstring>
        <name>m_TAC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="418" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" kindref="member">FBCache</ref></type>
        <definition>FabArrayBase::FBCache amrex::FabArrayBase::m_TheFBCache</definition>
        <argsstring></argsstring>
        <name>m_TheFBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="461" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="protected" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_FBC_stats</definition>
        <argsstring></argsstring>
        <name>m_FBC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="protected" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" kindref="member">CPCache</ref></type>
        <definition>FabArrayBase::CPCache amrex::FabArrayBase::m_TheCPCache</definition>
        <argsstring></argsstring>
        <name>m_TheCPCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="523" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="protected" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_CPC_stats</definition>
        <argsstring></argsstring>
        <name>m_CPC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="524" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="protected" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, int &gt;</type>
        <definition>std::map&lt; FabArrayBase::BDKey, int &gt; amrex::FabArrayBase::m_BD_count</definition>
        <argsstring></argsstring>
        <name>m_BD_count</name>
        <briefdescription>
<para>Keep track of how many FabArrays are built with the same <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="534" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="protected" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" kindref="compound">FabArrayStats</ref></type>
        <definition>FabArrayBase::FabArrayStats amrex::FabArrayBase::m_FA_stats</definition>
        <argsstring></argsstring>
        <name>m_FA_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="573" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="573" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>()</argsstring>
        <name>FabArrayBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a9d0b50241fbebae6e3d53e301cf2b23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FabArrayBase::~FabArrayBase</definition>
        <argsstring>()</argsstring>
        <name>~FabArrayBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase&amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase&amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="168" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1adbca6fa8ac3f0235bd5127d2ac6b824d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::nGrow</definition>
        <argsstring>() const </argsstring>
        <name>nGrow</name>
        <briefdescription>
<para>Return the grow factor that defines the region of definition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a04f6b5015129a821f4795f7d6961882d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::nGrowVect</definition>
        <argsstring>() const </argsstring>
        <name>nGrowVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae4e2bad9efefadebb427bf489b2d1a12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::nComp</definition>
        <argsstring>() const </argsstring>
        <name>nComp</name>
        <briefdescription>
<para>Return number of variables (aka components) associated with each point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a865e0dd2792f99689596854979d22a75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::FabArrayBase::ixType</definition>
        <argsstring>() const </argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Return index type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae98208a1e4f339ed036c8b576ad02c11" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1af3cc07aae7bfab423fa9c30bba2efd59" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::FabArrayBase::boxArray</definition>
        <argsstring>() const </argsstring>
        <name>boxArray</name>
        <briefdescription>
<para>Return a constant reference to the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> that defines the valid region associated with this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a9eecb871b30ae6ab32fadf9965e4de03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabArrayBase::box</definition>
        <argsstring>(int K) const </argsstring>
        <name>box</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. That is, the valid region of the Kth grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a5f92b2284bc3a8d917f708a72143f668" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabArrayBase::fabbox</definition>
        <argsstring>(int K) const </argsstring>
        <name>fabbox</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth FABs <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. That is, the region the Kth fab is actually defined on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aeadcc8b1b71512821a778b9c17ff92a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="96" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a46a40783e85e254841240a0a909838b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::local_size</definition>
        <argsstring>() const </argsstring>
        <name>local_size</name>
        <briefdescription>
<para>Return the number of local FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a78e63b7b4263787e761130e31087f501" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::FabArrayBase::IndexArray</definition>
        <argsstring>() const </argsstring>
        <name>IndexArray</name>
        <briefdescription>
<para>Return constant reference to indices in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> that we have access. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a39c14fa53319470e0a29b6dcd3772441" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::localindex</definition>
        <argsstring>(int K) const </argsstring>
        <name>localindex</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return local index in the vector of FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a91b9b8d89859dcf641c0d42348b3f0ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::FabArrayBase::DistributionMap</definition>
        <argsstring>() const </argsstring>
        <name>DistributionMap</name>
        <briefdescription>
<para>Return constant reference to associated <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1af8fc41eb806cf2a13724a31922ab1c63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::getBDKey</definition>
        <argsstring>() const </argsstring>
        <name>getBDKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::updateBDKey</definition>
        <argsstring>()</argsstring>
        <name>updateBDKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1618" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFPinfo</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>flushFPinfo</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="327" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1189" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCFinfo</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>flushCFinfo</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="370" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1352" bodyend="1365"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab8548585b1a018f9d0a85cd43a719fe8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> *</type>
        <definition>const FabArrayBase::TileArray * amrex::FabArrayBase::getTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize) const </argsstring>
        <name>getTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="376" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1399" bodyend="1431"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a1f6dc68b468c213274abf8e9219b532a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::FabArrayBase::bytesOfMapOfCopyComTagContainers</definition>
        <argsstring>(const MapOfCopyComTagContainers &amp;)</argsstring>
        <name>bytesOfMapOfCopyComTagContainers</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" kindref="member">MapOfCopyComTagContainers</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="206" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initialize from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> with &quot;fabarray&quot; prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="79" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="278" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1368" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a20cc17a77f504ca37faf5458eea01daf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FPinfo</ref> &amp;</type>
        <definition>const FabArrayBase::FPinfo &amp; amrex::FabArrayBase::TheFPinfo</definition>
        <argsstring>(const FabArrayBase &amp;srcfa, const FabArrayBase &amp;dstfa, const Box &amp;dstdomain, const IntVect &amp;dstng, const BoxConverter &amp;coarsener, const Box &amp;cdomain)</argsstring>
        <name>TheFPinfo</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>srcfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>dstfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dstdomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxConverter" kindref="compound">BoxConverter</ref> &amp;</type>
          <declname>coarsener</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>cdomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="320" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1140" bodyend="1186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">CFinfo</ref> &amp;</type>
        <definition>const FabArrayBase::CFinfo &amp; amrex::FabArrayBase::TheCFinfo</definition>
        <argsstring>(const FabArrayBase &amp;finefa, const Geometry &amp;finegm, const IntVect &amp;ng, bool include_periodic, bool include_physbndry)</argsstring>
        <name>TheCFinfo</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>finefa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>finegm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_periodic</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_physbndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="364" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1310" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae87329fe7a046f188ea78e63047152b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::WaitForAsyncSends</definition>
        <argsstring>(int N_snds, Vector&lt; MPI_Request &gt; &amp;send_reqs, Vector&lt; char * &gt; &amp;send_data, Vector&lt; MPI_Status &gt; &amp;stats)</argsstring>
        <name>WaitForAsyncSends</name>
        <param>
          <type>int</type>
          <declname>N_snds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>send_reqs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Block until all send requests complete. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="379" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1628" bodyend="1643"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="386" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7d491dc99a1d65c8ec12506e40867ecc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>DistributionMapping&amp; amrex::FabArrayBase::ModifyDistributionMap</definition>
        <argsstring>()</argsstring>
        <name>ModifyDistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="388" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a826764d64c91510906e157ae2669c9fe" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; bool &gt; &amp;</type>
        <definition>const std::vector&lt;bool&gt;&amp; amrex::FabArrayBase::OwnerShip</definition>
        <argsstring>() const </argsstring>
        <name>OwnerShip</name>
        <briefdescription>
<para>Return owenership of fabs. The concept of ownership only applies when UPC++ team is used. In that case, each fab is shared by team workers, with one taking the ownership. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="395" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1adaab2aa39653ad6be0ef6bb6d6565ef9" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::isOwner</definition>
        <argsstring>(int li) const </argsstring>
        <name>isOwner</name>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a1abcd5df36dacaa8b31e6fcaaed30be3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::buildTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize, TileArray &amp;ta) const </argsstring>
        <name>buildTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &amp;</type>
          <declname>ta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="420" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1434" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa5c5f9aa77f5d7c4c73fafea2dc0116e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize=IntVect::TheZeroVector(), bool no_assertion=false) const </argsstring>
        <name>flushTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
          <defval><ref refid="classamrex_1_1IntVect_1acfa290124ab75f4a94ce37ef98870174" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="422" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1527" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a5b4a0572662ad2d1a9cc30f3c6d8fd73" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref> &amp;</type>
        <definition>const FabArrayBase::FB &amp; amrex::FabArrayBase::getFB</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false, bool enforce_periodicity_only=false) const </argsstring>
        <name>getFB</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="464" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1021" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a53cf0c60964630e381fd523a72fbf267" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFB</definition>
        <argsstring>(bool no_assertion=false) const </argsstring>
        <name>flushFB</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="467" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="991" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a887fcf01f365f0cd92d32fceeba8ee3a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref> &amp;</type>
        <definition>const FabArrayBase::CPC &amp; amrex::FabArrayBase::getCPC</definition>
        <argsstring>(const IntVect &amp;dstng, const FabArrayBase &amp;src, const IntVect &amp;srcng, const Periodicity &amp;period) const </argsstring>
        <name>getCPC</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>srcng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="526" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="552" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a937cce5d85fb91c1bddad5f9f3c0adc4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCPC</definition>
        <argsstring>(bool no_assertion=false) const </argsstring>
        <name>flushCPC</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="529" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="492" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clearThisBD</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>clearThisBD</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>clear BD count and caches associated with this BD, if no other is using this BD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="537" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1582" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::addThisBD</definition>
        <argsstring>()</argsstring>
        <name>addThisBD</name>
        <briefdescription>
<para>add the current BD into BD count database </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="540" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1606" bodyend="1615"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushTileArrayCache</definition>
        <argsstring>()</argsstring>
        <name>flushTileArrayCache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1564" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFBCache</definition>
        <argsstring>()</argsstring>
        <name>flushFBCache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="468" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1007" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCPCache</definition>
        <argsstring>()</argsstring>
        <name>flushCPCache</name>
        <briefdescription>
<para>This flusheds the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="530" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="536" bodyend="549"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1395">
        <label>amrex::LayoutData&lt; HYPRE_Int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1390">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1386">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="1385" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1392">
        <label>amrex::LayoutData&lt; BCTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1379">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1389">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1377">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1382">
        <label>amrex::FabArray&lt; amrex::Mask &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1387">
        <label>amrex::FabArray&lt; TagBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1394">
        <label>amrex::EB2::MultiGFab</label>
        <link refid="classamrex_1_1EB2_1_1MultiGFab"/>
        <childnode refid="1393" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1381">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1385">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1393">
        <label>amrex::LayoutData&lt; GFab &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1380">
        <label>amrex::FabArray&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1391">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1384">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1383" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1378">
        <label>amrex::LayoutData&lt; T &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1396">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1383">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1388">
        <label>amrex::TagBoxArray</label>
        <link refid="classamrex_1_1TagBoxArray"/>
        <childnode refid="1387" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1376">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1398">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1399" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1402">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1401">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1401" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1403">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1404" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1399">
        <label>string</label>
      </node>
      <node id="1404">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1409">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="1401" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="1410" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="1407">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1408" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1410">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1408">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1403" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1400">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1405">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1406" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="1407" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1406">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="1397">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1398" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1400" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1401" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1402" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1403" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1405" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="1409" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="30" bodyend="581"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>AmrTask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9eecb871b30ae6ab32fadf9965e4de03" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af3cc07aae7bfab423fa9c30bba2efd59" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1abcd5df36dacaa8b31e6fcaaed30be3" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1f6dc68b468c213274abf8e9219b532a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a91b9b8d89859dcf641c0d42348b3f0ff" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae98208a1e4f339ed036c8b576ad02c11" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f92b2284bc3a8d917f708a72143f668" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae11e4187caa383605cab8f4d54ce115c" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a937cce5d85fb91c1bddad5f9f3c0adc4" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a53cf0c60964630e381fd523a72fbf267" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5c5f9aa77f5d7c4c73fafea2dc0116e" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af8fc41eb806cf2a13724a31922ab1c63" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a887fcf01f365f0cd92d32fceeba8ee3a" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5b4a0572662ad2d1a9cc30f3c6d8fd73" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab8548585b1a018f9d0a85cd43a719fe8" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a78e63b7b4263787e761130e31087f501" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adaab2aa39653ad6be0ef6bb6d6565ef9" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a865e0dd2792f99689596854979d22a75" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a46a40783e85e254841240a0a909838b0" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a39c14fa53319470e0a29b6dcd3772441" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0730c47ed240b86d1a24126a0adf6b13" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MFGhostIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>mfghostiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d491dc99a1d65c8ec12506e40867ecc" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ModifyDistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4e2bad9efefadebb427bf489b2d1a12" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adbca6fa8ac3f0235bd5127d2ac6b824d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a04f6b5015129a821f4795f7d6961882d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a826764d64c91510906e157ae2669c9fe" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aeadcc8b1b71512821a778b9c17ff92a5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="protected" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a20cc17a77f504ca37faf5458eea01daf" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae87329fe7a046f188ea78e63047152b6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>WaitForAsyncSends</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d0b50241fbebae6e3d53e301cf2b23a" prot="public" virt="virtual"><scope>amrex::FabArrayBase</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
