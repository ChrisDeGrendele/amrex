<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Cuda_1_1Device" kind="class" language="C++" prot="public">
    <compoundname>amrex::Cuda::Device</compoundname>
    <includes refid="AMReX__CudaDevice_8H" local="no">AMReX_CudaDevice.H</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Cuda_1_1Device_1a33d416e52bae75c6ba07b702011704e1" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::Cuda::Device::device_id</definition>
        <argsstring></argsstring>
        <name>device_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Cuda_1_1Device_1a99494b0afcf79273968ad7c97c7efb5f" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::Cuda::Device::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a17f270a2e5fc744785e9f9703d92cef0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="44" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1afe2c5a018120ee47fa89415ccc405aa8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="209" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a52c23d02896e93579ae6da7df753ad55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::setStreamIndex</definition>
        <argsstring>(const int idx) noexcept</argsstring>
        <name>setStreamIndex</name>
        <param>
          <type>const int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="26" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="290" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a3027d09dd4cd1d8c2412acd80c5cba20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Cuda::Device::resetStreamIndex</definition>
        <argsstring>() noexcept</argsstring>
        <name>resetStreamIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1ad85a02094decf969317e4717e0d65022" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Cuda::Device::deviceId</definition>
        <argsstring>() noexcept</argsstring>
        <name>deviceId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1ae01d7dcd4f13ed7a33ab92738a70e7d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::synchronize</definition>
        <argsstring>()</argsstring>
        <name>synchronize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1aed31621adda320515dfb24278e1a8f76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::streamSynchronize</definition>
        <argsstring>()</argsstring>
        <name>streamSynchronize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="310" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a3e270a7a5fc84a5ad082b50b63f259ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::htod_memcpy</definition>
        <argsstring>(void *p_d, const void *p_h, const std::size_t sz)</argsstring>
        <name>htod_memcpy</name>
        <param>
          <type>void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="318" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a0e6bc646ae21a48a7cb43fbc3170838d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::dtoh_memcpy</definition>
        <argsstring>(void *p_h, const void *p_d, const std::size_t sz)</argsstring>
        <name>dtoh_memcpy</name>
        <param>
          <type>void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="327" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a43700da05e86a1d8fa4111882b1ecc39" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::htod_memcpy_async</definition>
        <argsstring>(void *p_d, const void *p_h, const std::size_t sz)</argsstring>
        <name>htod_memcpy_async</name>
        <param>
          <type>void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="336" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1ac898c35932d0b8532dff84b8e8bd12b4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::dtoh_memcpy_async</definition>
        <argsstring>(void *p_h, const void *p_d, const std::size_t sz)</argsstring>
        <name>dtoh_memcpy_async</name>
        <param>
          <type>void *</type>
          <declname>p_h</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p_d</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="345" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1aedb43a2ef9428c84d5adda17bbd589b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::mem_advise_set_preferred</definition>
        <argsstring>(void *p, const std::size_t sz, const int device)</argsstring>
        <name>mem_advise_set_preferred</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="354" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1a411b253f1f17f2eff9c2765ded1c0e1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::mem_advise_set_readonly</definition>
        <argsstring>(void *p, const std::size_t sz)</argsstring>
        <name>mem_advise_set_readonly</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="364" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1aac8657922072fd54afe5c7f44b93750f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Cuda::Device::freeMemAvailable</definition>
        <argsstring>()</argsstring>
        <name>freeMemAvailable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="524" bodyend="533"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1Cuda_1_1Device_1ad0ce1765bb4b1fe0c70e203b5510d73b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Cuda::Device::initialize_cuda</definition>
        <argsstring>()</argsstring>
        <name>initialize_cuda</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.cpp" bodystart="229" bodyend="281"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaDevice.H" bodystart="15" bodyend="77"/>
    <listofallmembers>
      <member refid="classamrex_1_1Cuda_1_1Device_1a33d416e52bae75c6ba07b702011704e1" prot="private" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>device_id</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1ad85a02094decf969317e4717e0d65022" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>deviceId</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a0e6bc646ae21a48a7cb43fbc3170838d" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>dtoh_memcpy</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1ac898c35932d0b8532dff84b8e8bd12b4" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>dtoh_memcpy_async</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1afe2c5a018120ee47fa89415ccc405aa8" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1aac8657922072fd54afe5c7f44b93750f" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>freeMemAvailable</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a3e270a7a5fc84a5ad082b50b63f259ab" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>htod_memcpy</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a43700da05e86a1d8fa4111882b1ecc39" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>htod_memcpy_async</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a17f270a2e5fc744785e9f9703d92cef0" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1ad0ce1765bb4b1fe0c70e203b5510d73b" prot="private" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>initialize_cuda</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1aedb43a2ef9428c84d5adda17bbd589b1" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>mem_advise_set_preferred</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a411b253f1f17f2eff9c2765ded1c0e1d" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>mem_advise_set_readonly</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a3027d09dd4cd1d8c2412acd80c5cba20" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>resetStreamIndex</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a52c23d02896e93579ae6da7df753ad55" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>setStreamIndex</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1aed31621adda320515dfb24278e1a8f76" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>streamSynchronize</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1ae01d7dcd4f13ed7a33ab92738a70e7d2" prot="public" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>synchronize</name></member>
      <member refid="classamrex_1_1Cuda_1_1Device_1a99494b0afcf79273968ad7c97c7efb5f" prot="private" virt="non-virtual"><scope>amrex::Cuda::Device</scope><name>verbose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
