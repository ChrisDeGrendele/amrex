<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1FabArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArray</compoundname>
    <basecompoundref refid="classamrex_1_1FabArrayBase" prot="public" virt="non-virtual">amrex::FabArrayBase</basecompoundref>
    <includes refid="AMReX__DistributionMapping_8H" local="no">AMReX_DistributionMapping.H</includes>
    <innerclass refid="structamrex_1_1FabArray_1_1FABType" prot="public">amrex::FabArray::FABType</innerclass>
    <innerclass refid="structamrex_1_1FabArray_1_1ShMem" prot="protected">amrex::FabArray::ShMem</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>FAB</declname>
        <defname>FAB</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" static="no">
        <type>typename std::conditional&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, FAB, <ref refid="structamrex_1_1FabArray_1_1FABType" kindref="compound">FABType</ref> &gt;::type::value_type</type>
        <definition>using amrex::FabArray&lt; FAB &gt;::value_type =  typename std::conditional&lt;IsBaseFab&lt;FAB&gt;::value, FAB, FABType&gt;::type::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" static="no">
        <type>std::vector&lt; FAB * &gt;::iterator</type>
        <definition>typedef std::vector&lt;FAB*&gt;::iterator amrex::FabArray&lt; FAB &gt;::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="694" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="694" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabArray_1a2df56bce875115e30eee589571642e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Action</definition>
        <argsstring></argsstring>
        <name>Action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArray_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class AmrTask</definition>
        <argsstring></argsstring>
        <name>AmrTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="125" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArray_1a60f56cd45cbe9dc96de858a4ecc30f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class MFGraph</definition>
        <argsstring></argsstring>
        <name>MFGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &gt;</type>
        <definition>std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::FabArray&lt; FAB &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="628" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::define_function_called</definition>
        <argsstring></argsstring>
        <name>define_function_called</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="630" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; FAB * &gt;</type>
        <definition>std::vector&lt;FAB*&gt; amrex::FabArray&lt; FAB &gt;::m_fabs_v</definition>
        <argsstring></argsstring>
        <name>m_fabs_v</name>
        <briefdescription>
<para>The data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="634" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FabArray_1_1ShMem" kindref="compound">ShMem</ref></type>
        <definition>ShMem amrex::FabArray&lt; FAB &gt;::shmem</definition>
        <argsstring></argsstring>
        <name>shmem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="689" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="689" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_cross</definition>
        <argsstring></argsstring>
        <name>fb_cross</name>
        <briefdescription>
<para>Data used in non-blocking FillBoundary. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="728" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::fb_epo</definition>
        <argsstring></argsstring>
        <name>fb_epo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="728" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_scomp</definition>
        <argsstring></argsstring>
        <name>fb_scomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="729" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_ncomp</definition>
        <argsstring></argsstring>
        <name>fb_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="729" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArray&lt; FAB &gt;::fb_nghost</definition>
        <argsstring></argsstring>
        <name>fb_nghost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="730" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::FabArray&lt; FAB &gt;::fb_period</definition>
        <argsstring></argsstring>
        <name>fb_period</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="731" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_the_recv_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="734" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* amrex::FabArray&lt; FAB &gt;::fb_the_send_data</definition>
        <argsstring></argsstring>
        <name>fb_the_send_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="735" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_from</definition>
        <argsstring></argsstring>
        <name>fb_recv_from</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="736" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_data</definition>
        <argsstring></argsstring>
        <name>fb_recv_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="737" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a8fd0580be481f200e59e850c297047ff" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_size</definition>
        <argsstring></argsstring>
        <name>fb_recv_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="738" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_reqs</definition>
        <argsstring></argsstring>
        <name>fb_recv_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="739" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt;</type>
        <definition>Vector&lt;MPI_Status&gt; amrex::FabArray&lt; FAB &gt;::fb_recv_stat</definition>
        <argsstring></argsstring>
        <name>fb_recv_stat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="740" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt;</type>
        <definition>Vector&lt;char*&gt; amrex::FabArray&lt; FAB &gt;::fb_send_data</definition>
        <argsstring></argsstring>
        <name>fb_send_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="745" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt;</type>
        <definition>Vector&lt;MPI_Request&gt; amrex::FabArray&lt; FAB &gt;::fb_send_reqs</definition>
        <argsstring></argsstring>
        <name>fb_send_reqs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="746" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArray&lt; FAB &gt;::fb_tag</definition>
        <argsstring></argsstring>
        <name>fb_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="747" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="747" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>()</argsstring>
        <name>FabArray</name>
        <briefdescription>
<para>Constructs an empty FabArray&lt;FAB&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1019" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Construct a FabArray&lt;FAB&gt; with a valid region defined by bxs and a region of definition defined by the grow factor ngrow and the number of components nvar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1026" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1036" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs, MakeType maketype, int scomp, int ncomp)</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>maketype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1050" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::~FabArray</definition>
        <argsstring>()</argsstring>
        <name>~FabArray</name>
        <briefdescription>
<para>The destructor <ndash/> deletes all FABs in the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1122" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>FabArray</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="181" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1074" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt; FAB &gt; &amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1096" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArray&lt; FAB &gt;::FabArray</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>FabArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
        <definition>FabArray&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a0d8c379908b048cb742470011c502084">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a5ac868702f5d6d3c8ced0bd5c1b64c5d">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
<para>Define this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> identically to that performed by the constructor having an analogous function signature. This is only valid if this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> was defined using the default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="193" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1159" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow, const MFInfo &amp;info=MFInfo(), const FabFactory&lt; FAB &gt; &amp;factory=DefaultFabFactory&lt; FAB &gt;())</argsstring>
        <name>define</name>
        <reimplementedby refid="classamrex_1_1MultiFab_1a051387c994b547b900dadc07c4141352">define</reimplementedby>
        <reimplementedby refid="classamrex_1_1iMultiFab_1a281e5d5ab94b2da37746b48219a29f9b">define</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref> &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1MFInfo" kindref="compound">MFInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
          <defval><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; FAB &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1171" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a274fc551857d7df4b7ee0f323f9bd03b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
        <definition>const FabFactory&lt;FAB&gt;&amp; amrex::FabArray&lt; FAB &gt;::Factory</definition>
        <argsstring>() const </argsstring>
        <name>Factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a980279927f5a463eefb0166a28c49cf8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::hasEBFabFactory</definition>
        <argsstring>() const </argsstring>
        <name>hasEBFabFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa487ad1a422a80a53b13055e1781b1df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is well-defined. That is, if FABs are allocated for each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and the sizes of the FABs and the number of components are consistent with the definition of the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1131" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1f237a18d3284534c623b18b92797a22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="237" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad1b9a4d03728ab60c756c318a1509285" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="240" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1a6f7ad66667ca6c168e0af5a63d5b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="243" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0433ddedba4a2ca3edef4d67de25791b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the FAB associated mfi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0976d6eb443856217f4ae3e707719f3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a130d5f44fdf6cd88e7fd8838f2215e42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const FAB &amp;</type>
        <definition>const FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K) const </argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a constant reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="252" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aa4ee40cd7ace3fb967a1f34799110609" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::operator[]</definition>
        <argsstring>(int K)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af4cf22368e304ec974183c5d8307cca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FAB &amp;</type>
        <definition>FAB&amp; amrex::FabArray&lt; FAB &gt;::get</definition>
        <argsstring>(int K)</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return a reference to the FAB associated with the Kth element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="258" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1accfa9f0ac52b9b171fbfa32ee139da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return pointer to FAB. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="880" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac93f63ae57bd3072a5c2aa435f402277" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="891" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adcbcd69aa213b9358109efdfe62504f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K)</argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="263" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="902" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a620bd721e366ea4d48510d4c82b40dd9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabPtr</definition>
        <argsstring>(int K) const </argsstring>
        <name>fabPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="264" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="913" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aaa500649ea1e93d1e97cdb5491eabce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabHostPtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="266" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="822" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab6c4c0d4f34ecaf91bfc2f3b5cb505b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabHostPtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="267" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="837" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a6e57255ec73705f247e388ba9dee8c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabHostPtr</definition>
        <argsstring>(int K)</argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="852" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad3c6bd2b98c8d9a545f40a1c9742a9bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabHostPtr</definition>
        <argsstring>(int K) const </argsstring>
        <name>fabHostPtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="866" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac7238520cf5dde82bdd4789711eb9bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabDevicePtr</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="271" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="781" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac98f6bdc5a6158ad5b43388e75b938ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabDevicePtr</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="272" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="792" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aebc495aaac9123df9e82b5be03576489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FAB *</type>
        <definition>FAB * amrex::FabArray&lt; FAB &gt;::fabDevicePtr</definition>
        <argsstring>(int K)</argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="273" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="803" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af6b131b73fe8a352542cf6e79a6bf251" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>FAB const *</type>
        <definition>FAB const * amrex::FabArray&lt; FAB &gt;::fabDevicePtr</definition>
        <argsstring>(int K) const </argsstring>
        <name>fabDevicePtr</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="813" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a13bb527e2f76e9b84c039dc8afd73411" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="925" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac084aac4ad6c4ac3e4578a1aaed4fa95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(const MFIter &amp;mfi)</argsstring>
        <name>array</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="933" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a18617b4ee336659e6bff3915446c9894" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> const  &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type const  &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K) const </argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a436bebd5873ccf69582b05fd0f16c0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt;::<ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref> &gt;</type>
        <definition>Array4&lt; typename FabArray&lt; FAB &gt;::value_type &gt; amrex::FabArray&lt; FAB &gt;::array</definition>
        <argsstring>(int K)</argsstring>
        <name>array</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="286" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(int K, FAB *elem)</argsstring>
        <name>setFab</name>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Explicitly set the Kth FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1307" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setFab</definition>
        <argsstring>(const MFIter &amp;mfi, FAB *elem, bool assertion=true)</argsstring>
        <name>setFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>FAB *</type>
          <declname>elem</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assertion</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Explicitly set the FAB associated with mfi in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to point to elem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1339" bodyend="1369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Releases FAB memory in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; addThisBD is called in define </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="956" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3fc4027ae0c1e980eaa6c0114da3b81c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="299" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1529" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4374433faed4724750dd8a69ad9c48aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::operator=</definition>
        <argsstring>(value_type val)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all components in the entire region of each FAB to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="303" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1537" bodyend="1540"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad1d40151f09332b60c0cdee69e4b8553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp to val. Also set the value of nghost boundary cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="311" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1545" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad73b836d7dff4e326507e10afc4f2492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1556" bodyend="1578"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac54516e4e13521280aeec43b24b3dbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set the value of num_comp components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component comp, as well as nghost boundary cells, to val, provided they also intersect with the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1583" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1af78d31b9c5e15987476451c2371913af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1595" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a35c362cea17bdec03e65f32757312b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="346" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="983" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae92dc047928fdb9d71ab35ec9e6a074e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="350" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="992" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7f6a39d04eb82b4df3ee7286cba0b529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, int nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Set all components in the valid region of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> to val, including nghost boundary cells, that also intersect the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> region. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="359" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1001" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7701b29609802d5798ddcef764bdbe50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setVal</definition>
        <argsstring>(value_type val, const Box &amp;region, const IntVect &amp;nghost)</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="364" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1011" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ab1c1fda3a571937849aecab49663339d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, int nghost=0)</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="369" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1626" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac537d3a80747079c625de44309e3a14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::abs</definition>
        <argsstring>(int comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>abs</name>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="372" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1634" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad2b7b5ca00ba6bb07ce96271b2694979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="375" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1655" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4e8d8fc656ca1b923d149a417af78141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::plus</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>plus</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="378" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1674" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a38af5fad82bae64dfbfe41fb3cc00900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="381" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1695" bodyend="1709"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a86d4655bbdc53c865977d0f26b2682be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::mult</definition>
        <argsstring>(value_type val, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>mult</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="384" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1714" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a54941ec8d9a3b361a06589f67dd7e202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="387" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1735" bodyend="1749"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a617391ca5a181e748cb062d6087593c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::invert</definition>
        <argsstring>(value_type numerator, const Box &amp;region, int comp, int num_comp, int nghost=0)</argsstring>
        <name>invert</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>region</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="390" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1754" bodyend="1770"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac4df22737680f212e21caf8ec30325dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set all values in the boundary region to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="394" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1374" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a28f885dfa9885870b12a5311a068cea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp)</argsstring>
        <name>setBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Set ncomp values in the boundary region, starting at start_comp to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="398" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1382" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aac31a019f89c4ebda04285b60d16b9e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set all values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1433" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3f6fba8a6ebf81524378226bc99cdd73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::setDomainBndry</definition>
        <argsstring>(value_type val, int strt_comp, int ncomp, const Geometry &amp;goem)</argsstring>
        <name>setDomainBndry</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strt_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>goem</declname>
        </param>
        <briefdescription>
<para>Set ncomp values outside the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> domain to val, starting at start_comp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="408" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1441" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from fa to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in fa is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the valid regions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="416" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="416" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>This function copies data from src to this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Each FAB in src is intersected with all FABs in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> and a copy is performed on the region of intersection. The intersection is restricted to the num_comp components starting at src_comp in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> src, with the destination components in this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> starting at dest_comp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="436" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="436" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="442" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="442" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="449" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
<para>Similar to the above function, except that source and destination are grown by src_nghost and dst_nghost, respectively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="458" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="458" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelAdd</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic())</argsstring>
        <name>ParallelAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="467" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="467" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="475" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::ParallelCopy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY, const FabArrayBase::CPC *a_cpc=nullptr)</argsstring>
        <name>ParallelCopy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> *</type>
          <declname>a_cpc</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, int src_nghost, int dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="494" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="494" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copy</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;src_nghost, const IntVect &amp;dst_nghost, const Periodicity &amp;period=Periodicity::NonPeriodic(), CpOp op=FabArrayBase::COPY)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>src_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dst_nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a38c75cba56d022201b4e1970534d5823" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" kindref="member">CpOp</ref></type>
          <declname>op</declname>
          <defval><ref refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" kindref="member">FabArrayBase::COPY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="503" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="503" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::Redistribute</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;src, int src_comp, int dest_comp, int num_comp, const IntVect &amp;nghost)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Copy from src to this. this and src have the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, but different <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="514" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="1249" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a0b91952d964518b99146f011e68e672e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>brief Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest into dest. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="528" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1500" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1abf03244eb777726665c52dd8ae1dba67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox into that subregion of dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="536" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1508" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a54771a4280585982df8b5e9448cb2e27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, int src_comp, int dest_comp, int num_comp, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest into dest, starting at component dest_comp in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="546" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1517" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a4c6ab796ee21881664e1deb85186e9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::copyTo</definition>
        <argsstring>(FAB &amp;dest, const Box &amp;subbox, int src_comp, int dest_comp, int num_comp, int nghost=0) const </argsstring>
        <name>copyTo</name>
        <param>
          <type>FAB &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Copy the values contained in the intersection of the num_comp component valid + nghost region of this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>, starting at component src_comp, with the FAB dest and the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> subbox, into dest, starting at component dest_comp in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::shift</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift the boxarray by vector v. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="566" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1774" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a56d0addbb69fba103b1092fa82d3307e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(int i) const </argsstring>
        <name>defined</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="568" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="755" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae6e2c62e15a07d93ee9c1ea93a8cb8ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::defined</definition>
        <argsstring>(const MFIter &amp;mfi) const </argsstring>
        <name>defined</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="569" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="768" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy on intersection within a <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. Data is copied from valid regions to intersecting regions of definition. The purpose is to fill in the boundary regions of each FAB in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. If cross=true, corner cells are not filled. If the length of periodic is provided, periodic boundaries are also filled. Note that <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> itself does not contains any periodicity information. FillBoundary expects that its cell-centered version of its <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is non-overlapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="582" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1795" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="584" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1806" bodyend="1813"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Same as <ref refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" kindref="member">FillBoundary()</ref>, but only copies ncomp components starting at scomp. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="587" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1817" bodyend="1824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="588" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1828" bodyend="1835"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="589" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1839" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="591" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1853" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="592" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1860" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="593" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1867" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="594" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1908" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false)</argsstring>
        <name>FillBoundary_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="595" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1916" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae759c94d4fb73a67bfd50cd3f385a0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FabArray::FillBoundary_test</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_test</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="599" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="1289" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Fill cells outside periodic domains with their corresponding cells inside the domain. Ghost cells are treated the same as valid cells. The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is allowed to be overlapping. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="605" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1874" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="606" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1885" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::EnforcePeriodicity</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period)</argsstring>
        <name>EnforcePeriodicity</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="607" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1896" bodyend="1904"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a542bac940ae8e28ba4511df6425972a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::BuildMask</definition>
        <argsstring>(const Box &amp;phys_domain, const Periodicity &amp;period, value_type covered, value_type notcovered, value_type physbnd, value_type interior)</argsstring>
        <name>BuildMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>phys_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>covered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>notcovered</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>physbnd</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" kindref="member">value_type</ref></type>
          <declname>interior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="617" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1926" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a25047280c9e632dd433580ce5a22b94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only=false)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1a116f51b7211235d89f58882892a4a5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FOO</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FBEP_nowait</definition>
        <argsstring>(int scomp, int ncomp, const IntVect &amp;nghost, const Periodicity &amp;period, bool cross, bool enforce_periodicity_only)</argsstring>
        <name>FBEP_nowait</name>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="17" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArray_1ae759c94d4fb73a67bfd50cd3f385a0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FOO</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::FillBoundary_finish</definition>
        <argsstring>()</argsstring>
        <name>FillBoundary_finish</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayCommI.H" bodystart="413" bodyend="536"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a487db209e402defbd460c5140ed75194" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArray&lt; FAB &gt;::SharedMemory</definition>
        <argsstring>() const </argsstring>
        <name>SharedMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="691" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="691" bodyend="691"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArray_1a3955615f0b51b775ef0fc1a374e142ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArray&lt; FAB &gt;::AllocFabs</definition>
        <argsstring>(const FabFactory&lt; FAB &gt; &amp;factory)</argsstring>
        <name>AllocFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; FAB &gt; &amp;</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" line="696" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArray.H" bodystart="1203" bodyend="1303"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1380">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1381" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1381">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1401">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="1384">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1385" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1388">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1387">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1387" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1382">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1383" relation="public-inheritance">
        </childnode>
        <childnode refid="1387" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="1389" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="1397" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="1399" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="1400" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="1402" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="1404" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="1402">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1403" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1389">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1390" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1385">
        <label>string</label>
      </node>
      <node id="1404">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="1387" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="1398">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="1397">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1398" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1399">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="1403">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="1390">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1395">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="1387" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="1396" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="1393">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1394" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1400">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1401" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1396">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="1394">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1389" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1386">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1391">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1392" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="1393" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1392">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="1383">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1384" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1386" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1387" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1388" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1389" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1391" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="1395" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.H" bodystart="20" bodyend="-1"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArray_1ab1c1fda3a571937849aecab49663339d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1ac537d3a80747079c625de44309e3a14d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>abs</name></member>
      <member refid="classamrex_1_1FabArray_1a2df56bce875115e30eee589571642e33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Action</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArray_1a3955615f0b51b775ef0fc1a374e142ff" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>AllocFabs</name></member>
      <member refid="classamrex_1_1FabArray_1ad8b63023f3ebd152c5cb931b975cc0a9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>AmrTask</name></member>
      <member refid="classamrex_1_1FabArray_1a13bb527e2f76e9b84c039dc8afd73411" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1ac084aac4ad6c4ac3e4578a1aaed4fa95" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a18617b4ee336659e6bff3915446c9894" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArray_1a436bebd5873ccf69582b05fd0f16c0ea" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>array</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9eecb871b30ae6ab32fadf9965e4de03" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af3cc07aae7bfab423fa9c30bba2efd59" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArray_1a542bac940ae8e28ba4511df6425972a7" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>BuildMask</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1abcd5df36dacaa8b31e6fcaaed30be3" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1f6dc68b468c213274abf8e9219b532a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a7544c03f72d87f3f49ea0683848dc8aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArray_1ad5437f2b6689074e7e4e2abc25662daa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a960ecb1ed695a7e13cbc7c3cff3f934a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a0194c55a13a8695b863eec146146335c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArray_1a097eb48c84133dcf0c0cb0fa40ca5f50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copy</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArray_1a0b91952d964518b99146f011e68e672e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1abf03244eb777726665c52dd8ae1dba67" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a54771a4280585982df8b5e9448cb2e27" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArray_1a4c6ab796ee21881664e1deb85186e9a2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>copyTo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArray_1a4b2db0304bc84a002692917c83bc1626" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1ae978e4109861cb21bbb90d389fee4a01" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArray_1a8a547f660eb49f5b25df2a1eddcd7eef" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>define_function_called</name></member>
      <member refid="classamrex_1_1FabArray_1a56d0addbb69fba103b1092fa82d3307e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArray_1ae6e2c62e15a07d93ee9c1ea93a8cb8ef" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>defined</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a91b9b8d89859dcf641c0d42348b3f0ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae98208a1e4f339ed036c8b576ad02c11" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArray_1adb282b42c0eb97cbb55037bc7bdea04a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aecf0e342dcbe19b9bb23e73c326155ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1a076781df7b9077c51fecd6a62172ed74" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>EnforcePeriodicity</name></member>
      <member refid="classamrex_1_1FabArray_1aed34744a8326118324307052aef407d9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a7ab314f12326cda647aa1fe94644653e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2797eff487b1b16ec6cb075cfdd2fb1d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a4e5969fd37c641e0b9bb849f812c1199" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a24c8625dbbdf687a2f44a071b97badeb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArray_1a2f8ab656cb0ef985199be4e578ec91b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f92b2284bc3a8d917f708a72143f668" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArray_1ac7238520cf5dde82bdd4789711eb9bc8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabArray_1ac98f6bdc5a6158ad5b43388e75b938ac" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabArray_1aebc495aaac9123df9e82b5be03576489" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabArray_1af6b131b73fe8a352542cf6e79a6bf251" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabDevicePtr</name></member>
      <member refid="classamrex_1_1FabArray_1aaa500649ea1e93d1e97cdb5491eabce2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabArray_1ab6c4c0d4f34ecaf91bfc2f3b5cb505b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a6e57255ec73705f247e388ba9dee8c6f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabArray_1ad3c6bd2b98c8d9a545f40a1c9742a9bb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabHostPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a1accfa9f0ac52b9b171fbfa32ee139da" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1ac93f63ae57bd3072a5c2aa435f402277" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1adcbcd69aa213b9358109efdfe62504f5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a620bd721e366ea4d48510d4c82b40dd9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fabPtr</name></member>
      <member refid="classamrex_1_1FabArray_1a274fc551857d7df4b7ee0f323f9bd03b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Factory</name></member>
      <member refid="classamrex_1_1FabArray_1a1de730376dd381a0e0aaf26cee0565b4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_cross</name></member>
      <member refid="classamrex_1_1FabArray_1a895064ef39dcc1b70cab62ef59243c15" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_epo</name></member>
      <member refid="classamrex_1_1FabArray_1aae76a45a4f6107d123d1f12123017515" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_ncomp</name></member>
      <member refid="classamrex_1_1FabArray_1aa14d5a982abbba95b4879b453d6e884b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_nghost</name></member>
      <member refid="classamrex_1_1FabArray_1afa2c5f52dddbe274a661b57fa60abf49" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_period</name></member>
      <member refid="classamrex_1_1FabArray_1a03fbd0e37ccb140399d5111ad8a9173a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1a256a4c5d1f5d93ed4f69baba008fd293" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_from</name></member>
      <member refid="classamrex_1_1FabArray_1a9ded15081c72b00f3649cb6890b03a31" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1a8fd0580be481f200e59e850c297047ff" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_size</name></member>
      <member refid="classamrex_1_1FabArray_1a2c94d11906514b3f8290a85682eb02b8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_recv_stat</name></member>
      <member refid="classamrex_1_1FabArray_1addcd803413e8691d103bd137cabf5406" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_scomp</name></member>
      <member refid="classamrex_1_1FabArray_1a6d78698d8d519bd122eb9c3d405d535b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_data</name></member>
      <member refid="classamrex_1_1FabArray_1a7a8376a51b48f1310d3d350ac70fe345" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_send_reqs</name></member>
      <member refid="classamrex_1_1FabArray_1ac557f1eed392826db1eec4119103134a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_tag</name></member>
      <member refid="classamrex_1_1FabArray_1a74208704b8f6fd0320efbab5b6d84c33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_recv_data</name></member>
      <member refid="classamrex_1_1FabArray_1acdbdf6b190956f4aea653b4a8668daf3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>fb_the_send_data</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1a25047280c9e632dd433580ce5a22b94e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a116f51b7211235d89f58882892a4a5fe" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FBEP_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1ae2a65f54013f600fa7dab70c171f098f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ad83cd23ca9de6bc255fab20b0e3349e0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a63f39e8a1dbd16c2a12f1f9c09f8e86d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a653f81fb7647cbb92e4996116f5f2b98" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1a7819663deb9f09aba2dfb7c2d97b8008" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArray_1ae759c94d4fb73a67bfd50cd3f385a0fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ae759c94d4fb73a67bfd50cd3f385a0fb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_finish</name></member>
      <member refid="classamrex_1_1FabArray_1ac2d0be5fcc4f1d0ca3bc90326479e6a4" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a42e0c1a45de59b4b0b3aa9179045c2da" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a5953b66baae9e84da1bfe301aeb0f584" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a35b5ac9091040a386f3c6e80ee598edb" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a9cee2171946118a9d537329dc11b73ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_nowait</name></member>
      <member refid="classamrex_1_1FabArray_1a31ac8478feaa72ab3960bb08c69b082b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FillBoundary_test</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a937cce5d85fb91c1bddad5f9f3c0adc4" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a53cf0c60964630e381fd523a72fbf267" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5c5f9aa77f5d7c4c73fafea2dc0116e" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArray_1ad1b9a4d03728ab60c756c318a1509285" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a0433ddedba4a2ca3edef4d67de25791b" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1a130d5f44fdf6cd88e7fd8838f2215e42" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArray_1af4cf22368e304ec974183c5d8307cca2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>get</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af8fc41eb806cf2a13724a31922ab1c63" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a887fcf01f365f0cd92d32fceeba8ee3a" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5b4a0572662ad2d1a9cc30f3c6d8fd73" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab8548585b1a018f9d0a85cd43a719fe8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArray_1a980279927f5a463eefb0166a28c49cf8" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>hasEBFabFactory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a78e63b7b4263787e761130e31087f501" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArray_1a54941ec8d9a3b361a06589f67dd7e202" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArray_1a617391ca5a181e748cb062d6087593c1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>invert</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adaab2aa39653ad6be0ef6bb6d6565ef9" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArray_1a70fa91146151690cba92e359609650dc" prot="private" virt="non-virtual"><scope>amrex::FabArray</scope><name>Iterator</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a865e0dd2792f99689596854979d22a75" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a46a40783e85e254841240a0a909838b0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a39c14fa53319470e0a29b6dcd3772441" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArray_1a7ecd52e23e86db0f9e8e99166900e63c" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_fabs_v</name></member>
      <member refid="classamrex_1_1FabArray_1a9172b400e374666d6100fa61ccc586db" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mfghostiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArray_1a60f56cd45cbe9dc96de858a4ecc30f5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>MFGraph</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d491dc99a1d65c8ec12506e40867ecc" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>ModifyDistributionMap</name></member>
      <member refid="classamrex_1_1FabArray_1a38af5fad82bae64dfbfe41fb3cc00900" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArray_1a86d4655bbdc53c865977d0f26b2682be" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>mult</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4e2bad9efefadebb427bf489b2d1a12" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adbca6fa8ac3f0235bd5127d2ac6b824d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a04f6b5015129a821f4795f7d6961882d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArray_1aa487ad1a422a80a53b13055e1781b1df" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1FabArray_1abfb756a609a97e842adfcb212390b506" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a0af3037790ff6d28e55abb56befa9217" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a4374433faed4724750dd8a69ad9c48aa" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual" ambiguityscope="amrex::FabArrayBase::"><scope>amrex::FabArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArray_1a1f237a18d3284534c623b18b92797a22" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a1a6f7ad66667ca6c168e0af5a63d5b7f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1a0976d6eb443856217f4ae3e707719f3f" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArray_1aa4ee40cd7ace3fb967a1f34799110609" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a826764d64c91510906e157ae2669c9fe" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArray_1ae4b12e5942706dac23a5bef3d4781740" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8a59adcce54ed5ccf48f0849458cf123" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a8e9e4a76679324f247d20d57d11293f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a89a8e2abc36a485e63a1b7976f13baf2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelAdd</name></member>
      <member refid="classamrex_1_1FabArray_1a4d5c152276e1e70438c9d7072cb7c6f0" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ac31d070f29eef2523b0af2d858b3e56d" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a3d58cf8a0ddfeba8a8b52aa73fed2113" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1a1dfd3c30997fd9821219a8e39571a4bc" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>ParallelCopy</name></member>
      <member refid="classamrex_1_1FabArray_1ad2b7b5ca00ba6bb07ce96271b2694979" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a4e8d8fc656ca1b923d149a417af78141" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>plus</name></member>
      <member refid="classamrex_1_1FabArray_1a9b59622d2c87150475a4c2e290909421" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1FabArray_1ac4df22737680f212e21caf8ec30325dd" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a28f885dfa9885870b12a5311a068cea1" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setBndry</name></member>
      <member refid="classamrex_1_1FabArray_1aac31a019f89c4ebda04285b60d16b9e5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a3f6fba8a6ebf81524378226bc99cdd73" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setDomainBndry</name></member>
      <member refid="classamrex_1_1FabArray_1a56f866d5ace5debf481ebb2770c1fdb2" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1ad120e19b398c8fdcd683fc66a2828b5a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setFab</name></member>
      <member refid="classamrex_1_1FabArray_1a3fc4027ae0c1e980eaa6c0114da3b81c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ad1d40151f09332b60c0cdee69e4b8553" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ad73b836d7dff4e326507e10afc4f2492" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ac54516e4e13521280aeec43b24b3dbf9" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1af78d31b9c5e15987476451c2371913af" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a35c362cea17bdec03e65f32757312b33" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1ae92dc047928fdb9d71ab35ec9e6a074e" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a7f6a39d04eb82b4df3ee7286cba0b529" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a7701b29609802d5798ddcef764bdbe50" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>setVal</name></member>
      <member refid="classamrex_1_1FabArray_1a487db209e402defbd460c5140ed75194" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>SharedMemory</name></member>
      <member refid="classamrex_1_1FabArray_1a1c267db3c144871fd12170f3c81d6562" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1FabArray_1abc3985ed98ddaf530bde81076c0295de" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>shmem</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aeadcc8b1b71512821a778b9c17ff92a5" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="protected" virt="non-virtual"><scope>amrex::FabArray</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a20cc17a77f504ca37faf5458eea01daf" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArray_1a2b04c30bcb209306838ed6a01bd7816a" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>value_type</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae87329fe7a046f188ea78e63047152b6" prot="public" virt="non-virtual"><scope>amrex::FabArray</scope><name>WaitForAsyncSends</name></member>
      <member refid="classamrex_1_1FabArray_1af9762647ad8ae52d39f2c51f51c06813" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d0b50241fbebae6e3d53e301cf2b23a" prot="public" virt="virtual"><scope>amrex::FabArray</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
