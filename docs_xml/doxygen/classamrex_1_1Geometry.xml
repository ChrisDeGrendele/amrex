<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Geometry" kind="class" language="C++" prot="public">
    <compoundname>amrex::Geometry</compoundname>
    <basecompoundref refid="classamrex_1_1CoordSys" prot="public" virt="non-virtual">amrex::CoordSys</basecompoundref>
    <includes refid="AMReX__Geometry_8H" local="no">AMReX_Geometry.H</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a71b0e9a24e6f2b8833a0dfe6d9fbd5ac" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::Geometry::spherical_origin_fix</definition>
        <argsstring></argsstring>
        <name>spherical_origin_fix</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="260" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1acbefa9780b6c7142a9da41fbd537ddea" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Geometry::is_periodic</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>is_periodic</name>
        <initializer>= {<ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(0,0,0)}</initializer>
        <briefdescription>
<para>0 means not periodic </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1af62cd34804aea5643a6fc2205495b7a2" prot="private" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></type>
        <definition>RealBox amrex::Geometry::prob_domain</definition>
        <argsstring></argsstring>
        <name>prob_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a52477661ac7c7ccbd93f397340176c74" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::Geometry::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Non-static data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="265" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="265" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1abe4767b2f215bc24725017610b86091d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>() noexcept</argsstring>
        <name>Geometry</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ab9cc9315f181884f554c5866cd1e68e5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Box &amp;dom, const RealBox *rb=nullptr, int coord=-1, int const *is_per=nullptr) noexcept</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int const *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Constructor taking the rectangular domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a7ba1318caf7c0f051bc33126789c4e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Box &amp;dom, const RealBox &amp;rb, int coord, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per) noexcept</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a064dbb1fe7f6866145fd4f18a50275ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::~Geometry</definition>
        <argsstring>()=default</argsstring>
        <name>~Geometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a61c7b8c8cbb3b7a39b4db6ed8eface07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Geometry &amp;rhs)=default</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a02c8a9fe2c0a14e7ca251ce48e97ee5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(Geometry &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Geometry</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1accb415f1b74fa7e10a767254c3943e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry&amp; amrex::Geometry::operator=</definition>
        <argsstring>(const Geometry &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ad798fd92507868f0ee233bc92e2b30aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry&amp; amrex::Geometry::operator=</definition>
        <argsstring>(Geometry &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abb8b8662f077d9913f0af282f32ed415" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref></type>
        <definition>GeometryData amrex::Geometry::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns non-static copy of geometry&apos;s stored data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a4161151e41e5bf35f11061708eac8bb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::define</definition>
        <argsstring>(const Box &amp;dom, const RealBox *rb=0, int coord=-1, int const *is_per=nullptr)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int const *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set the rectangular domain after using default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="69" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::Geometry::Domain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Domain</name>
        <briefdescription>
<para>Returns our rectangular domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="133" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a781c6fe9c69aab1b6955f311503888bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::Domain</definition>
        <argsstring>(const Box &amp;bx) noexcept</argsstring>
        <name>Domain</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Sets our rectangular domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a81946ca10277194607c0f77bb20292f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(MultiFab &amp;vol, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int grow) const </argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Define a multifab of areas and volumes with given grow factor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="137" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a996ccbe7c6e28e910ab1e7b4df899984" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(MultiFab &amp;vol) const </argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
<para>Fill the pre-built multifab with volume. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="178" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a6abd22b203f14b2c260a98c67d0d5ac0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(FArrayBox &amp;vol, const BoxArray &amp;grds, int idx, int grow) const </argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a5a43002aa3bc4e82382913508bf6c086" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetDLogA</definition>
        <argsstring>(MultiFab &amp;dloga, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int dir, int grow) const </argsstring>
        <name>GetDLogA</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Compute d(log(A))/dr at cell centers in given region and stuff the results into the passed <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="200" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a0e71a65d177b0502e47a4277c7cfaa4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(MultiFab &amp;area, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int dir, int grow) const </argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Compute area of cell faces in given region and stuff stuff the results into the passed <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="218" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a5cf9ff2be6e9a93db4ec61a5540752af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(MultiFab &amp;area, int dir) const </argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Fill the pre-built multifab with area. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="167" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="232" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ac2b6014beff4b28f21676e6527bea236" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(FArrayBox &amp;area, const BoxArray &amp;grds, int idx, int dir, int grow) const </argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="245" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a622746891e67a5016ae4b0c0137d70ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Geometry::period</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>period</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>What&apos;s period in specified direction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="193" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a7b365b1560bb9a31cf49cd55668085cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::Geometry::periodicity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>periodicity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="195" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a95ab5abc1e6c5d1efb9de40e0873d391" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::periodicShift</definition>
        <argsstring>(const Box &amp;target, const Box &amp;src, Vector&lt; IntVect &gt; &amp;out) const noexcept</argsstring>
        <name>periodicShift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute Array of shifts which will translate src so that it will intersect target with non-zero intersection. the array will be resized internally, so anything previously there will be gone DO NOT return non-periodic shifts, even if the box&apos;s do intersect without shifting. The logic is that you will only do this as a special case if there is some periodicity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="255" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a4535bb6797e6c53c228d598f23cc7296" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::Geometry::growNonPeriodicDomain</definition>
        <argsstring>(int ngrow) const noexcept</argsstring>
        <name>growNonPeriodicDomain</name>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with non-periodic directions grown by ngrow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="333" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abe9c676150da912017772bb39a1f0d91" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::Geometry::growPeriodicDomain</definition>
        <argsstring>(int ngrow) const noexcept</argsstring>
        <name>growPeriodicDomain</name>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with periodic directions grown by ngrow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="223" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="345" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a1d9c01b45625d9e6f8e0e4d1cdd4a5a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::coarsen</definition>
        <argsstring>(IntVect const &amp;rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="238" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a122947abb8d93a6984f26277576faad3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::refine</definition>
        <argsstring>(IntVect const &amp;rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="246" bodyend="252"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1ab591b07ca64341d2b26a617775124e91" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a2dd587e7c34bdc540c57e2fed659c3e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::Setup</definition>
        <argsstring>(const RealBox *rb=nullptr, int coord=-1, int const *is_per=nullptr)</argsstring>
        <name>Setup</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int const *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Read static values from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="111" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a24c53d5b10b1541a615d2def7430b1d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
        <definition>static const RealBox&amp; amrex::Geometry::ProbDomain</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbDomain</name>
        <briefdescription>
<para>Returns the problem domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a7a4f0ce199a9df06415e1c4b2b69331d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Geometry::ProbDomain</definition>
        <argsstring>(const RealBox &amp;rb) noexcept</argsstring>
        <name>ProbDomain</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Sets the problem domain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aaec8a36f1ad74cbc15c70b5b171c357c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>static const Real* amrex::Geometry::ProbLo</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbLo</name>
        <briefdescription>
<para>Returns the lo end of the problem domain in each dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aaa2bef9116ba519f296a09859dfb0384" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>static const Real* amrex::Geometry::ProbHi</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbHi</name>
        <briefdescription>
<para>Returns the hi end of the problem domain in each dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a494aa31611ca8a41eb0b9766171da79b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::Geometry::ProbLo</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>ProbLo</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the lo end of the problem domain in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abdfb79bf4739c35c984525ef20aa741c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::Geometry::ProbHi</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>ProbHi</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the hi end of the problem domain in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a0023a2a0fa6ea29195322fdc3c914c14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>static GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::Geometry::ProbLoArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbLoArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a6595fda0863494aa6e573c777cfbb00c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>static GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::Geometry::ProbHiArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbHiArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="121" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a1920ee8c1b84b912b518e9f58512a368" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::Geometry::ProbSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>ProbSize</name>
        <briefdescription>
<para>Returns the overall size of the domain by multiplying the ProbLength&apos;s together. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a121326d85acc5a28224456c5c6e396f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::Geometry::ProbLength</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>ProbLength</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of problem domain in specified dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ae3e971c140b0cedf8da25cf2b5b01c91" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::Geometry::isPeriodic</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>isPeriodic</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Is the domain periodic in the specified direction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ab5bef13bf31a09c8652f7a9700738a7a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::Geometry::isAnyPeriodic</definition>
        <argsstring>() noexcept</argsstring>
        <name>isAnyPeriodic</name>
        <briefdescription>
<para>Is domain periodic in any direction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a74e5185837937c300f7dc10fb9272d06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::Geometry::isAllPeriodic</definition>
        <argsstring>() noexcept</argsstring>
        <name>isAllPeriodic</name>
        <briefdescription>
<para>Is domain periodic in all directions? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="183" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a3fbce4fdfa6d3952408c9017d482acbf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, AMREX_SPACEDIM &gt;</type>
        <definition>static GpuArray&lt;int,AMREX_SPACEDIM&gt; amrex::Geometry::isPeriodicArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>isPeriodicArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ac171b26efe9e7c4635e567ebf0ff980d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>static Periodicity amrex::Geometry::periodicity</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>periodicity</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="201" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="201" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a6295f58c5532b861a106788eb07cf4da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; bool, AMREX_SPACEDIM &gt;</type>
        <definition>static Array&lt;bool,AMREX_SPACEDIM&gt; amrex::Geometry::setPeriodicity</definition>
        <argsstring>(Array&lt; bool, AMREX_SPACEDIM &gt; const &amp;period) noexcept</argsstring>
        <name>setPeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; bool, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set periodicity flags and return the old flags. Note that, unlike <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> class, the flags are just boolean. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="228" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa0385aea8391d0b59b6adfb910cffbf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::read_params</definition>
        <argsstring>()</argsstring>
        <name>read_params</name>
        <briefdescription>
<para>Helper functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="256" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2917">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
      </node>
      <node id="2916">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="2917" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2923">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="2923" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="2920">
        <label>Real</label>
      </node>
      <node id="2921">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="2920" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="2922">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="2923" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="2924" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="2919">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="2920" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="2924">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="2918">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="2919" relation="public-inheritance">
        </childnode>
        <childnode refid="2921" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="2922" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.H" bodystart="67" bodyend="266"/>
    <listofallmembers>
      <member refid="classamrex_1_1CoordSys_1a7de7d489e53654914daf590cc820fd60" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>AreaHi</name></member>
      <member refid="classamrex_1_1CoordSys_1aef00cc43234b7a33f92f246bbea6edac" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>AreaLo</name></member>
      <member refid="classamrex_1_1CoordSys_1a7d23e22bdc876c2b6f832f29f7b48c35" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>c_sys</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>cartesian</name></member>
      <member refid="classamrex_1_1CoordSys_1a5c2b7698e44ce750730b8246fc1aa992" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a20d11f9a4a56cc4abbbc63520b1a5e7f" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1aa88777a3be31a577cf01ed63a806f94b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a285d110b44d2e4412b27427418246fa4" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1ade9815d7413549b5bb09000f1c9ede76" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1afc9b2295dec506f60239afca5e6a4a5d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1aa352d079ec1fb2e0c971e8f5a6b077da" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSizeArray</name></member>
      <member refid="classamrex_1_1Geometry_1a1d9c01b45625d9e6f8e0e4d1cdd4a5a6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1CoordSys_1a366ed37f0633dd80c0671fa8b866fe69" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Coord</name></member>
      <member refid="classamrex_1_1CoordSys_1a666a93ffdb9a8a7440b07d5b563d33b1" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordInt</name></member>
      <member refid="classamrex_1_1CoordSys_1a2050a523bf85efe20fef4ef62db4a8d6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordSys</name></member>
      <member refid="classamrex_1_1CoordSys_1a416d64647d1553fbf387cb7f44fab4f9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordSys</name></member>
      <member refid="classamrex_1_1CoordSys_1a6026e660cc195d06cf966e3ad09c2cc9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordSys</name></member>
      <member refid="classamrex_1_1CoordSys_1acde5af02e950f7de8d64044e3c378342" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordSys</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordType</name></member>
      <member refid="classamrex_1_1Geometry_1abb8b8662f077d9913f0af282f32ed415" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>data</name></member>
      <member refid="classamrex_1_1Geometry_1a4161151e41e5bf35f11061708eac8bb6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>define</name></member>
      <member refid="classamrex_1_1CoordSys_1a48ffc9604867e10ae012228873c944d4" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>define</name></member>
      <member refid="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Domain</name></member>
      <member refid="classamrex_1_1Geometry_1a781c6fe9c69aab1b6955f311503888bc" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Domain</name></member>
      <member refid="classamrex_1_1Geometry_1a52477661ac7c7ccbd93f397340176c74" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>domain</name></member>
      <member refid="classamrex_1_1CoordSys_1a178c38de0cae8e587e4c34541db7f45b" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>dx</name></member>
      <member refid="classamrex_1_1Geometry_1ab591b07ca64341d2b26a617775124e91" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1Geometry_1abe4767b2f215bc24725017610b86091d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1ab9cc9315f181884f554c5866cd1e68e5" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a7ba1318caf7c0f051bc33126789c4e94" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a61c7b8c8cbb3b7a39b4db6ed8eface07" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a02c8a9fe2c0a14e7ca251ce48e97ee5b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1CoordSys_1a4826233fc01d64e54c79e5efc681cdc7" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetCellLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1a5b4f25568384aadd06b027071caf4afa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetCellVolCoord</name></member>
      <member refid="classamrex_1_1Geometry_1a5a43002aa3bc4e82382913508bf6c086" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1ab10ebd157943128ed09f04fb5bb4ca1d" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1a1e01ad041a58bbcf3787a7110aff29b1" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1a26a42d74f648516769b87bbb5d6730ed" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetEdgeLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1ab67f7c1a3a7ceedff602c800d8279a17" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetEdgeVolCoord</name></member>
      <member refid="classamrex_1_1Geometry_1a0e71a65d177b0502e47a4277c7cfaa4e" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1a5cf9ff2be6e9a93db4ec61a5540752af" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1ac2b6014beff4b28f21676e6527bea236" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1acf7a0320a6ee296a68ff9db371667931" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1aaa25660d494efd0ed6ff7ad0f3edc59f" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1a81946ca10277194607c0f77bb20292f9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1a996ccbe7c6e28e910ab1e7b4df899984" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1a6abd22b203f14b2c260a98c67d0d5ac0" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1a237a3bec32b9ac52c318e0017d6a0356" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1aa8c98e55f1e8c9befed53dc7daf811bc" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1a4535bb6797e6c53c228d598f23cc7296" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growNonPeriodicDomain</name></member>
      <member refid="classamrex_1_1Geometry_1abe9c676150da912017772bb39a1f0d91" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growPeriodicDomain</name></member>
      <member refid="classamrex_1_1CoordSys_1a9ec92efce51bbde30e91c69673b080cf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a67a1ad822f7d6fac4907e3d37ab8953d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a8c5e075f96416bf7b2b62f2b049c8066" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a99d299808c6a8314a3e2064894d0a03a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a6900764dc4dfae368296b0caf5548999" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a450803429d6c54bdfaeacaadeace5cb3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a09a58ce8c24e2ad549c98754fd2adaeb" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>inv_dx</name></member>
      <member refid="classamrex_1_1CoordSys_1ad195c96d818c1331428e90a727745304" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1a3a9c67df49c93b825ac5378f5411b9da" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1ad30ea5aed12689007843a59201563409" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSizeArray</name></member>
      <member refid="classamrex_1_1Geometry_1acbefa9780b6c7142a9da41fbd537ddea" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>is_periodic</name></member>
      <member refid="classamrex_1_1Geometry_1a74e5185837937c300f7dc10fb9272d06" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isAllPeriodic</name></member>
      <member refid="classamrex_1_1Geometry_1ab5bef13bf31a09c8652f7a9700738a7a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isAnyPeriodic</name></member>
      <member refid="classamrex_1_1CoordSys_1a2354ee363f6e9415a1c2b188693e525c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsCartesian</name></member>
      <member refid="classamrex_1_1Geometry_1ae3e971c140b0cedf8da25cf2b5b01c91" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isPeriodic</name></member>
      <member refid="classamrex_1_1Geometry_1a3fbce4fdfa6d3952408c9017d482acbf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isPeriodicArray</name></member>
      <member refid="classamrex_1_1CoordSys_1a9b6b1b87e8deb8263262e3cc44d58673" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsRZ</name></member>
      <member refid="classamrex_1_1CoordSys_1ac9b72e3e1d2a0507ae2a021f398f32c5" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsSPHERICAL</name></member>
      <member refid="classamrex_1_1CoordSys_1aad8c159e97f7422f2bf45b92bf3a3002" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a6f6cad7c903feeb070e26cea3df1af5c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1abbaf6097689bdafcce5853d0a74c8a73" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1ae177792027908beb20976fbd0628d754" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a2b1eed19248c0b8ffc16733bbf1d6baa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a0f2dc8592daa645225f6fbb76c7061c7" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1aedba9cb3e81e6a96fd3cea8330ef0708" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LowerIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1ac98571898c246591a5ae1dfd30d72829" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>offset</name></member>
      <member refid="classamrex_1_1CoordSys_1a662de2a6317230d1b3ec0f55200f0c4d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1a70347031fc6cda6ec52b67a4b663ca5b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1abee8e858b3ca22a33388275e0a2cfcbf" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>ok</name></member>
      <member refid="classamrex_1_1Geometry_1accb415f1b74fa7e10a767254c3943e6a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Geometry_1ad798fd92507868f0ee233bc92e2b30aa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1CoordSys_1a12bcf6eec38424a7f71387215d1ea4a8" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1CoordSys_1ab4ede9ab39bfb6f6445e6eb71ba686a9" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Geometry_1a622746891e67a5016ae4b0c0137d70ce" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>period</name></member>
      <member refid="classamrex_1_1Geometry_1a7b365b1560bb9a31cf49cd55668085cf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicity</name></member>
      <member refid="classamrex_1_1Geometry_1ac171b26efe9e7c4635e567ebf0ff980d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicity</name></member>
      <member refid="classamrex_1_1Geometry_1a95ab5abc1e6c5d1efb9de40e0873d391" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicShift</name></member>
      <member refid="classamrex_1_1Geometry_1af62cd34804aea5643a6fc2205495b7a2" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>prob_domain</name></member>
      <member refid="classamrex_1_1Geometry_1a24c53d5b10b1541a615d2def7430b1d3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbDomain</name></member>
      <member refid="classamrex_1_1Geometry_1a7a4f0ce199a9df06415e1c4b2b69331d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbDomain</name></member>
      <member refid="classamrex_1_1Geometry_1aaa2bef9116ba519f296a09859dfb0384" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHi</name></member>
      <member refid="classamrex_1_1Geometry_1abdfb79bf4739c35c984525ef20aa741c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHi</name></member>
      <member refid="classamrex_1_1Geometry_1a6595fda0863494aa6e573c777cfbb00c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHiArray</name></member>
      <member refid="classamrex_1_1Geometry_1a121326d85acc5a28224456c5c6e396f4" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLength</name></member>
      <member refid="classamrex_1_1Geometry_1aaec8a36f1ad74cbc15c70b5b171c357c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLo</name></member>
      <member refid="classamrex_1_1Geometry_1a494aa31611ca8a41eb0b9766171da79b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLo</name></member>
      <member refid="classamrex_1_1Geometry_1a0023a2a0fa6ea29195322fdc3c914c14" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLoArray</name></member>
      <member refid="classamrex_1_1Geometry_1a1920ee8c1b84b912b518e9f58512a368" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbSize</name></member>
      <member refid="classamrex_1_1Geometry_1aa0385aea8391d0b59b6adfb910cffbf4" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>read_params</name></member>
      <member refid="classamrex_1_1Geometry_1a122947abb8d93a6984f26277576faad3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>refine</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>RZ</name></member>
      <member refid="classamrex_1_1CoordSys_1ad89efc543fd9a402a861439dfb3ed625" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetCoord</name></member>
      <member refid="classamrex_1_1CoordSys_1a8538a8117cf9e6db134eee5196c0b970" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1addd25ef6595e734e8c05f880387852ff" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1ade4395049efa81ffa1edc6244ae0ac20" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetOffset</name></member>
      <member refid="classamrex_1_1Geometry_1a6295f58c5532b861a106788eb07cf4da" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>setPeriodicity</name></member>
      <member refid="classamrex_1_1Geometry_1a2dd587e7c34bdc540c57e2fed659c3e2" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Setup</name></member>
      <member refid="classamrex_1_1CoordSys_1afe2abbcf933db2ec20289e47454323b2" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SPHERICAL</name></member>
      <member refid="classamrex_1_1Geometry_1a71b0e9a24e6f2b8833a0dfe6d9fbd5ac" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>spherical_origin_fix</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa2debcd8f37986ae0e3c488f583234ccc" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>undef</name></member>
      <member refid="classamrex_1_1CoordSys_1a74cecde9e2041a58b0d9b81b8ed00c22" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>UpperIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1aad6b67f8c4aa070b4099d77aa0155368" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Volume</name></member>
      <member refid="classamrex_1_1CoordSys_1aeb0f186559f5184778243d196fb71541" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Volume</name></member>
      <member refid="classamrex_1_1CoordSys_1a1d7e80f93fece05cfe429c16f36f9e9f" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>~CoordSys</name></member>
      <member refid="classamrex_1_1Geometry_1a064dbb1fe7f6866145fd4f18a50275ff" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>~Geometry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
