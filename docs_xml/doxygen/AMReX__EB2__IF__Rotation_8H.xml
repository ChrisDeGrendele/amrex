<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__EB2__IF__Rotation_8H" kind="file" language="C++">
    <compoundname>AMReX_EB2_IF_Rotation.H</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">cmath</includes>
    <includedby refid="AMReX__EB2__IF_8H" local="no">/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF.H</includedby>
    <incdepgraph>
      <node id="34613">
        <label>functional</label>
      </node>
      <node id="34609">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="34607" relation="include">
        </childnode>
        <childnode refid="34610" relation="include">
        </childnode>
        <childnode refid="34611" relation="include">
        </childnode>
        <childnode refid="34606" relation="include">
        </childnode>
        <childnode refid="34613" relation="include">
        </childnode>
        <childnode refid="34614" relation="include">
        </childnode>
        <childnode refid="34615" relation="include">
        </childnode>
      </node>
      <node id="34620">
        <label>cmath</label>
      </node>
      <node id="34612">
        <label>stdexcept</label>
      </node>
      <node id="34614">
        <label>string</label>
      </node>
      <node id="34602">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="34603" relation="include">
        </childnode>
        <childnode refid="34604" relation="include">
        </childnode>
        <childnode refid="34605" relation="include">
        </childnode>
        <childnode refid="34606" relation="include">
        </childnode>
        <childnode refid="34607" relation="include">
        </childnode>
        <childnode refid="34608" relation="include">
        </childnode>
        <childnode refid="34616" relation="include">
        </childnode>
        <childnode refid="34617" relation="include">
        </childnode>
      </node>
      <node id="34616">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="34601">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Rotation.H</label>
        <link refid="AMReX_EB2_IF_Rotation.H"/>
        <childnode refid="34602" relation="include">
        </childnode>
        <childnode refid="34619" relation="include">
        </childnode>
        <childnode refid="34620" relation="include">
        </childnode>
      </node>
      <node id="34618">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="34615">
        <label>cstdio</label>
      </node>
      <node id="34608">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="34609" relation="include">
        </childnode>
      </node>
      <node id="34607">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="34605">
        <label>utility</label>
      </node>
      <node id="34603">
        <label>array</label>
      </node>
      <node id="34611">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="34612" relation="include">
        </childnode>
      </node>
      <node id="34606">
        <label>iostream</label>
      </node>
      <node id="34619">
        <label>type_traits</label>
      </node>
      <node id="34610">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="34604">
        <label>memory</label>
      </node>
      <node id="34617">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="34618" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34622">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF.H</label>
        <link refid="AMReX__EB2__IF_8H"/>
      </node>
      <node id="34621">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Rotation.H</label>
        <link refid="AMReX_EB2_IF_Rotation.H"/>
        <childnode refid="34622" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classamrex_1_1EB2_1_1RotationIF" prot="public">amrex::EB2::RotationIF</innerclass>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2">amrex::EB2</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_EB2_IF_ROTATION_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_EB2_IF_ROTATION_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Array_8H" kindref="compound">AMReX_Array.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>all<sp/>implicit<sp/>functions,<sp/>&gt;0:<sp/>body;<sp/>=0:<sp/>boundary;<sp/>&lt;0:<sp/>fluid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">EB2<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="13" refid="classamrex_1_1EB2_1_1RotationIF" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classamrex_1_1EB2_1_1RotationIF_1a38b4122239564f65c1be56adc2aa7076" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a38b4122239564f65c1be56adc2aa7076" kindref="member">RotationIF</ref><sp/>(F&amp;&amp;<sp/>a_f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real&amp;<sp/>angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>(std::move(a_f)),<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>(angle),<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" kindref="member">m_dir</ref>(dir)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="20" refid="classamrex_1_1EB2_1_1RotationIF_1aad804468bf2cc3403ea71f209c19e374" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1aad804468bf2cc3403ea71f209c19e374" kindref="member">RotationIF</ref><sp/>(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a_f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real&amp;<sp/>angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>(a_f),<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>(angle),<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" kindref="member">m_dir</ref>(dir)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classamrex_1_1EB2_1_1RotationIF_1abc8caa41e51f94ae95526ef52d334bd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abc8caa41e51f94ae95526ef52d334bd2" kindref="member">~RotationIF</ref><sp/>()<sp/>{}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a38b4122239564f65c1be56adc2aa7076" kindref="member">RotationIF</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a38b4122239564f65c1be56adc2aa7076" kindref="member">RotationIF</ref><sp/>(<ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1af238f5cf54c7ae1b0806dbe0ad69f7e6" kindref="member">operator= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1af238f5cf54c7ae1b0806dbe0ad69f7e6" kindref="member">operator= </ref>(<ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF</ref>&amp;&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>angle<sp/>is<sp/>measured<sp/>in<sp/>radians<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(AMREX_SPACEDIM==2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="34"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>x<sp/>=<sp/><sp/>p[0]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[1]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>y<sp/>=<sp/>-p[0]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[1]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>({x,<sp/>y});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(AMREX_SPACEDIM==3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="44"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" kindref="member">m_dir</ref>==0){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>y<sp/>=<sp/><sp/>p[1]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[2]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>z<sp/>=<sp/>-p[1]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[2]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>({p[0],<sp/>y,<sp/>z});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" kindref="member">m_dir</ref>==1){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>x<sp/>=<sp/>p[0]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>-<sp/>p[2]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>z<sp/>=<sp/>p[0]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[2]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>({x,<sp/>p[1],<sp/>z});</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>if(m_dir==2){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>x<sp/>=<sp/><sp/>p[0]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[1]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>y<sp/>=<sp/>-p[0]*std::sin(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>)<sp/>+<sp/>p[1]*std::cos(<ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>);<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>({x,<sp/>y,<sp/>p[2]});</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1abdaf7ef0894bbc027482f233e7fadf74" kindref="member">m_f</ref>;</highlight></codeline>
<codeline lineno="66" refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a42f07b400efdbc4fe57de5b9821f8e69" kindref="member">m_angle</ref>;<sp/></highlight></codeline>
<codeline lineno="67" refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF_1a2e57f52a7f9f0b9b64c98c2c0cb48fed" kindref="member">m_dir</ref>;<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">constexpr<sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF&lt;typename std::decay&lt;F&gt;::type</ref>&gt;</highlight></codeline>
<codeline lineno="72" refid="namespaceamrex_1_1EB2_1a69c7df6cdc64e6980f1640f9ccf70155" refkind="member"><highlight class="normal"><ref refid="namespaceamrex_1_1EB2_1a69c7df6cdc64e6980f1640f9ccf70155" kindref="member">rotate</ref><sp/>(F&amp;&amp;f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real&amp;<sp/>angle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1EB2_1_1RotationIF" kindref="compound">RotationIF&lt;typename std::decay&lt;F&gt;::type</ref>&gt;(std::forward&lt;F&gt;(f),angle,<sp/>dir);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Rotation.H"/>
  </compounddef>
</doxygen>
