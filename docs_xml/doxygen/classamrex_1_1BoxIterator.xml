<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1BoxIterator" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxIterator</compoundname>
    <includes refid="AMReX__BoxIterator_8H" local="no">AMReX_BoxIterator.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1a84175ad1f780ae9de83dc5f4c71b67e0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_current</definition>
        <argsstring></argsstring>
        <name>m_current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1ac7faa53e27c1da649d1ce401be5edd8d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_boxLo</definition>
        <argsstring></argsstring>
        <name>m_boxLo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxIterator_1a28bfb4eb34ce4273b9948f0c3e2451a4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxIterator::m_boxHi</definition>
        <argsstring></argsstring>
        <name>m_boxHi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a4c5797082dab247b4da4e8d159f352f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>()</argsstring>
        <name>BoxIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. This constructs an invalid iterator. The user must call define before using. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="117" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a37f7497897bcfe7f694706c07fa0d700" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>(const Box &amp;a_bx)</argsstring>
        <name>BoxIterator</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> and associates it with a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. Arguments: a_bx (not modified) the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to iterate over. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1aab07aba14a059dd26f7042d8e51aec6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::setBox</definition>
        <argsstring>(const Box &amp;a_bx)</argsstring>
        <name>setBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a03883564ef32239b307db10d07761184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::define</definition>
        <argsstring>(const Box &amp;a_bx)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>a_bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Associates a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>. Arguments: a_bx (not modified) the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to iterate over. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.cpp" bodystart="5" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a5fd2c354c4d191b871991e9f0fc4ba95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::BoxIterator</definition>
        <argsstring>(const BoxIterator &amp;a_iterIn)</argsstring>
        <name>BoxIterator</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> &amp;</type>
          <declname>a_iterIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor. Arguments: a_iterIn (not modified) the <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1aad3066fecf437d5d90a950b9302beeba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIterator::~BoxIterator</definition>
        <argsstring>()</argsstring>
        <name>~BoxIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1abf7c97e0b52525680b510c68423e64f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to the first <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;first&quot; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a5ee385a79f4c335cd9d03370f27fd2d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to the first <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;first&quot; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1aa086b1849a6f321208c70e9f21cd22d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> to set it to the next location in its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The definition of the &quot;next location&quot; of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is implementation-dependent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a0af2027c59bd243474130121a263abf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxIterator::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="157" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a1166bb1b1d48bf7967019db9e530397f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::BoxIterator::operator()</definition>
        <argsstring>() const </argsstring>
        <name>operator()</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value of the InVect for the current location of this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="177" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxIterator_1a1bad2f0f0afb36e5631efb83081964f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxIterator::ok</definition>
        <argsstring>()</argsstring>
        <name>ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref>&apos;s location is within its <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="108" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="185" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>iterates through the IntVects of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> iterates through the IntVects of a box. The actual sqeuence of IntVects is implementation-specific. Typical usage:</para><para><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b; ... <ref refid="classamrex_1_1BoxIterator" kindref="compound">BoxIterator</ref> bit (b); for (<ref refid="namespaceamrex_1ac45a22a20dc106418cb6f2968bc3dcad" kindref="member">bit.begin()</ref>; bit.ok(); ++bit) { <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> iv = bit(); (do operations involving iv) } </para>    </detaileddescription>
    <collaborationgraph>
      <node id="811">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="811" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="810">
        <label>amrex::BoxIterator</label>
        <link refid="classamrex_1_1BoxIterator"/>
        <childnode refid="811" relation="usage">
          <edgelabel>m_current</edgelabel>
          <edgelabel>m_boxLo</edgelabel>
          <edgelabel>m_boxHi</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxIterator.H" bodystart="30" bodyend="114"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxIterator_1abf7c97e0b52525680b510c68423e64f5" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>begin</name></member>
      <member refid="classamrex_1_1BoxIterator_1a4c5797082dab247b4da4e8d159f352f2" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1a37f7497897bcfe7f694706c07fa0d700" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1a5fd2c354c4d191b871991e9f0fc4ba95" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>BoxIterator</name></member>
      <member refid="classamrex_1_1BoxIterator_1a03883564ef32239b307db10d07761184" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxIterator_1a28bfb4eb34ce4273b9948f0c3e2451a4" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_boxHi</name></member>
      <member refid="classamrex_1_1BoxIterator_1ac7faa53e27c1da649d1ce401be5edd8d" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_boxLo</name></member>
      <member refid="classamrex_1_1BoxIterator_1a84175ad1f780ae9de83dc5f4c71b67e0" prot="protected" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>m_current</name></member>
      <member refid="classamrex_1_1BoxIterator_1a0af2027c59bd243474130121a263abf3" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>next</name></member>
      <member refid="classamrex_1_1BoxIterator_1a1bad2f0f0afb36e5631efb83081964f1" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxIterator_1a1166bb1b1d48bf7967019db9e530397f" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BoxIterator_1aa086b1849a6f321208c70e9f21cd22d0" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>operator++</name></member>
      <member refid="classamrex_1_1BoxIterator_1a5ee385a79f4c335cd9d03370f27fd2d9" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>reset</name></member>
      <member refid="classamrex_1_1BoxIterator_1aab07aba14a059dd26f7042d8e51aec6f" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>setBox</name></member>
      <member refid="classamrex_1_1BoxIterator_1aad3066fecf437d5d90a950b9302beeba" prot="public" virt="non-virtual"><scope>amrex::BoxIterator</scope><name>~BoxIterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
