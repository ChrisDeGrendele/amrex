<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1AmrCore" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::AmrCore</compoundname>
    <basecompoundref refid="classamrex_1_1AmrMesh" prot="public" virt="non-virtual">amrex::AmrMesh</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1Amr" prot="public" virt="non-virtual">amrex::Amr</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LSCoreBase" prot="public" virt="non-virtual">amrex::LSCoreBase</derivedcompoundref>
    <includes refid="AMReX__AmrCore_8H" local="no">AMReX_AmrCore.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrCore_1a7e2ab7cbc55436aa985751b80246668f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrCore::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a30f4c446e360d02875146f91f942012c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrCore::AmrCore</definition>
        <argsstring>()</argsstring>
        <name>AmrCore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a74e9fe38553721adb969a72f111925b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrCore::AmrCore</definition>
        <argsstring>(const RealBox *rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord=-1)</argsstring>
        <name>AmrCore</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1ac0a84aa89a7db1e9543096d9c9f50a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrCore::AmrCore</definition>
        <argsstring>(const AmrCore &amp;rhs)=delete</argsstring>
        <name>AmrCore</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1acf424d1fa598d256d7285e7fc6f20a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> &amp;</type>
        <definition>AmrCore&amp; amrex::AmrCore::operator=</definition>
        <argsstring>(const AmrCore &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1aa826ec39007a18c0002a14d9a53863af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::AmrCore::~AmrCore</definition>
        <argsstring>()</argsstring>
        <name>~AmrCore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::InitFromScratch</definition>
        <argsstring>(Real time)</argsstring>
        <name>InitFromScratch</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Initialize <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> and data from scratch. Calling this function requires the derive class implement its own MakeNewLevelFromScratch to allocate and intialize data. Also note usually one needs to average the fine data down to coarse level after this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1ae80fa713b669de0f235d3ef0792e7200" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::regrid</definition>
        <argsstring>(int lbase, Real time, bool initial=false)</argsstring>
        <name>regrid</name>
        <reimplementedby refid="classamrex_1_1Amr_1a9d6faadd0aabf54081fe9ea12be10484">regrid</reimplementedby>
        <param>
          <type>int</type>
          <declname>lbase</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>initial</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Rebuild levels finer than lbase. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="74" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1ab4632b88f2c4ee953cf62f74db4a903d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::printGridSummary</definition>
        <argsstring>(std::ostream &amp;os, int min_lev, int max_lev) const </argsstring>
        <name>printGridSummary</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="114" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a6d0ad082c14a735202e4e6fa2e65b5d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrCore::Verbose</definition>
        <argsstring>() const </argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" bodystart="56" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a4595fb6af7383f209eedaefc606020e7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1af63658d7f3eaf4c233404dc6b10fae13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AmrCore_1aa0f5dabb31da45d02a320a11caa96875" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrCore::ErrorEst</definition>
        <argsstring>(int lev, TagBoxArray &amp;tags, Real time, int ngrow) override=0</argsstring>
        <name>ErrorEst</name>
        <reimplements refid="classamrex_1_1AmrMesh_1a12f861395ddfa08181bebf191733b3e7">ErrorEst</reimplements>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aff7378920896f28c99d297fcd5e27bf2">ErrorEst</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1a80b107efe79904f079c92600156e523d">ErrorEst</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Tag cells for refinement. <ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> tags is built on level lev grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1af037642d569d83cfe2ca14de640a4d28" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrCore::MakeNewLevelFromScratch</definition>
        <argsstring>(int lev, Real time, const BoxArray &amp;ba, const DistributionMapping &amp;dm) override=0</argsstring>
        <name>MakeNewLevelFromScratch</name>
        <reimplements refid="classamrex_1_1AmrMesh_1a0c2b59ddec7e4f8b4d2fbbdb44cf0e3d">MakeNewLevelFromScratch</reimplements>
        <reimplementedby refid="classamrex_1_1LSCore_1aef08d0e705a4320bd5b9929bc02b1690">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aa7bc5e980ea04512e48b2c04fa1f3105">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1aeb8d43eac6a57205c148ed7736339bcc">MakeNewLevelFromScratch</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a new level from scratch using provided <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Only used during initialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1af472acf05bea1145b67f7022de16a664" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrCore::MakeNewLevelFromCoarse</definition>
        <argsstring>(int lev, Real time, const BoxArray &amp;ba, const DistributionMapping &amp;dm)=0</argsstring>
        <name>MakeNewLevelFromCoarse</name>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1a574e843e2855d44d8ee72fb55d8965ba">MakeNewLevelFromCoarse</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1a14f51708a879d774d18347574d8e5174">MakeNewLevelFromCoarse</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
<para>Make a new level using provided <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> and fill with interpolated coarse level data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a89b690a6f834d76bf96f8f1facc356c4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrCore::RemakeLevel</definition>
        <argsstring>(int lev, Real time, const BoxArray &amp;ba, const DistributionMapping &amp;dm)=0</argsstring>
        <name>RemakeLevel</name>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aaa70d8f11811c1a64cf57e147344a914">RemakeLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1abdb782c7a31d2053bed5e595105e695d">RemakeLevel</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
<para>Remake an existing level using provided <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> and fill with existing fine and coarse data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrCore_1a26c39ed62cd9f3383f3936f1fcdb65b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrCore::ClearLevel</definition>
        <argsstring>(int lev)=0</argsstring>
        <name>ClearLevel</name>
        <reimplementedby refid="classamrex_1_1LSCore_1adbe3f83c44927912f413aff8c03c3671">ClearLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aabe20a1818e92d5a4e976a07be8fec4e">ClearLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1aa6eb6fb4a1f7526f03d3e87bc8d8f240">ClearLevel</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Delete level data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="74" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1AmrCore_1af614cfbec1f40953a32b0786d25f5f6f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrCore::InitAmrCore</definition>
        <argsstring>()</argsstring>
        <name>InitAmrCore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.cpp" bodystart="56" bodyend="65"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provide basic functionalities to set up an AMR hierarchy. </para>    </briefdescription>
    <detaileddescription>
<para>Because it does not own any floating point data, <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> used virtual functions to allocate, initialize and delete data. It also requires the derived class to tag cells for refinement. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="226">
        <label>amrex::LSCoreBase</label>
        <link refid="classamrex_1_1LSCoreBase"/>
        <childnode refid="223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="223">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="224" relation="public-inheritance">
        </childnode>
      </node>
      <node id="225">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="224">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
      </node>
      <node id="227">
        <label>amrex::LSCore&lt; F &gt;</label>
        <link refid="classamrex_1_1LSCore"/>
        <childnode refid="226" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="235">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="240">
        <label>Real</label>
      </node>
      <node id="239">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="228">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="229" relation="public-inheritance">
        </childnode>
      </node>
      <node id="230">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="231" relation="public-inheritance">
        </childnode>
      </node>
      <node id="232">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="234">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="235" relation="public-inheritance">
        </childnode>
      </node>
      <node id="231">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="236">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="233">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="237">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="238">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="239" relation="public-inheritance">
        </childnode>
      </node>
      <node id="229">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="230" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="232" relation="usage">
          <edgelabel>n_error_buf</edgelabel>
        </childnode>
        <childnode refid="234" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
        <childnode refid="236" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="238" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="240" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrCore.H" bodystart="23" bodyend="84"/>
    <listofallmembers>
      <member refid="classamrex_1_1AmrCore_1a30f4c446e360d02875146f91f942012c" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1a74e9fe38553721adb969a72f111925b8" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1ac0a84aa89a7db1e9543096d9c9f50a65" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrCore</name></member>
      <member refid="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a13509f5a978e31215ea7e48c5c3803f8" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1acdbddd33ae38b3d038fcaa14ce05e039" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>blocking_factor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2d3e04e87d90cf8d088aa27e6ee9098b" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>blockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d6a6c8a9b9ef9c9d8bce0699f3be93e" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a54cca3df5cf5c60c9405e5d1cd4c4f8f" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d2f6e5a9f3f46c76d44215f83455475" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>check_input</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9274bfc294d53126644ed437ac83fe56" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>checkInput</name></member>
      <member refid="classamrex_1_1AmrMesh_1a29bca4cd9fb61c896130db020528e56f" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>ChopGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a24e965c9a584a412abceac81a5b65f47" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>ClearBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa8db6878bddff314cc4df64fe7b12825" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>ClearDistributionMap</name></member>
      <member refid="classamrex_1_1AmrCore_1a26c39ed62cd9f3383f3936f1fcdb65b3" prot="protected" virt="pure-virtual"><scope>amrex::AmrCore</scope><name>ClearLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3e7aff8507b10562f5054396e711aa2f" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>CountCells</name></member>
      <member refid="classamrex_1_1AmrMesh_1a53988099dc97d12785e8fd8a7652d0d2" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0e239204ca8c8cf3d581fda8b3366252" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>dmap</name></member>
      <member refid="classamrex_1_1AmrCore_1aa0f5dabb31da45d02a320a11caa96875" prot="protected" virt="pure-virtual"><scope>amrex::AmrCore</scope><name>ErrorEst</name></member>
      <member refid="classamrex_1_1AmrCore_1af63658d7f3eaf4c233404dc6b10fae13" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>finest_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac902a82d3d86fe6272a14455533794c7" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aaeb239304f0f2f1fe5e3fa5d3abc1a9b" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a295b5e008a877007c0cc9c9b0fa4fc0b" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1aaffe8a1a71800d6bdf2867b28a261348" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab522170762d0d76e7c79aefe0d14e37a" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9650ac46b08412a6d487deee85930294" prot="public" virt="virtual"><scope>amrex::AmrCore</scope><name>GetAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae75a2551575e5fd697ab4dc8754541ad" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>grid_eff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2c08ef5c6a3bd4da664288e1f7fa1759" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>gridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>grids</name></member>
      <member refid="classamrex_1_1AmrCore_1af614cfbec1f40953a32b0786d25f5f6f" prot="private" virt="non-virtual"><scope>amrex::AmrCore</scope><name>InitAmrCore</name></member>
      <member refid="classamrex_1_1AmrCore_1a309a4bad63faba98cfc57641e274413d" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>InitFromScratch</name></member>
      <member refid="classamrex_1_1AmrCore_1a4595fb6af7383f209eedaefc606020e7" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad47540768ade1598333374d48d3b9593" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>iterate_on_new_grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a224e25326b0df70be8488f5b7e6a349f" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>LevelDefined</name></member>
      <member refid="classamrex_1_1AmrMesh_1a962d1689c8b7444f4b2c8a077d3f4766" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>MakeBaseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrCore_1af472acf05bea1145b67f7022de16a664" prot="protected" virt="pure-virtual"><scope>amrex::AmrCore</scope><name>MakeNewLevelFromCoarse</name></member>
      <member refid="classamrex_1_1AmrCore_1af037642d569d83cfe2ca14de640a4d28" prot="protected" virt="pure-virtual"><scope>amrex::AmrCore</scope><name>MakeNewLevelFromScratch</name></member>
      <member refid="classamrex_1_1AmrMesh_1a5830766b42f260b125443b90f40b0a96" prot="public" virt="virtual"><scope>amrex::AmrCore</scope><name>ManualTagsPlacement</name></member>
      <member refid="classamrex_1_1AmrMesh_1a716b7e6169d4d0a537970445941e7391" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>max_grid_size</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac488c17bc512ae46995817401dc7a8e7" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>max_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab955b0c5a36cd0989a248b265124e5fc" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>maxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1aea00f147dbeb1bde2760a0fa24286bd9" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9585220bf789c9401b6c056ff3b143b1" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>MaxRefRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad8752d2dfe5714cdecef8fa9eddb1c7e" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>n_error_buf</name></member>
      <member refid="classamrex_1_1AmrMesh_1afe23a9a66345fa657da022fc5a3cb349" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>n_proper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9341984f2f6514c334c1d38ba791e2c1" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>nErrorBuf</name></member>
      <member refid="classamrex_1_1AmrMesh_1a494fab0322e18b55d1b957018f2a4037" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>nProper</name></member>
      <member refid="classamrex_1_1AmrCore_1acf424d1fa598d256d7285e7fc6f20a73" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1a51e0432968299f0c83f90d9b79376a6c" prot="public" virt="non-virtual" ambiguityscope="amrex::AmrMesh::"><scope>amrex::AmrCore</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrCore_1ab4632b88f2c4ee953cf62f74db4a903d" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>printGridSummary</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7e3c7fc2f5598fdd4132536724933f2a" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>ref_ratio</name></member>
      <member refid="classamrex_1_1AmrMesh_1a95059679c4b3343198edadf7d9d860e5" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>refine_grid_layout</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2e4c36a7be2ae0b6bfa9285a9b7c6111" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2158bdfbb3869bd064fb1c0804df364e" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrCore_1ae80fa713b669de0f235d3ef0792e7200" prot="public" virt="virtual"><scope>amrex::AmrCore</scope><name>regrid</name></member>
      <member refid="classamrex_1_1AmrCore_1a89b690a6f834d76bf96f8f1facc356c4" prot="protected" virt="pure-virtual"><scope>amrex::AmrCore</scope><name>RemakeLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa743b181a5d29f05adce20c9bd5c3173" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae47a62015f3ddf3a52a271323f2a3828" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad0c4a96bcf21f498b214fecc2fdfef3d" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a146cb4c0e5a204d58b3f516153a593ce" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6253ef6827795b0f670e1a8efaa6709a" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a84861fe9f00d18e0bc7f4091e8f08a34" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7bedfae41bcead7ccfa7693f43763533" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetFinestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa3a9e81cccf0f19be22844cdc7ebe7d1" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetGridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae30c9c8d31c0671c35e181b8d2057444" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetIterateToFalse</name></member>
      <member refid="classamrex_1_1AmrMesh_1a830c3115a58fada88b7cfaf5bba9996c" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3632af824dc67123e7b7b349dd77c227" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a5da3d393a4a7ea75579945ac53681150" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad084f5309ca7d7c78e49b41b1da7e162" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a346a473f2c40d271ecb69c0e99859b05" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetNProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0560bc5909d40c4128ad6ff179ed7c5e" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>SetUseNewChop</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3162b5c3697f4ce32d585ca434ac40a5" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>use_fixed_coarse_grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a15a5406d39363635d73cc1d986546fe7" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>use_fixed_upto_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1abaf8432668e3b350306a62e8662f4f96" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>use_new_chop</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae2cad7cb8252ec6d3512afc904a9e7e9" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>useFixedCoarseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6da8eed8962368ecd9b7b62fb38c283a" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>useFixedUpToLevel</name></member>
      <member refid="classamrex_1_1AmrCore_1a7e2ab7cbc55436aa985751b80246668f" prot="protected" virt="non-virtual"><scope>amrex::AmrCore</scope><name>verbose</name></member>
      <member refid="classamrex_1_1AmrCore_1a6d0ad082c14a735202e4e6fa2e65b5d4" prot="public" virt="non-virtual"><scope>amrex::AmrCore</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1AmrCore_1aa826ec39007a18c0002a14d9a53863af" prot="public" virt="virtual"><scope>amrex::AmrCore</scope><name>~AmrCore</name></member>
      <member refid="classamrex_1_1AmrMesh_1a10865e07f3aae297cdea041881e7b9ab" prot="public" virt="virtual"><scope>amrex::AmrCore</scope><name>~AmrMesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
