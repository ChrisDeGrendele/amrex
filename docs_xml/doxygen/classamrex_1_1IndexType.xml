<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1IndexType" kind="class" language="C++" prot="public">
    <compoundname>amrex::IndexType</compoundname>
    <includes refid="AMReX__IndexType_8H" local="no">AMReX_IndexType.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" prot="public" static="no">
        <name>CellIndex</name>
        <enumvalue id="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" prot="public">
          <name>CELL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" prot="public">
          <name>NODE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The cell index type: one of CELL or NODE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="28" bodyend="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IndexType_1a748dd16ea6778b3a1c572e0fbc909373" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int amrex::IndexType::itype</definition>
        <argsstring></argsstring>
        <name>itype</name>
        <briefdescription>
<para>An integer holding the CellIndex in bits 0 - AMREX_SPACEDIM-1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1IndexType_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="24" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IndexType_1afda50942e464add1e129175e044f2f7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IndexType::IndexType</definition>
        <argsstring>()</argsstring>
        <name>IndexType</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a3874dab4a1f6c5ae10bf9dddace04e5a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::IndexType::IndexType</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>IndexType</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> identical to an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a810eca8ca3f9ddcb42e3069b8f15c613" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IndexType::IndexType</definition>
        <argsstring>(AMREX_D_DECL(CellIndex i, CellIndex j, CellIndex k))</argsstring>
        <name>IndexType</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(<ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">CellIndex</ref> i, <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">CellIndex</ref> j, <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">CellIndex</ref> k)</type>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> given an explicit CellIndex for each direction. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1ad04d7012b2416e6d72ee39ce304b0d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::set</definition>
        <argsstring>(int dir)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to be NODE based in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a7a433c12809b4a6cb2f83469c4c08ce5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::unset</definition>
        <argsstring>(int dir)</argsstring>
        <name>unset</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to be CELL based in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1acc7641b606102756d237b836bf9c8d6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::test</definition>
        <argsstring>(int dir) const </argsstring>
        <name>test</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is NODE based in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a9254844dbb97828c090c20a6d3a1d7a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::setall</definition>
        <argsstring>()</argsstring>
        <name>setall</name>
        <briefdescription>
<para>Set NODE based in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a37cd77d0f40cc926b0a63727f9680354" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Set CELL based in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a1063db9c3037d1b5a4e748dbe40b0191" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::any</definition>
        <argsstring>() const </argsstring>
        <name>any</name>
        <briefdescription>
<para>True if this <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is NODE based in any direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1ae9ea07369cdeb1a0abf394f947f591bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>True if <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a6a11e79726167e1b5aa9d0186da25954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::flip</definition>
        <argsstring>(int i)</argsstring>
        <name>flip</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Change from CELL to NODE or NODE to CELL in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a15c3c1a30896a68f55423e1724bdc8c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::operator==</definition>
        <argsstring>(const IndexType &amp;t) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if IndexTypes are identical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a8e427a5dca485ceca9d69813cc8e59e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::operator!=</definition>
        <argsstring>(const IndexType &amp;t) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>True if IndexTypes are not identical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a606895ed8bb8b09fb3e4e326537fe65d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::operator&lt;</definition>
        <argsstring>(const IndexType &amp;t) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1aa7bab3c141ccbc4cc9956cb3ffd84268" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::cellCentered</definition>
        <argsstring>() const </argsstring>
        <name>cellCentered</name>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is CELL based in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a2350daecb6ce0f058f04edb7b73ff1ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::cellCentered</definition>
        <argsstring>(int dir) const </argsstring>
        <name>cellCentered</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is CELL based in dir-direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a72ea91060d3675333fcbf346827ef387" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::nodeCentered</definition>
        <argsstring>() const </argsstring>
        <name>nodeCentered</name>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is NODE based in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a78a920fcfae4f14f393ace915b8c8ca5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE bool amrex::IndexType::nodeCentered</definition>
        <argsstring>(int dir) const </argsstring>
        <name>nodeCentered</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> is NODE based in dir-direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1a33712c5b814a98ae6daebea22e89bec9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::IndexType::setType</definition>
        <argsstring>(int dir, CellIndex t)</argsstring>
        <name>setType</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">CellIndex</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to CellIndex type t in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1ab1187bb4a28eb8893611de955c936ae7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">CellIndex</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE CellIndex amrex::IndexType::ixType</definition>
        <argsstring>(int dir) const </argsstring>
        <name>ixType</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the CellIndex in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1ac265c0f8145656efa896978d0b16e27e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int amrex::IndexType::operator[]</definition>
        <argsstring>(int dir) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return an integer representing the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1aefd0dfaf2fc43638d21fee8959ec9ed5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::IndexType::ixType</definition>
        <argsstring>() const </argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Fill an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> of size AMREX_SPACEDIM with IndexTypes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="103" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IndexType_1acb3bdee77a101d2d241dfea192151b92" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IndexType amrex::IndexType::TheCellType</definition>
        <argsstring>()</argsstring>
        <name>TheCellType</name>
        <briefdescription>
<para>This static member function returns an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> object of value <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref>. It is provided as a convenience to our users when defining a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> all of whose faces should be of type <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IndexType_1ac7a6780aa5907886de8f3af9262eefe6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> constexpr <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE constexpr IndexType amrex::IndexType::TheNodeType</definition>
        <argsstring>()</argsstring>
        <name>TheNodeType</name>
        <briefdescription>
<para>This static member function returns an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> object of value <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref>. It is provided as a convenience to our users when defining a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> all of whose faces should be of type <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="123" bodyend="127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1IndexType_1a1e75b1068991e7431096d4a54003d2e6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE int amrex::IndexType::mask</definition>
        <argsstring>(int k)</argsstring>
        <name>mask</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Returns 1&lt;&lt;k. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="132" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Cell-Based or Node-Based Indices. </para>    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> defines an index as being cell based or node (edge) based in each of the AMREX_SPACEDIM directions. This class defines an enumerated type CellIndex to be either CELL or NODE; i.e. each of the AMREX_SPACEDIM dimensions must be either CELL or NODE. </para>    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.H" bodystart="22" bodyend="135"/>
    <listofallmembers>
      <member refid="classamrex_1_1IndexType_1a1063db9c3037d1b5a4e748dbe40b0191" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>any</name></member>
      <member refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>CELL</name></member>
      <member refid="classamrex_1_1IndexType_1aa7bab3c141ccbc4cc9956cb3ffd84268" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1IndexType_1a2350daecb6ce0f058f04edb7b73ff1ec" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>CellIndex</name></member>
      <member refid="classamrex_1_1IndexType_1a37cd77d0f40cc926b0a63727f9680354" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>clear</name></member>
      <member refid="classamrex_1_1IndexType_1a6a11e79726167e1b5aa9d0186da25954" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>flip</name></member>
      <member refid="classamrex_1_1IndexType_1afda50942e464add1e129175e044f2f7c" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>IndexType</name></member>
      <member refid="classamrex_1_1IndexType_1a3874dab4a1f6c5ae10bf9dddace04e5a" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>IndexType</name></member>
      <member refid="classamrex_1_1IndexType_1a810eca8ca3f9ddcb42e3069b8f15c613" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>IndexType</name></member>
      <member refid="classamrex_1_1IndexType_1a748dd16ea6778b3a1c572e0fbc909373" prot="private" virt="non-virtual"><scope>amrex::IndexType</scope><name>itype</name></member>
      <member refid="classamrex_1_1IndexType_1ab1187bb4a28eb8893611de955c936ae7" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>ixType</name></member>
      <member refid="classamrex_1_1IndexType_1aefd0dfaf2fc43638d21fee8959ec9ed5" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>ixType</name></member>
      <member refid="classamrex_1_1IndexType_1a1e75b1068991e7431096d4a54003d2e6" prot="private" virt="non-virtual"><scope>amrex::IndexType</scope><name>mask</name></member>
      <member refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>NODE</name></member>
      <member refid="classamrex_1_1IndexType_1a72ea91060d3675333fcbf346827ef387" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>nodeCentered</name></member>
      <member refid="classamrex_1_1IndexType_1a78a920fcfae4f14f393ace915b8c8ca5" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>nodeCentered</name></member>
      <member refid="classamrex_1_1IndexType_1ae9ea07369cdeb1a0abf394f947f591bd" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>ok</name></member>
      <member refid="classamrex_1_1IndexType_1a8e427a5dca485ceca9d69813cc8e59e0" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IndexType_1a606895ed8bb8b09fb3e4e326537fe65d" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IndexType_1a15c3c1a30896a68f55423e1724bdc8c9" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IndexType_1ac265c0f8145656efa896978d0b16e27e" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IndexType_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::IndexType</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1IndexType_1ad04d7012b2416e6d72ee39ce304b0d84" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>set</name></member>
      <member refid="classamrex_1_1IndexType_1a9254844dbb97828c090c20a6d3a1d7a1" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>setall</name></member>
      <member refid="classamrex_1_1IndexType_1a33712c5b814a98ae6daebea22e89bec9" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>setType</name></member>
      <member refid="classamrex_1_1IndexType_1acc7641b606102756d237b836bf9c8d6c" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>test</name></member>
      <member refid="classamrex_1_1IndexType_1acb3bdee77a101d2d241dfea192151b92" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>TheCellType</name></member>
      <member refid="classamrex_1_1IndexType_1ac7a6780aa5907886de8f3af9262eefe6" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>TheNodeType</name></member>
      <member refid="classamrex_1_1IndexType_1a7a433c12809b4a6cb2f83469c4c08ce5" prot="public" virt="non-virtual"><scope>amrex::IndexType</scope><name>unset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
