<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1EBCellFlag" kind="class" language="C++" prot="public">
    <compoundname>amrex::EBCellFlag</compoundname>
    <includes refid="AMReX__EBCellFlag_8H" local="no">AMReX_EBCellFlag.H</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ab6a98c38286ed5ba0f71fc4a758ff845" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_lower_mask</definition>
        <argsstring></argsstring>
        <name>one_lower_mask</name>
        <initializer>=  0x1f</initializer>
        <briefdescription>
<para>masks for lowest 5 bits (i.e., bit number 0-4) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a202cad7d2c40d09b3c3efbdfdf94115d" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_lower_mask</definition>
        <argsstring></argsstring>
        <name>zero_lower_mask</name>
        <initializer>= ~0x1f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a3d96cabc11327fe2db480268931dcba4" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_type_mask</definition>
        <argsstring></argsstring>
        <name>one_type_mask</name>
        <initializer>=  0x3</initializer>
        <briefdescription>
<para>masks lowest 2 bits (i.e., bit number 0-1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ac8267e4520db8eab9e586ba8de116d2b" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_type_mask</definition>
        <argsstring></argsstring>
        <name>zero_type_mask</name>
        <initializer>= ~0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="155" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a4a42591e65666aa5935d1e56fc08ec4d" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::one_numvofs_mask</definition>
        <argsstring></argsstring>
        <name>one_numvofs_mask</name>
        <initializer>=  0x1c</initializer>
        <briefdescription>
<para>masks for bit number 2-4 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a684214fb8524798b231301cf52aeac95" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::zero_numvofs_mask</definition>
        <argsstring></argsstring>
        <name>zero_numvofs_mask</name>
        <initializer>= ~0x1c</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="159" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a98e740b42531b93d0abef721579b39be" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::regular_bits</definition>
        <argsstring></argsstring>
        <name>regular_bits</name>
        <initializer>=  0x0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>these represent cell types note that single-valued means single-value cut cell </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a54cf88910c4f2884f367348b554c6d92" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::single_vauled_bits</definition>
        <argsstring></argsstring>
        <name>single_vauled_bits</name>
        <initializer>=  0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a8fe56028eeb58ef0718c19c6855f6bcb" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::multi_valued_bits</definition>
        <argsstring></argsstring>
        <name>multi_valued_bits</name>
        <initializer>=  0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ae215f9034bbe23e831586bc395de5477" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::covered_bits</definition>
        <argsstring></argsstring>
        <name>covered_bits</name>
        <initializer>=  0x3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a7ee55a07343cf958411c2400a2925a9a" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::single_vof_bits</definition>
        <argsstring></argsstring>
        <name>single_vof_bits</name>
        <initializer>=  0x4</initializer>
        <briefdescription>
<para>this represent single vof (regular is considered as single vof too) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a9978159e62e9a5f1a9ba4a55019dc7dc" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_lower_mask</definition>
        <argsstring></argsstring>
        <name>w_lower_mask</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>There are 32 bits. The lowest 2 bits are used for cell type: regular, single-valued, multi-valued, and covered. The next 3 bits are for the number of vofs. The rest 27 bits are used for connectivity with neighbors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a68904d39b391c9345ebbb57ca42df263" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_type</definition>
        <argsstring></argsstring>
        <name>w_type</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a0a1397794bc5591a597619e3632ad878" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::w_numvofs</definition>
        <argsstring></argsstring>
        <name>w_numvofs</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a25435966072b5955673109be97617f89" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::EBCellFlag::pos_numvofs</definition>
        <argsstring></argsstring>
        <name>pos_numvofs</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::default_value</definition>
        <argsstring></argsstring>
        <name>default_value</name>
        <initializer>= 0x7fc004</initializer>
        <briefdescription>
<para>regular connected with all neighbors </para>        </briefdescription>
        <detaileddescription>
<para>zero out &quot;3d&quot; neighbors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="197" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1a41bd6408895885d67358df6a58cdc867" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t amrex::EBCellFlag::covered_value</definition>
        <argsstring></argsstring>
        <name>covered_value</name>
        <initializer>= 0x40003</initializer>
        <briefdescription>
<para>zero out all neighbors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1EBCellFlag_1ab630a116c4a01a64f68d4a8a1592360f" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t amrex::EBCellFlag::flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <initializer>= <ref refid="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" kindref="member">default_value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a37d4ab263bfaa1ba2b0d1c384e2bef5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>()=default</argsstring>
        <name>EBCellFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a66fa73119cce97e1593b4d83f5f3b8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>(const EBCellFlag &amp;rhs) noexcept=default</argsstring>
        <name>EBCellFlag</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ad836f9a93ca18f0ebe29d0879873d332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::EBCellFlag::EBCellFlag</definition>
        <argsstring>(uint32_t i)</argsstring>
        <name>EBCellFlag</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae4b21b658d54ac6dcef6276c580baf9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>EBCellFlag&amp; amrex::EBCellFlag::operator=</definition>
        <argsstring>(const EBCellFlag &amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a6536f2058d14dd402bd42c4f8376472b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>EBCellFlag&amp; amrex::EBCellFlag::operator=</definition>
        <argsstring>(uint32_t i)</argsstring>
        <name>operator=</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ae4fbeeb036f82398a0aa386bf976af6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE EBCellFlag&amp; amrex::EBCellFlag::operator+=</definition>
        <argsstring>(const EBCellFlag &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a0bdea462036ed58b772fdd1b135770f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setRegular</definition>
        <argsstring>()</argsstring>
        <name>setRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; clean lower bits </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a0ee5598743b7f241059f34bb43ede2c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setCovered</definition>
        <argsstring>()</argsstring>
        <name>setCovered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a8ff12c28ff2eb091024945b68dae88bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setSingleValued</definition>
        <argsstring>()</argsstring>
        <name>setSingleValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aed8028ab7f6329a7476fd410c608b370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setMultiValued</definition>
        <argsstring>(int n)</argsstring>
        <name>setMultiValued</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a95cae2948b6c97dc8a54650cd66263cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::operator==</definition>
        <argsstring>(const EBCellFlag &amp;a_input) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>a_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a5e9708ea0131108bb598b22fc07bc200" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::operator!=</definition>
        <argsstring>(const EBCellFlag &amp;a_input) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>a_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a11ef0c2f55d61cedb7326e15952ca89d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::EBCellFlag::getNumVoFs</definition>
        <argsstring>() const </argsstring>
        <name>getNumVoFs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a32d6a959301c5ccc2817f7ad0b66c708" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isRegular</definition>
        <argsstring>() const </argsstring>
        <name>isRegular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a1165fccc101f2a6628b057f090ae075f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isSingleValued</definition>
        <argsstring>() const </argsstring>
        <name>isSingleValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a84a5199f343833e3883e838e3af3cb81" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isMultiValued</definition>
        <argsstring>() const </argsstring>
        <name>isMultiValued</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1acaf3495cd0c4577c3f14f214e766c772" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isCovered</definition>
        <argsstring>() const </argsstring>
        <name>isCovered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aa535a6ed4054cc84ce8ea9fb8a4d8cfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isConnected</definition>
        <argsstring>(const IntVect &amp;iv) const </argsstring>
        <name>isConnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="96" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a304d8cc811050c118ffea06e63af6133" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::EBCellFlag::isConnected</definition>
        <argsstring>(int i, int j, int k) const </argsstring>
        <name>isConnected</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1ad2c62cdc107b5cc550b87bdf561cfeff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setDisconnected</definition>
        <argsstring>()</argsstring>
        <name>setDisconnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a17704f4e57583b3ebe75b79cc3241d89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setDisconnected</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>setDisconnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1af0fbd96f92cfc1950f80df38b766c6f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setConnected</definition>
        <argsstring>()</argsstring>
        <name>setConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1acc1818e841663ad3d5325ff765482c27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::EBCellFlag::setConnected</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>setConnected</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="128" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a46ee29ee0d8d8b1439faaa3b6ae37b8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> uint32_t</type>
        <definition>AMREX_GPU_HOST_DEVICE uint32_t amrex::EBCellFlag::getValue</definition>
        <argsstring>() const </argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="136" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1aa6b0c1954ea57c94008348fb055f91be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref></type>
        <definition>static AMREX_GPU_HOST_DEVICE constexpr EBCellFlag amrex::EBCellFlag::TheDefaultCell</definition>
        <argsstring>()</argsstring>
        <name>TheDefaultCell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EBCellFlag_1a78ab1e2b351d8cf433021ded8b73876e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref></type>
        <definition>static AMREX_GPU_HOST_DEVICE constexpr EBCellFlag amrex::EBCellFlag::TheCoveredCell</definition>
        <argsstring>()</argsstring>
        <name>TheCoveredCell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="145" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.H" bodystart="13" bodyend="203"/>
    <listofallmembers>
      <member refid="classamrex_1_1EBCellFlag_1ae215f9034bbe23e831586bc395de5477" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>covered_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a41bd6408895885d67358df6a58cdc867" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>covered_value</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a92f709a077a386fa2d23fb8b3639fe06" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>default_value</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a37d4ab263bfaa1ba2b0d1c384e2bef5c" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a66fa73119cce97e1593b4d83f5f3b8ca" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ad836f9a93ca18f0ebe29d0879873d332" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>EBCellFlag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ab630a116c4a01a64f68d4a8a1592360f" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>flag</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a11ef0c2f55d61cedb7326e15952ca89d" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>getNumVoFs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a46ee29ee0d8d8b1439faaa3b6ae37b8f" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>getValue</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aa535a6ed4054cc84ce8ea9fb8a4d8cfb" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a304d8cc811050c118ffea06e63af6133" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1acaf3495cd0c4577c3f14f214e766c772" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isCovered</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a84a5199f343833e3883e838e3af3cb81" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isMultiValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a32d6a959301c5ccc2817f7ad0b66c708" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isRegular</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a1165fccc101f2a6628b057f090ae075f" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>isSingleValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a8fe56028eeb58ef0718c19c6855f6bcb" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>multi_valued_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ab6a98c38286ed5ba0f71fc4a758ff845" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a4a42591e65666aa5935d1e56fc08ec4d" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_numvofs_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a3d96cabc11327fe2db480268931dcba4" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>one_type_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a5e9708ea0131108bb598b22fc07bc200" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae4fbeeb036f82398a0aa386bf976af6c" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ae4b21b658d54ac6dcef6276c580baf9a" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a6536f2058d14dd402bd42c4f8376472b" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a95cae2948b6c97dc8a54650cd66263cb" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>operator==</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a25435966072b5955673109be97617f89" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>pos_numvofs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a98e740b42531b93d0abef721579b39be" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>regular_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1af0fbd96f92cfc1950f80df38b766c6f4" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1acc1818e841663ad3d5325ff765482c27" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setConnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0ee5598743b7f241059f34bb43ede2c4" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setCovered</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ad2c62cdc107b5cc550b87bdf561cfeff" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a17704f4e57583b3ebe75b79cc3241d89" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setDisconnected</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aed8028ab7f6329a7476fd410c608b370" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setMultiValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0bdea462036ed58b772fdd1b135770f0" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setRegular</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a8ff12c28ff2eb091024945b68dae88bf" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>setSingleValued</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a54cf88910c4f2884f367348b554c6d92" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>single_vauled_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a7ee55a07343cf958411c2400a2925a9a" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>single_vof_bits</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a78ab1e2b351d8cf433021ded8b73876e" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>TheCoveredCell</name></member>
      <member refid="classamrex_1_1EBCellFlag_1aa6b0c1954ea57c94008348fb055f91be" prot="public" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>TheDefaultCell</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a9978159e62e9a5f1a9ba4a55019dc7dc" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a0a1397794bc5591a597619e3632ad878" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_numvofs</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a68904d39b391c9345ebbb57ca42df263" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>w_type</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a202cad7d2c40d09b3c3efbdfdf94115d" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_lower_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1a684214fb8524798b231301cf52aeac95" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_numvofs_mask</name></member>
      <member refid="classamrex_1_1EBCellFlag_1ac8267e4520db8eab9e586ba8de116d2b" prot="private" virt="non-virtual"><scope>amrex::EBCellFlag</scope><name>zero_type_mask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
