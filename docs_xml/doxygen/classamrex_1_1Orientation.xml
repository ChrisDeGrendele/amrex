<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Orientation" kind="class" language="C++" prot="public">
    <compoundname>amrex::Orientation</compoundname>
    <includes refid="AMReX__Orientation_8H" local="no">AMReX_Orientation.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" prot="public" static="no">
        <name>Side</name>
        <enumvalue id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410a20ab23ed836ba1667dddbd915ff85255" prot="public">
          <name>low</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410ae82bb2777abd5901ea82ca6721b716a8" prot="public">
          <name>high</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>In each dimension a face is either low or high. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="34" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Orientation_1a89ae2d0b6ad2bb943c5bf57233fdae87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class OrientationIter</definition>
        <argsstring></argsstring>
        <name>OrientationIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Orientation_1af0136f36e2baaaf07b4a413f5113689a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;os, Orientation &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Read from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Orientation_1a3a44078514365792a6288dcd61a668b0" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::Orientation::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <briefdescription>
<para>The data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Orientation_1a51fb2e5669a462519351f73f461a4775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Orientation::Orientation</definition>
        <argsstring>()</argsstring>
        <name>Orientation</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1af9e314fa960975d6e1cf020f7eec3d2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Orientation::Orientation</definition>
        <argsstring>(int dir, Side side)</argsstring>
        <name>Orientation</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" kindref="member">Side</ref></type>
          <declname>side</declname>
        </param>
        <briefdescription>
<para>Set the orientation of a side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a9ef79aef1fa466d05e667696f5fe78cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator==</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Logical equality. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a080fef438dc9fb7a10f364ce1f7dad34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator!=</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Logical inequality. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ac71a3009160ce5d2d92ed25798a865c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&lt;</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Less-than. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1aee672e6f897bdb3c2d48bcc75a21df26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&lt;=</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Less-than or equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ad477bb0dae7a730a7fc2365218fd305f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&gt;</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1abfb06702999b745d54ea5265d7efc726" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::operator&gt;=</definition>
        <argsstring>(const Orientation &amp;o) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Greater-than or equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a2d9f54ed6143baca0ce81fa7481ac504" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Orientation::operator int</definition>
        <argsstring>() const </argsstring>
        <name>operator int</name>
        <briefdescription>
<para>This conversion operator maps an orientation into a unique integer in the range [0 .. 2*AMREX_SPACEDIM-1] according to the above ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a6a235bf7e7a6fd92b57dc499e2545c18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Orientation amrex::Orientation::flip</definition>
        <argsstring>() const </argsstring>
        <name>flip</name>
        <briefdescription>
<para>Return opposite orientation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ad958900015df31962213d9d605d7abdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Orientation::coordDir</definition>
        <argsstring>() const </argsstring>
        <name>coordDir</name>
        <briefdescription>
<para>Returns the coordinate direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a6fe6756b8835538e89f2317656a5bb36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" kindref="member">Side</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Side amrex::Orientation::faceDir</definition>
        <argsstring>() const </argsstring>
        <name>faceDir</name>
        <briefdescription>
<para>Returns the orientation of the face <ndash/> low or high. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1a71f2e4d476fe6fbf59bfe97b3846d005" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::isLow</definition>
        <argsstring>() const </argsstring>
        <name>isLow</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> is low. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Orientation_1ad58e964822a61e5e1cfa9e0f25093d72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Orientation::isHigh</definition>
        <argsstring>() const </argsstring>
        <name>isHigh</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> is high. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="90" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Orientation_1a75bc66edd63e24751af704fe16998c03" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Orientation::Orientation</definition>
        <argsstring>(int v)</argsstring>
        <name>Orientation</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Used internally. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="97" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulation of the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> of the Faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>This class encapsulates the orientation of the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by providing an ordering of each of the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in AMREX_SPACEDIM dimensions. This allows iterating over all the faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The ordering first traverses the AMREX_SPACEDIM low sides from direction 0 .. AMREX_SPACEDIM-1 and then the AMREX_SPACEDIM high sides from direction 0 .. AMREX_SPACEDIM-1. </para>    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="28" bodyend="101"/>
    <listofallmembers>
      <member refid="classamrex_1_1Orientation_1ad958900015df31962213d9d605d7abdf" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>coordDir</name></member>
      <member refid="classamrex_1_1Orientation_1a6fe6756b8835538e89f2317656a5bb36" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>faceDir</name></member>
      <member refid="classamrex_1_1Orientation_1a6a235bf7e7a6fd92b57dc499e2545c18" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>flip</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410ae82bb2777abd5901ea82ca6721b716a8" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>high</name></member>
      <member refid="classamrex_1_1Orientation_1ad58e964822a61e5e1cfa9e0f25093d72" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>isHigh</name></member>
      <member refid="classamrex_1_1Orientation_1a71f2e4d476fe6fbf59bfe97b3846d005" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>isLow</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410a20ab23ed836ba1667dddbd915ff85255" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>low</name></member>
      <member refid="classamrex_1_1Orientation_1a2d9f54ed6143baca0ce81fa7481ac504" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator int</name></member>
      <member refid="classamrex_1_1Orientation_1a080fef438dc9fb7a10f364ce1f7dad34" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1Orientation_1ac71a3009160ce5d2d92ed25798a865c0" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1Orientation_1aee672e6f897bdb3c2d48bcc75a21df26" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1Orientation_1a9ef79aef1fa466d05e667696f5fe78cd" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator==</name></member>
      <member refid="classamrex_1_1Orientation_1ad477bb0dae7a730a7fc2365218fd305f" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1Orientation_1abfb06702999b745d54ea5265d7efc726" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1Orientation_1af0136f36e2baaaf07b4a413f5113689a" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Orientation_1a51fb2e5669a462519351f73f461a4775" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1af9e314fa960975d6e1cf020f7eec3d2a" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a75bc66edd63e24751af704fe16998c03" prot="private" virt="non-virtual"><scope>amrex::Orientation</scope><name>Orientation</name></member>
      <member refid="classamrex_1_1Orientation_1a89ae2d0b6ad2bb943c5bf57233fdae87" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1Orientation_1a877c697bbab9de21af4012197ba76410" prot="public" virt="non-virtual"><scope>amrex::Orientation</scope><name>Side</name></member>
      <member refid="classamrex_1_1Orientation_1a3a44078514365792a6288dcd61a668b0" prot="private" virt="non-virtual"><scope>amrex::Orientation</scope><name>val</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
