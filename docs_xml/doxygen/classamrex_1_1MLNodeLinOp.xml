<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1MLNodeLinOp" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLNodeLinOp</compoundname>
    <basecompoundref refid="classamrex_1_1MLLinOp" prot="public" virt="non-virtual">amrex::MLLinOp</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1MLNodeLaplacian" prot="public" virt="non-virtual">amrex::MLNodeLaplacian</derivedcompoundref>
    <includes refid="AMReX__MLNodeLinOp_8H" local="no">AMReX_MLNodeLinOp.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLNodeLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLMG</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLNodeLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a192598f12e56d51e8f952913e8fdf72c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; &gt; amrex::MLNodeLinOp::m_owner_mask</definition>
        <argsstring></argsstring>
        <name>m_owner_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1aaa52abefe4405ee59158a27c112ccfa9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; &gt; amrex::MLNodeLinOp::m_dirichlet_mask</definition>
        <argsstring></argsstring>
        <name>m_dirichlet_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a91c9e98ef8edd4106aace72a6c7a4294" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::MLNodeLinOp::m_cc_fine_mask</definition>
        <argsstring></argsstring>
        <name>m_cc_fine_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a034b72948cecb00630515b6a2de77109" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::MLNodeLinOp::m_nd_fine_mask</definition>
        <argsstring></argsstring>
        <name>m_nd_fine_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a76a73246b9e7679b93591f2093a857c3" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; int &gt; &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;LayoutData&lt;int&gt; &gt; &gt; amrex::MLNodeLinOp::m_has_fine_bndry</definition>
        <argsstring></argsstring>
        <name>m_has_fine_bndry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a4b398a735f5c05d0919bc24efc9a7025" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::MLNodeLinOp::m_bottom_dot_mask</definition>
        <argsstring></argsstring>
        <name>m_bottom_dot_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLNodeLinOp_1a117db04aae22221b83130cff6e6fdb52" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::MLNodeLinOp::m_coarse_dot_mask</definition>
        <argsstring></argsstring>
        <name>m_coarse_dot_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1aaf264472c0b70b5588a04b930fbcd8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLinOp::MLNodeLinOp</definition>
        <argsstring>()</argsstring>
        <name>MLNodeLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a07faf757bcc476afe8bf3b88997d3039" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::MLNodeLinOp::~MLNodeLinOp</definition>
        <argsstring>()</argsstring>
        <name>~MLNodeLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="18" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a712873309064abf30aafcb2d277890fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLinOp::MLNodeLinOp</definition>
        <argsstring>(const MLNodeLinOp &amp;)=delete</argsstring>
        <name>MLNodeLinOp</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a02892864c3a177a34cc38d3d55a972fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLNodeLinOp::MLNodeLinOp</definition>
        <argsstring>(MLNodeLinOp &amp;&amp;)=delete</argsstring>
        <name>MLNodeLinOp</name>
        <param>
          <type><ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a1f11eab31e2487056a5befd79c8a22a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;</type>
        <definition>MLNodeLinOp&amp; amrex::MLNodeLinOp::operator=</definition>
        <argsstring>(const MLNodeLinOp &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a8dcf3f92d3ef1932e03ad470e29d1517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;</type>
        <definition>MLNodeLinOp&amp; amrex::MLNodeLinOp::operator=</definition>
        <argsstring>(MLNodeLinOp &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLNodeLinOp" kindref="compound">MLNodeLinOp</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1ab98fdadedd74d8601f0da56bde60b23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FArrayBox &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="19" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a15e11c647b57a19a393a2ca6a323a85a" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::setLevelBC</definition>
        <argsstring>(int amrlev, const MultiFab *levelbcdata) finaloverride</argsstring>
        <name>setLevelBC</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a52d97117bad0d48c8e73546e7092e7dc">setLevelBC</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>levelbcdata</declname>
        </param>
        <briefdescription>
<para>Must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet bc at the physical domain. However, even if there is no Dirichlet bc, this funcion must still be called. In that case, argument <computeroutput>levelbcdata</computeroutput> will be ignored and thus could be nullptr. The supplied <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> must have one ghost cell. Only the data outside the physical domain at Dirichlet boundary will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>levelbcdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a668c3faa79d094f72e351a8ec1736fc2" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::apply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, MultiFab &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndry *bndry=nullptr) const finaloverride</argsstring>
        <name>apply</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a01cdaaf631b81b52be1ffaf606d8f9e1">apply</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndry" kindref="compound">MLMGBndry</ref> *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="159" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a049936d38ba7f07adcf9c435849bca64" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::smooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rhs, bool skip_fillboundary=false) const finaloverride</argsstring>
        <name>smooth</name>
        <reimplements refid="classamrex_1_1MLLinOp_1acf3d13b45072c825f835b9b9a536e774">smooth</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a99f514acc7c59a80373051fb4e356267" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::solutionResidual</definition>
        <argsstring>(int amrlev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, const MultiFab *crse_bcdata=nullptr) finaloverride</argsstring>
        <name>solutionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a37cdc5b58be54be165fee5cc26a5f5e1">solutionResidual</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="126" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a7cc87d9ad0dc1bb52e0ec04f20e7066e" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;resid, MultiFab &amp;x, const MultiFab &amp;b, BCMode bc_mode, const MultiFab *crse_bcdata=nullptr) finaloverride</argsstring>
        <name>correctionResidual</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a824432661ed84da479fefccbf118f6fe">correctionResidual</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1afe48a02e5be6dd3beac70271de7a02da" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fluxes, MultiFab &amp;sol, Location loc) const finaloverride</argsstring>
        <name>compFlux</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a5e7404bd72d5372194a5012f9783fd6c">compFlux</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a264af834600d85a8773131c87ccfeb1b" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;grad, MultiFab &amp;sol, Location loc) const finaloverride</argsstring>
        <name>compGrad</name>
        <reimplements refid="classamrex_1_1MLLinOp_1aa811fc7672cda86a04b37b7a36380823">compGrad</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a7e5c287fd5bd6078ccc3afc7e18fd69a" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::applyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const finaloverride</argsstring>
        <name>applyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a1097a30ac7246a9ef37ab71e8281a8c9">applyMetricTerm</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a700bdd6e43250739cc3f571b94b81688" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::unapplyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;rhs) const finaloverride</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a3493bb63b041a05c4f4f6de28df1b37e">unapplyMetricTerm</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1af31692542848e1defea74b813d801a81" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::fillSolutionBC</definition>
        <argsstring>(int amrlev, MultiFab &amp;sol, const MultiFab *crse_bcdata=nullptr) finaloverride</argsstring>
        <name>fillSolutionBC</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a93fed17bd53a16d98faaa1c8a6a6e401">fillSolutionBC</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1ac604e9b47938e183cd38f8f9ad400668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::prepareForSolve</definition>
        <argsstring>() override</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a431d85bffa7e9bbcd36a10ae82fe3683">prepareForSolve</reimplements>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ae2134173a1bd7b925000e8072a87082f">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1ab1e7a8ff6a4f712576a8eff0baef1772" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>Real</type>
        <definition>Real amrex::MLNodeLinOp::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MultiFab &amp;x, const MultiFab &amp;y, bool local) const finaloverride</argsstring>
        <name>xdoty</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a37371995331ab213ba93ed280b9c71ed">xdoty</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="177" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1aa084c0272fc33cb2bfe13c4e700df73a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::applyBC</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;phi, BCMode bc_mode, StateMode s_mode, bool skip_fillboundary=false) const =0</argsstring>
        <name>applyBC</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1af211d8e359ae9392522fe60c5f253e3f">applyBC</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1afaae44c30405c4c8c2fdabede17a34ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;out, const MultiFab &amp;in) const =0</argsstring>
        <name>Fapply</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a94ccd77c0c9e232e20b5e68d785d2dee">Fapply</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1ac856c51055f30434fd54c59eeeeb2f9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLNodeLinOp::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;sol, const MultiFab &amp;rsh) const =0</argsstring>
        <name>Fsmooth</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1af52c5a037979e4b1a7da5201868af61a">Fsmooth</reimplementedby>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>rsh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a0e91f952317f3b9bfb4c20bb68624e1b" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLNodeLinOp::nodalSync</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const finaloverride</argsstring>
        <name>nodalSync</name>
        <reimplements refid="classamrex_1_1MLLinOp_1a92b49ce3cd6f8877018a284c9a05663b">nodalSync</reimplements>
        <param>
          <type>int</type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1a5fffb41bbd6d2ee5cf4454e0e3768898" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOp&gt; amrex::MLNodeLinOp::makeNLinOp</definition>
        <argsstring>(int grid_size) const finaloverride</argsstring>
        <name>makeNLinOp</name>
        <reimplements refid="classamrex_1_1MLLinOp_1af7992c664d65948c99e3661e6d23a646">makeNLinOp</reimplements>
        <param>
          <type>int</type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="70" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1MLNodeLinOp_1ae050e4fda0843b175da8fbcfb8462392" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::MLNodeLinOp::makeOwnerMask</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const Geometry &amp;geom)</argsstring>
        <name>makeOwnerMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp" bodystart="60" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4132">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="4133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4133">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
      </node>
      <node id="4134">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="4132" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4165">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="4149">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="4150" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="4152">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="4145">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4145" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4142">
        <label>Real</label>
      </node>
      <node id="4166">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4167" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4143">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4144">
        <label>std::vector&lt; amrex::Vector&lt; amrex::BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="4153">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4154" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4150">
        <label>string</label>
      </node>
      <node id="4168">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="4145" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="4162">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="4135">
        <label>amrex::MLNodeLinOp</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="4136" relation="public-inheritance">
        </childnode>
        <childnode refid="4146" relation="usage">
          <edgelabel>m_bottom_dot_mask</edgelabel>
          <edgelabel>m_coarse_dot_mask</edgelabel>
        </childnode>
        <childnode refid="4172" relation="usage">
          <edgelabel>m_nd_fine_mask</edgelabel>
          <edgelabel>m_cc_fine_mask</edgelabel>
        </childnode>
        <childnode refid="4174" relation="usage">
          <edgelabel>m_owner_mask</edgelabel>
          <edgelabel>m_dirichlet_mask</edgelabel>
        </childnode>
        <childnode refid="4176" relation="usage">
          <edgelabel>m_has_fine_bndry</edgelabel>
        </childnode>
      </node>
      <node id="4161">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4162" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4137">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4138" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4140">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="4163">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="4139">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4140" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4177">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4141">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="4141" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="4142" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="4169">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4170" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4167">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="4154">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="4159">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="4145" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="4160" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="4136">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="4137" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="4139" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="4141" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="4143" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="4145" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="4146" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="4153" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="4169" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="4136" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="4171" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="4176">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::LayoutData&lt; int &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4177" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4172">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4173" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4157">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="4158" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="4164">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4165" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4171">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="4160">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4158">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="4153" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="4174">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4175" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4151">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="4155">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="4156" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="4157" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="4146">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="4147" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4173">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="4147">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="4148" relation="public-inheritance">
        </childnode>
        <childnode refid="4145" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="4153" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="4161" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="4163" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="4164" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="4166" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="4168" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="4156">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="4148">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4149" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="4151" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="4145" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="4152" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="4153" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="4155" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="4159" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="4175">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="4170">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="4138">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H" bodystart="9" bodyend="88"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOp_1a9992a7eb18c66153f5c1834d158ce5a7" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3e8aac883541fb99eecd1ce929fb9d95" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a668c3faa79d094f72e351a8ec1736fc2" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aa084c0272fc33cb2bfe13c4e700df73a" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7e5c287fd5bd6078ccc3afc7e18fd69a" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a49e8248c4a3a27e8bfc77227bdfb433a" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac2e55c34bf6b5c0ed53d0ef6a4625a3f" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab1d350aa483803c4829193061929d999" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOp_1a95546d2327fb1fd23b8f36e1d72e0163" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1afe48a02e5be6dd3beac70271de7a02da" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a264af834600d85a8773131c87ccfeb1b" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7cc87d9ad0dc1bb52e0ec04f20e7066e" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ab98fdadedd74d8601f0da56bde60b23b" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOp_1a24676b3cbd7a5a6213124c5c38548b61" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a853cb2ecda9218a782bf244177c13a74" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae3a6d0ccf94a8b6e1b248cdf1f6ac1a6" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1afaae44c30405c4c8c2fdabede17a34ef" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1af31692542848e1defea74b813d801a81" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>fillSolutionBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad00407760d4927438c355ba115aaad4e" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5137ff000c6f8940f4b07a28f3bf9375" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>fixUpResidualMask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ac856c51055f30434fd54c59eeeeb2f9b" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOp_1a4259c59d91cf4d9f499b88ddf506066d" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae6a653e83929e0f2c41482551c10b4e8" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad2419e6b4d384edbd5695daca078e310" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOp_1a539e8aa2dde2878271b518c562da22cd" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1acd287b03ea1a73f47ba1f08bb10a484d" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a85fa2f104bbfeaa73d55d589906ecd45" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOp_1a48b2fe73722eee0a1d50b6e0b9558174" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1MLLinOp_1a55d585de64a0263a1b2308553cbaee13" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a58d45d8aa3d055c80b7fa97148e0cfae" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa6ff4935f1246d7c94ac38dc65c25d7d" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a30b5b76f86c3e2ca139e8f4d634873e2" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa8d6ef9e77180f9076ef5cb83f48bb50" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOp_1a42ca524eb4deca1132be683805d2d7ab" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1a06ea1608702e52d38c0eceaa180bad7e" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a4b398a735f5c05d0919bc24efc9a7025" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_bottom_dot_mask</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a91c9e98ef8edd4106aace72a6c7a4294" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_cc_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1abc7e6e6252f9ecc63c86dcbd99250e10" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1ca01453776c12e634debdc6d09206c3" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad1382ee007387f65075acda2f46866f2" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a117db04aae22221b83130cff6e6fdb52" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_coarse_dot_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1addb42fac68158f49c2508cf47d3b8d9d" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaa52abefe4405ee59158a27c112ccfa9" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_dirichlet_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a80552ba3fc7cdd6bb00739c66327ae2c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOp_1a19bf5f2d76877e5f5777e5c44d290648" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOp_1a488b6dd5c1bfecef948b543bfa7e5154" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaba23614888f937956554945e6a2a5a0" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOp_1aca26a5ef5d68cae3dcabea0a5d8c2493" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab16551403ee1629e20ed6e6d9d4f680c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3f9b0a7c3a91ca7e13664dbfe7115eed" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a76a73246b9e7679b93591f2093a857c3" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_has_fine_bndry</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab46e1fbe510eaa6df03a326e2b156eca" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1422f7b22ae204247f5cdf20ab70e741" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOp_1a43d529fe1b438af26fbc4a2e9c935549" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a034b72948cecb00630515b6a2de77109" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_nd_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1aa53a765aea0ed0c4e7410d147380079f" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad6bbf49c1bdb88256721471b22b4b044" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOp_1ababf1d5df3da022563dc90ee2c81ad75" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a192598f12e56d51e8f952913e8fdf72c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_owner_mask</name></member>
      <member refid="classamrex_1_1MLLinOp_1a614164d6c8e680ccb5ac8fb9cf1558ed" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2faeb23bc1e93e2b0cd693cb94a18d08" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLLinOp_1a6249249666804079176507b88626a72c" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOp_1af58f71c827253ca415f218f6cf77f1fb" prot="protected" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a5fffb41bbd6d2ee5cf4454e0e3768898" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ae050e4fda0843b175da8fbcfb8462392" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>makeOwnerMask</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac516dba583aede117f89e339423f6114" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOp_1ae871a991ef83c33044a22db383c76dcd" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOp_1aaa5616982aef27c68c5ae5544092c7db" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2a75b94dc22faffec8a686f91fbfc9c1" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7dd2c530e984f58e5a04cc415e9a539b" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a69fbc0ca95c18b6e954c53abb41c885c" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a1b4821805159b0595b6b7b1e0135b54f" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1aaf264472c0b70b5588a04b930fbcd8ff" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a712873309064abf30aafcb2d277890fb" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a02892864c3a177a34cc38d3d55a972fd" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>MLNodeLinOp</name></member>
      <member refid="classamrex_1_1MLLinOp_1a9499bee82065be142da7257e4b4cae65" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2eae47420a806a218f08fbcfb2ce7eab" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1ab68d7b11273242e632c9f8a422c911d7" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOp_1a7d31860d0c0b1f4eb1679bb36561b920" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a0e91f952317f3b9bfb4c20bb68624e1b" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>nodalSync</name></member>
      <member refid="classamrex_1_1MLLinOp_1a3e0f34318790ba3e087ecf8b870dd12f" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a1f11eab31e2487056a5befd79c8a22a0" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a8dcf3f92d3ef1932e03ad470e29d1517" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad163e1fa25935bce528783de5adb6b1a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLNodeLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOp_1aec2118e27e9938788a89f5dda28709f7" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOp::"><scope>amrex::MLNodeLinOp</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ac604e9b47938e183cd38f8f9ad400668" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0c9c6f136cf005be3ce2c797b4b67537" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOp_1a5a1bffd08a85405f9a9fbeed7c20fd97" prot="public" virt="pure-virtual"><scope>amrex::MLNodeLinOp</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad9217e108815b23ac024fe9b54888e2a" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a54c7bb112ff9ee682f49142fc17c9b60" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOp_1a2f8c43bca7772706acace56cf0067ebb" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a15e11c647b57a19a393a2ca6a323a85a" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOp_1a18be2937f7fc97e7cd7a086003367bbd" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOp_1a33b5219a7565904bf3f1e320b9ceb2fe" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a049936d38ba7f07adcf9c435849bca64" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a99f514acc7c59a80373051fb4e356267" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOp_1a1f2821b4a51da49d862dae1e757bb8c3" prot="public" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a700bdd6e43250739cc3f571b94b81688" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOp_1ad5afb08b77db92744e5e7f7f02e5c83b" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOp_1a0815357130e78962e01abdaba2b09c21" prot="protected" virt="non-virtual"><scope>amrex::MLNodeLinOp</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1ab1e7a8ff6a4f712576a8eff0baef1772" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOp_1ac6793724d6b5c98581d42d9233fda1bd" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>~MLLinOp</name></member>
      <member refid="classamrex_1_1MLNodeLinOp_1a07faf757bcc476afe8bf3b88997d3039" prot="public" virt="virtual"><scope>amrex::MLNodeLinOp</scope><name>~MLNodeLinOp</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
