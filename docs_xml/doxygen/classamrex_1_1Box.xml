<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1Box" kind="class" language="C++" prot="public">
    <compoundname>amrex::Box</compoundname>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Box_1af5c898c7b3635a504124819032a025fe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class BoxCommHelper</definition>
        <argsstring></argsstring>
        <name>BoxCommHelper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="35" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1af8e7e62df7969809e9bec423bf8c7dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 lbound</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="690" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1453" bodyend="1462"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a512e6dee7ae8e830d3f9903f3eb7c82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 ubound</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="691" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1466" bodyend="1475"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1abe7c82dcf78b535f28d0e87fb767b3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 begin</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="692" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1479" bodyend="1488"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1a0f6b7871800673d9da9702d13db0c0f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 end</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="693" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1492" bodyend="1501"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1Box_1ac0a507b4077b695ead830944d77bbf01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> friend <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE friend AMREX_FORCE_INLINE Dim3 length</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="694" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1505" bodyend="1517"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Box_1a76606b6a8d3f64f887303eddf2025e28" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::Box::smallend</definition>
        <argsstring></argsstring>
        <name>smallend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="697" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Box_1af0f4c5e74fbdddc5f71ceade8ccc05b7" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::Box::bigend</definition>
        <argsstring></argsstring>
        <name>bigend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="698" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Box_1a30cb1cd364f96e320bb711365df849e1" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::Box::btype</definition>
        <argsstring></argsstring>
        <name>btype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="699" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="699" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Box_1a515c76451d7eb3ee77da1844bb1e5fe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Box::Box</definition>
        <argsstring>()</argsstring>
        <name>Box</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad4cf9c26294a5679b949f466f6b96ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big)</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <briefdescription>
<para>Construct cell-centered type <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a995302db3fa3910f2456c803bffe4a69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const int *vec_len)</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>vec_len</declname>
        </param>
        <briefdescription>
<para>Construct box with specified lengths. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a59f041483ccdeb190183e230732bd82d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big, const IntVect &amp;typ)</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with given type. small and big are expected to be consistent with given type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1acb31c0207ae085f31ca7fa22ae4066b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Box::Box</definition>
        <argsstring>(const IntVect &amp;small, const IntVect &amp;big, IndexType t)</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>small</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>big</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Construct dimension specific Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3d158e349af4334aa02f2dfc4fc87d0d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::Box::smallEnd</definition>
        <argsstring>() const &amp;</argsstring>
        <name>smallEnd</name>
        <briefdescription>
<para>Get the smallend of the box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ade1c1c0b3691c1fb0b174f01c6e44684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::Box::smallEnd</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>smallEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a29c29218b862427cf154d306207d0300" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::smallEnd</definition>
        <argsstring>(int dir) const &amp;</argsstring>
        <name>smallEnd</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the low end in the given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad0a914fc5c880221f418c96fee5a3586" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const IntVect&amp; amrex::Box::bigEnd</definition>
        <argsstring>() const &amp;</argsstring>
        <name>bigEnd</name>
        <briefdescription>
<para>Get the bigend. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aad5f3bf1b91e4a0d69d6869f5012b1a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::Box::bigEnd</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>bigEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab8854f7268adefbc3ecc333368f5e1e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::bigEnd</definition>
        <argsstring>(int dir) const </argsstring>
        <name>bigEnd</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate of the high end in the given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab8f76325ef1736b2c13bbd89c4a5f7dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IndexType amrex::Box::ixType</definition>
        <argsstring>() const </argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Returns the indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a032c729a61fe15834b04558d428b09f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
<para>Returns the indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a3c33b61bc7a5fe8b69452287db31be05" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafccce" kindref="member">IndexType::CellIndex</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IndexType::CellIndex amrex::Box::type</definition>
        <argsstring>(int dir) const </argsstring>
        <name>type</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the indexing type in the specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aa2adfa11a616ffe75fbb7981b164d1aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a57c44fd57a2dd7e00171a2ed3c50727e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE IntVect amrex::Box::length</definition>
        <argsstring>() const </argsstring>
        <name>length</name>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae61f808e31ab6aa88c8d13bbaf3b83ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::length</definition>
        <argsstring>(int dir) const </argsstring>
        <name>length</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Return the length of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="140" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a70c1661951706b69b0854e120cd71ded" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::length3d</definition>
        <argsstring>() const </argsstring>
        <name>length3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="143" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a1790ff90d391364b968803806ccba123" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::loVect3d</definition>
        <argsstring>() const </argsstring>
        <name>loVect3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="154" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a17d4bb21c82f0d20fbb351a46efcd7d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt;int,3&gt; amrex::Box::hiVect3d</definition>
        <argsstring>() const </argsstring>
        <name>hiVect3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="165" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1adb5a060e446eb4fe2b24326427b8e7e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::loVect</definition>
        <argsstring>() const &amp;</argsstring>
        <name>loVect</name>
        <briefdescription>
<para>Returns a constant pointer the array of low end coordinates. Useful for calls to FORTRAN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad69c0f3432a2fb8366038b84e579ea23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::loVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>loVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aaa5fa3095c1eda1d2df0f6ad840f026d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::hiVect</definition>
        <argsstring>() const &amp;</argsstring>
        <name>hiVect</name>
        <briefdescription>
<para>Returns a constant pointer the array of high end coordinates. Useful for calls to FORTRAN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a61a33b8b8393690b194bc060b9c89823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE const int* amrex::Box::hiVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>hiVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad73ef5855976dad1fa397fbb7407a326" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::operator[]</definition>
        <argsstring>(Orientation face) const </argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Returns the coordinate normal to given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad38834d5022fff2734ca32db9fc7294a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Checks if it is an empty box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a141a1ee33371bf958e94a863abbb2197" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>Checks if it is a proper <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (including a valid type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="199" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0cedcea7d70922edfd7e28262e5fa76e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::contains</definition>
        <argsstring>(const IntVect &amp;p) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a1b0a7e3f8af02e2087a1c2806d127b3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::contains</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1afc13c6ab05ac8a1516e6eff40036edd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::strictly_contains</definition>
        <argsstring>(const IntVect &amp;p) const </argsstring>
        <name>strictly_contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1afd4700b326a9f80fc1d4575601fa550e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::strictly_contains</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>strictly_contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if argument is strictly contained within <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a9ac617793203de93fa081f741a626d6a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::intersects</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have non-null intersections. It is an error if the Boxes have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a2cdf20efd6cff204fee8e633e0f41b19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::sameSize</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>sameSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true is Boxes same size, ie translates of each other,. It is an error if they have different types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a7482d173cce099fd6108f6776c586df9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::sameType</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>sameType</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes have same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a67d404a8ad8a68259aad47817ec703a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator==</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes are identical (including type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="254" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a04c523edfe783db8f085c6d9feff619e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator!=</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns true if Boxes differ (including type). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="258" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a1a178b37ec12901727fb0f7b4a3d57f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&lt;</definition>
        <argsstring>(const Box &amp;rhs) const </argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="261" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a94e02171de92d5291e8e77a83c64efda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&lt;=</definition>
        <argsstring>(const Box &amp;rhs) const </argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a1eb53561930373cb14a7c56e44ab6d85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&gt;</definition>
        <argsstring>(const Box &amp;rhs) const </argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="273" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a037163a1fa2a85ec22d5eac4e3cb5ce2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::operator&gt;=</definition>
        <argsstring>(const Box &amp;rhs) const </argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="277" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab7940d7b8bafe426fc89a7909f62d4ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::cellCentered</definition>
        <argsstring>() const </argsstring>
        <name>cellCentered</name>
        <briefdescription>
<para>Returns true if <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is cell-centered in all indexing directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a4841f399ff456e0dbc5f83372587f1b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::Box::numPts</definition>
        <argsstring>() const </argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>, else abort()s if the number cannot be represented in a long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="290" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae6b4a50b13d69adca501509a71a69469" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE double amrex::Box::d_numPts</definition>
        <argsstring>() const </argsstring>
        <name>d_numPts</name>
        <briefdescription>
<para>Returns the number of points contained in the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. This is intended for use only in diagnostic messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad0445d29c5299bd1698cda5155276436" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::Box::volume</definition>
        <argsstring>() const </argsstring>
        <name>volume</name>
        <briefdescription>
<para>Return the volume, in indexing space, of region enclosed by this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. This is identical to <ref refid="classamrex_1_1Box_1a4841f399ff456e0dbc5f83372587f1b2" kindref="member">numPts()</ref> for CELL centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>; otherwise, <ref refid="classamrex_1_1Box_1a4841f399ff456e0dbc5f83372587f1b2" kindref="member">numPts()</ref> &gt; <ref refid="classamrex_1_1Box_1ad0445d29c5299bd1698cda5155276436" kindref="member">volume()</ref>. <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">Abort()</ref>s if the number cannot be represented in a long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="314" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae65831291376c8d1322e585140353fd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::longside</definition>
        <argsstring>(int &amp;dir) const </argsstring>
        <name>longside</name>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of longest side. dir is modified to give direction with longest side: 0...SPACEDIM-1. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="325" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a280232cde9dcb31e9933bc9557f42c00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::longside</definition>
        <argsstring>() const </argsstring>
        <name>longside</name>
        <briefdescription>
<para>Returns length of longest side. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="341" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="341" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a66fd40fc148c3556a8d8be912c688703" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::shortside</definition>
        <argsstring>(int &amp;dir) const </argsstring>
        <name>shortside</name>
        <param>
          <type>int &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of shortest side. dir is modified to give direction with shortest side: 0...SPACEDIM-1. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="351" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="351" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aea911256758a23f4dcab053258c1a7b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Box::shortside</definition>
        <argsstring>() const </argsstring>
        <name>shortside</name>
        <briefdescription>
<para>Returns length of shortest side. Ignores type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="367" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aa7506798870246e7c578bb761144e018" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE long amrex::Box::index</definition>
        <argsstring>(const IntVect &amp;v) const </argsstring>
        <name>index</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns offset of point from smallend; i.e. index(smallend) -&gt; 0, bigend would return <ref refid="classamrex_1_1Box_1a4841f399ff456e0dbc5f83372587f1b2" kindref="member">numPts()</ref>-1. Is used in accessing <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="378" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="835" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a17136263671f0b7480e7b98eb0856252" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::Box::atOffset</definition>
        <argsstring>(long offset) const </argsstring>
        <name>atOffset</name>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Given the offset, compute <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="850" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8b537ca3dde9d4aaae6e5ff188a58d9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; int, 3 &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE GpuArray&lt; int, 3 &gt; amrex::Box::atOffset3d</definition>
        <argsstring>(long offset) const </argsstring>
        <name>atOffset3d</name>
        <param>
          <type>long</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="865" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ac45c93bf4185e2c22ed9107d798f2031" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setSmall</definition>
        <argsstring>(const IntVect &amp;sm)</argsstring>
        <name>setSmall</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>sm</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="389" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae46953f51a3bf841aca68f5bc4d7c709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setSmall</definition>
        <argsstring>(int dir, int sm_index)</argsstring>
        <name>setSmall</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <briefdescription>
<para>Redefine the small end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="393" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a69adb646926f5d85b5741543a2d7ab96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setBig</definition>
        <argsstring>(const IntVect &amp;bg)</argsstring>
        <name>setBig</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>bg</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a81b0a5786fee6074dd72137dbbd3783f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setBig</definition>
        <argsstring>(int dir, int bg_index)</argsstring>
        <name>setBig</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bg_index</declname>
        </param>
        <briefdescription>
<para>Redefine the big end of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="401" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1abcadacb1df3752cf9234701a15376189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::setRange</definition>
        <argsstring>(int dir, int sm_index, int n_cells=1)</argsstring>
        <name>setRange</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sm_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cells</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Set the entire range in a given direction, starting at sm_index with length n_cells. NOTE: This will yield an illegal <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> if n_cells &lt;= 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="880" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a01bfd9e88c202cb907354cdec26547eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::setType</definition>
        <argsstring>(const IndexType &amp;t)</argsstring>
        <name>setType</name>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set indexing type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a021d534562fddc760c6d6fd08cee84ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Shift this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> nzones indexing positions in coordinate direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="419" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="419" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0c5a821ca7c6eea7c53164fb3e0d7b76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::shift</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shift(0,iv[0]).shift(1,iv[1]) .... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a6f7988d3c35328cdf2044bd01f397f6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::shiftHalf</definition>
        <argsstring>(int dir, int num_halfs)</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_halfs</declname>
        </param>
        <briefdescription>
<para>This member shifts the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by &quot;half&quot; indicies, thereby converting the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from type CELL to NODE and visa-versa. b.shiftHalf(0,1) shifts b to the right by 1/2 cells. b.shiftHalf(1,-3) shifts b in the -j direction by 3/2 cells. NOTE: If num_halfs is EVEN the shift is num_halfs/2 full zones and hence will not change the type. This is: b.shifthalf(4) == b.shift(2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="435" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1002" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1affa5d5c84a6a3f3319de96c6bafbd242" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::shiftHalf</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shiftHalf</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to b.shiftHalf(0,iv[0]).shiftHalf(1,iv[1]) ... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="439" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1025" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a759548d5536659c53a9bdbe3f3ccbf3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::convert</definition>
        <argsstring>(IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="449" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="763" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a47fe14ef7cebf2c7f5ef06fd017875a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::convert</definition>
        <argsstring>(const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> from the current type into the argument type. This may change the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> coordinates: type CELL -&gt; NODE : increase coordinate by one on high end type NODE -&gt; CELL : reduce coordinate by one on high end other type mappings make no change. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="751" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a60d48d2b3330de018c47607b4f10b166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::surroundingNodes</definition>
        <argsstring>()</argsstring>
        <name>surroundingNodes</name>
        <briefdescription>
<para>Convert to NODE type in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="463" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="795" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad3ce9122edca1e77c1d61fdada5f4c7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::surroundingNodes</definition>
        <argsstring>(int dir)</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to NODE type in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="467" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="779" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a83ffaf1446f40151c21652d7394d791e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::enclosedCells</definition>
        <argsstring>()</argsstring>
        <name>enclosedCells</name>
        <briefdescription>
<para>Convert to CELL type in all directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="471" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="823" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a95bb29c6fa93e4e6a96d82e5cf0c39e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::enclosedCells</definition>
        <argsstring>(int dir)</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Convert to CELL type in given direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="807" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1aa1ef3f63e8ad6aed6660a65d4f36134b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator&amp;</definition>
        <argsstring>(const Box &amp;rhs) const </argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that is intersection of this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and argument. The Boxes MUST be of same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="482" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="482" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a68f83e60dd9b110744354bc0e5ab838e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator&amp;=</definition>
        <argsstring>(const Box &amp;rhs)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Intersect this <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with its argument. The Boxes MUST be of the same type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="486" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="486" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ac072472c78205d4b29a5c01f6755a28c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Box::linearOut</definition>
        <argsstring>(void *a_buffer) const </argsstring>
        <name>linearOut</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="502" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="891" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ae89644ece3ff4c7e38131871d2cfa676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Box::linearIn</definition>
        <argsstring>(void *a_buffer)</argsstring>
        <name>linearIn</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="503" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="904" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad5af88162244512893d7795e8bc45349" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::minBox</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>minBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to that of the minimum <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> containing both the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the argument. Both Boxes must have identical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="511" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="511" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a47a87d99f56df7b1ade62c8949c2cb64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator+=</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="521" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a65d425309478ae10136a8bdc01a2265e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator+</definition>
        <argsstring>(const IntVect &amp;v) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="525" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="525" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a052fe72b9d3f797e8eb8d12975814125" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::operator-=</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="529" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="529" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ad7a23134b8e77665a8bf10ae9a4e8718" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::operator-</definition>
        <argsstring>(const IntVect &amp;v) const </argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Shift <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (relative) by given <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="533" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="533" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a9765a658c92427604613c97479549884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::Box::chop</definition>
        <argsstring>(int dir, int chop_pnt)</argsstring>
        <name>chop</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chop_pnt</declname>
        </param>
        <briefdescription>
<para>Chop the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> at the chop_pnt in the dir direction returns one <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>, modifies the object <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The union of the two is the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. The modified <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is the low end, the returned <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is the high end. If type(dir) = CELL, the Boxes are disjoint with the chop_pnt included in the high end (new <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>). It is an ERROR if chop_pnt is the low end of the orig <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. If type(dir) = NODE, the chop_pnt is included in both Boxes but is the only point in common. It is also an error if the chop_pnt is an end node of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="548" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="966" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a13dc7d374c4b3eb69f589840fa6b13ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(int i)</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="555" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="555" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a351383dfae0b74e4be70266311b728c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(const IntVect &amp;v)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in each direction by specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="559" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a138fab350cc8738aebbabc336f058811" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the low and high end by n_cell cells in direction idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="566" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="566" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a40fbf41ad4eb4c488e7923b0b4637723" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::growLo</definition>
        <argsstring>(int idir, int n_cell=1)</argsstring>
        <name>growLo</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the low end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="573" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a806915aba04e0639d601650d05ad2333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::growHi</definition>
        <argsstring>(int idir, int n_cell=1)</argsstring>
        <name>growHi</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the high end by n_cell cells in direction idir. NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="581" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="581" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a59c8b1a51069cb634e5aa5fa8e8b7054" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::grow</definition>
        <argsstring>(Orientation face, int n_cell=1)</argsstring>
        <name>grow</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Grow in the direction of the given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="585" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="585" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1acb4cd6280660ee541d9ced6efcc9b0e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::refine</definition>
        <argsstring>(int ref_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="602" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="602" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a5d9e2915bdb1012338cba12c78e36f6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::refine</definition>
        <argsstring>(const IntVect &amp;ref_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="614" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="705" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a70035293392a5fa93b85103cd1250ab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box&amp; amrex::Box::coarsen</definition>
        <argsstring>(int ref_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="626" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="626" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a7506ca997c9aa4b8d78282375feefd56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE Box &amp; amrex::Box::coarsen</definition>
        <argsstring>(const IntVect &amp;ref_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="640" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="721" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a0699e79d0f9069f43a5aa5386a8250de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Box::next</definition>
        <argsstring>(IntVect &amp;) const </argsstring>
        <name>next</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <defname>p</defname>
        </param>
        <briefdescription>
<para>Step through the rectangle. It is a runtime error to give a point not inside rectangle. Iteration may not be efficient. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="647" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="920" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1afb58fc777f3d7034941e9deaa68b0857" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::isSquare</definition>
        <argsstring>() const </argsstring>
        <name>isSquare</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="660" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="945" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a8c6796699a2c48b4a673fd99bddbb9cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::coarsenable</definition>
        <argsstring>(int refrat, int min_width=1) const </argsstring>
        <name>coarsenable</name>
        <param>
          <type>int</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="663" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="663" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1a9527839307737015363b3917aed6e861" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::Box::coarsenable</definition>
        <argsstring>(const IntVect &amp;refrat, int min_width=1) const </argsstring>
        <name>coarsenable</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refrat</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="668" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="668" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ab9002120b75895970884d153853e3b06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Box::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="681" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="681" bodyend="688"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Box_1a1a77d0389c40ad14489532a5fffc701e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t amrex::Box::linearSize</definition>
        <argsstring>()</argsstring>
        <name>linearSize</name>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="495" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Box_1ac0e6a9485d6d109cd1afa4ad8a711af4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>static AMREX_GPU_HOST_DEVICE Box amrex::Box::TheUnitBox</definition>
        <argsstring>()</argsstring>
        <name>TheUnitBox</name>
        <briefdescription>
<para>This static member function returns a constant reference to an object of type <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> representing the unit box in AMREX_SPACEDIM-dimensional space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="655" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="655" bodyend="657"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Rectangular Domain on an Integer Lattice. </para>    </briefdescription>
    <detaileddescription>
<para>A <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is an abstraction for defining discrete regions of SPACEDIM indexing space. Boxes have an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>, which defines <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref> or <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref> based points for each direction and a low and high INTVECT which defines the lower and upper corners of the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. Boxes can exist in positive and negative indexing space.</para><para><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is a dimension dependent class, so SPACEDIM must be defined as either 1, 2, or 3 when compiling. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="792">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="792" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="791">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="792" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="793" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="793">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="33" bodyend="700"/>
    <listofallmembers>
      <member refid="classamrex_1_1Box_1a17136263671f0b7480e7b98eb0856252" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>atOffset</name></member>
      <member refid="classamrex_1_1Box_1a8b537ca3dde9d4aaae6e5ff188a58d9c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>atOffset3d</name></member>
      <member refid="classamrex_1_1Box_1abe7c82dcf78b535f28d0e87fb767b3c6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>begin</name></member>
      <member refid="classamrex_1_1Box_1ad0a914fc5c880221f418c96fee5a3586" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1aad5f3bf1b91e4a0d69d6869f5012b1a8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1ab8854f7268adefbc3ecc333368f5e1e8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1Box_1af0f4c5e74fbdddc5f71ceade8ccc05b7" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>bigend</name></member>
      <member refid="classamrex_1_1Box_1a515c76451d7eb3ee77da1844bb1e5fe1" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1ad4cf9c26294a5679b949f466f6b96ede" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1a995302db3fa3910f2456c803bffe4a69" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1a59f041483ccdeb190183e230732bd82d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1acb31c0207ae085f31ca7fa22ae4066b4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>Box</name></member>
      <member refid="classamrex_1_1Box_1af5c898c7b3635a504124819032a025fe" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>BoxCommHelper</name></member>
      <member refid="classamrex_1_1Box_1a30cb1cd364f96e320bb711365df849e1" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>btype</name></member>
      <member refid="classamrex_1_1Box_1ab7940d7b8bafe426fc89a7909f62d4ec" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>cellCentered</name></member>
      <member refid="classamrex_1_1Box_1a9765a658c92427604613c97479549884" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>chop</name></member>
      <member refid="classamrex_1_1Box_1a70035293392a5fa93b85103cd1250ab7" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1Box_1a7506ca997c9aa4b8d78282375feefd56" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1Box_1a8c6796699a2c48b4a673fd99bddbb9cf" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1Box_1a9527839307737015363b3917aed6e861" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1Box_1a0cedcea7d70922edfd7e28262e5fa76e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>contains</name></member>
      <member refid="classamrex_1_1Box_1a1b0a7e3f8af02e2087a1c2806d127b3a" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>contains</name></member>
      <member refid="classamrex_1_1Box_1a759548d5536659c53a9bdbe3f3ccbf3b" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>convert</name></member>
      <member refid="classamrex_1_1Box_1a47fe14ef7cebf2c7f5ef06fd017875a6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>convert</name></member>
      <member refid="classamrex_1_1Box_1ae6b4a50b13d69adca501509a71a69469" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1Box_1a83ffaf1446f40151c21652d7394d791e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1Box_1a95bb29c6fa93e4e6a96d82e5cf0c39e3" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1Box_1a0f6b7871800673d9da9702d13db0c0f1" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>end</name></member>
      <member refid="classamrex_1_1Box_1a13dc7d374c4b3eb69f589840fa6b13ff" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a351383dfae0b74e4be70266311b728c7" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a138fab350cc8738aebbabc336f058811" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a59c8b1a51069cb634e5aa5fa8e8b7054" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>grow</name></member>
      <member refid="classamrex_1_1Box_1a806915aba04e0639d601650d05ad2333" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>growHi</name></member>
      <member refid="classamrex_1_1Box_1a40fbf41ad4eb4c488e7923b0b4637723" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>growLo</name></member>
      <member refid="classamrex_1_1Box_1aaa5fa3095c1eda1d2df0f6ad840f026d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1Box_1a61a33b8b8393690b194bc060b9c89823" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1Box_1a17d4bb21c82f0d20fbb351a46efcd7d2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>hiVect3d</name></member>
      <member refid="classamrex_1_1Box_1aa7506798870246e7c578bb761144e018" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>index</name></member>
      <member refid="classamrex_1_1Box_1a9ac617793203de93fa081f741a626d6a" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>intersects</name></member>
      <member refid="classamrex_1_1Box_1ad38834d5022fff2734ca32db9fc7294a" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>isEmpty</name></member>
      <member refid="classamrex_1_1Box_1afb58fc777f3d7034941e9deaa68b0857" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>isSquare</name></member>
      <member refid="classamrex_1_1Box_1ab8f76325ef1736b2c13bbd89c4a5f7dd" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ixType</name></member>
      <member refid="classamrex_1_1Box_1af8e7e62df7969809e9bec423bf8c7dde" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>lbound</name></member>
      <member refid="classamrex_1_1Box_1a57c44fd57a2dd7e00171a2ed3c50727e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1ae61f808e31ab6aa88c8d13bbaf3b83ab" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1ac0a507b4077b695ead830944d77bbf01" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length</name></member>
      <member refid="classamrex_1_1Box_1a70c1661951706b69b0854e120cd71ded" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>length3d</name></member>
      <member refid="classamrex_1_1Box_1ae89644ece3ff4c7e38131871d2cfa676" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearIn</name></member>
      <member refid="classamrex_1_1Box_1ac072472c78205d4b29a5c01f6755a28c" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearOut</name></member>
      <member refid="classamrex_1_1Box_1a1a77d0389c40ad14489532a5fffc701e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>linearSize</name></member>
      <member refid="classamrex_1_1Box_1ae65831291376c8d1322e585140353fd9" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>longside</name></member>
      <member refid="classamrex_1_1Box_1a280232cde9dcb31e9933bc9557f42c00" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>longside</name></member>
      <member refid="classamrex_1_1Box_1adb5a060e446eb4fe2b24326427b8e7e9" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Box_1ad69c0f3432a2fb8366038b84e579ea23" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect</name></member>
      <member refid="classamrex_1_1Box_1a1790ff90d391364b968803806ccba123" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>loVect3d</name></member>
      <member refid="classamrex_1_1Box_1ad5af88162244512893d7795e8bc45349" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>minBox</name></member>
      <member refid="classamrex_1_1Box_1a0699e79d0f9069f43a5aa5386a8250de" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>next</name></member>
      <member refid="classamrex_1_1Box_1ab9002120b75895970884d153853e3b06" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>normalize</name></member>
      <member refid="classamrex_1_1Box_1a4841f399ff456e0dbc5f83372587f1b2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>numPts</name></member>
      <member refid="classamrex_1_1Box_1a141a1ee33371bf958e94a863abbb2197" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ok</name></member>
      <member refid="classamrex_1_1Box_1a04c523edfe783db8f085c6d9feff619e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1Box_1aa1ef3f63e8ad6aed6660a65d4f36134b" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&amp;</name></member>
      <member refid="classamrex_1_1Box_1a68f83e60dd9b110744354bc0e5ab838e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&amp;=</name></member>
      <member refid="classamrex_1_1Box_1a65d425309478ae10136a8bdc01a2265e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator+</name></member>
      <member refid="classamrex_1_1Box_1a47a87d99f56df7b1ade62c8949c2cb64" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1Box_1ad7a23134b8e77665a8bf10ae9a4e8718" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator-</name></member>
      <member refid="classamrex_1_1Box_1a052fe72b9d3f797e8eb8d12975814125" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1Box_1a1a178b37ec12901727fb0f7b4a3d57f1" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1Box_1a94e02171de92d5291e8e77a83c64efda" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1Box_1a67d404a8ad8a68259aad47817ec703a6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator==</name></member>
      <member refid="classamrex_1_1Box_1a1eb53561930373cb14a7c56e44ab6d85" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1Box_1a037163a1fa2a85ec22d5eac4e3cb5ce2" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1Box_1ad73ef5855976dad1fa397fbb7407a326" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Box_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1Box_1acb4cd6280660ee541d9ced6efcc9b0e8" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>refine</name></member>
      <member refid="classamrex_1_1Box_1a5d9e2915bdb1012338cba12c78e36f6f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>refine</name></member>
      <member refid="classamrex_1_1Box_1a2cdf20efd6cff204fee8e633e0f41b19" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>sameSize</name></member>
      <member refid="classamrex_1_1Box_1a7482d173cce099fd6108f6776c586df9" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>sameType</name></member>
      <member refid="classamrex_1_1Box_1a69adb646926f5d85b5741543a2d7ab96" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setBig</name></member>
      <member refid="classamrex_1_1Box_1a81b0a5786fee6074dd72137dbbd3783f" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setBig</name></member>
      <member refid="classamrex_1_1Box_1abcadacb1df3752cf9234701a15376189" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setRange</name></member>
      <member refid="classamrex_1_1Box_1ac45c93bf4185e2c22ed9107d798f2031" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1Box_1ae46953f51a3bf841aca68f5bc4d7c709" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setSmall</name></member>
      <member refid="classamrex_1_1Box_1a01bfd9e88c202cb907354cdec26547eb" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>setType</name></member>
      <member refid="classamrex_1_1Box_1a021d534562fddc760c6d6fd08cee84ec" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shift</name></member>
      <member refid="classamrex_1_1Box_1a0c5a821ca7c6eea7c53164fb3e0d7b76" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shift</name></member>
      <member refid="classamrex_1_1Box_1a6f7988d3c35328cdf2044bd01f397f6e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1Box_1affa5d5c84a6a3f3319de96c6bafbd242" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1Box_1a66fd40fc148c3556a8d8be912c688703" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shortside</name></member>
      <member refid="classamrex_1_1Box_1aea911256758a23f4dcab053258c1a7b4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>shortside</name></member>
      <member refid="classamrex_1_1Box_1aa2adfa11a616ffe75fbb7981b164d1aa" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>size</name></member>
      <member refid="classamrex_1_1Box_1a3d158e349af4334aa02f2dfc4fc87d0d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1ade1c1c0b3691c1fb0b174f01c6e44684" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1a29c29218b862427cf154d306207d0300" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1Box_1a76606b6a8d3f64f887303eddf2025e28" prot="private" virt="non-virtual"><scope>amrex::Box</scope><name>smallend</name></member>
      <member refid="classamrex_1_1Box_1afc13c6ab05ac8a1516e6eff40036edd6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1Box_1afd4700b326a9f80fc1d4575601fa550e" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>strictly_contains</name></member>
      <member refid="classamrex_1_1Box_1a60d48d2b3330de018c47607b4f10b166" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1Box_1ad3ce9122edca1e77c1d61fdada5f4c7b" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1Box_1ac0e6a9485d6d109cd1afa4ad8a711af4" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>TheUnitBox</name></member>
      <member refid="classamrex_1_1Box_1a032c729a61fe15834b04558d428b09f6" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>type</name></member>
      <member refid="classamrex_1_1Box_1a3c33b61bc7a5fe8b69452287db31be05" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>type</name></member>
      <member refid="classamrex_1_1Box_1a512e6dee7ae8e830d3f9903f3eb7c82d" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>ubound</name></member>
      <member refid="classamrex_1_1Box_1ad0445d29c5299bd1698cda5155276436" prot="public" virt="non-virtual"><scope>amrex::Box</scope><name>volume</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
