<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1RealBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealBox</compoundname>
    <includes refid="AMReX__RealBox_8H" local="no">AMReX_RealBox.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealBox_1ae4725fce5cb9ab4e306e9cb7a9c37f3c" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xlo[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>xlo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealBox_1af7c8319947a6017a36027bc15c3ad065" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xhi[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>xhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1RealBox_1aa19b9106c50a3f9adb5d901186230aed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::RealBox::RealBox</definition>
        <argsstring>()</argsstring>
        <name>RealBox</name>
        <briefdescription>
<para>The default constructor. Builds invalid <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a5492a299e6c2e2b4702263ff8877d648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealBox::RealBox</definition>
        <argsstring>(const Real *a_lo, const Real *a_hi)</argsstring>
        <name>RealBox</name>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Construct region given diagonal points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="27" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1abed0a3e1d2556869570e069422ac88d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;a_lo, const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;a_hi)</argsstring>
        <name>RealBox</name>
        <param>
          <type>const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a374719494198e4c9d399ddb499386c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const Box &amp;bx, const Real *dx, const Real *base)</argsstring>
        <name>RealBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Construct region given index box, cell spacing and physical location of index (0,0,0). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="9" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a8f0b842bb4cc8fad84c0ebe540f14846" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealBox::RealBox</definition>
        <argsstring>(AMREX_D_DECL(Real x0, Real y0, Real z0), AMREX_D_DECL(Real x1, Real y1, Real z1))</argsstring>
        <name>RealBox</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(Real x0, Real y0, Real z0)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(Real x1, Real y1, Real z1)</type>
        </param>
        <briefdescription>
<para>Explicit dimension specific constructors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a666a129b25cb126d04116c78cc1a151b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::lo</definition>
        <argsstring>() const &amp;</argsstring>
        <name>lo</name>
        <briefdescription>
<para>Returns lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad9b9e6ddae390107b6376a814d8fee68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::lo</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a7368e5340557dce869e600e61098571a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::hi</definition>
        <argsstring>() const &amp;</argsstring>
        <name>hi</name>
        <briefdescription>
<para>Returns hide side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a1524f482556a5a51c24672e857afe4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::hi</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1afb4094b81b38c7f01d90babab084e0a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::lo</definition>
        <argsstring>(int dir) const </argsstring>
        <name>lo</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a98360e44960dd0d18c6ed57021bc966f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::hi</definition>
        <argsstring>(int dir) const </argsstring>
        <name>hi</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns hi side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac1537229e4341b9258c5b5f643a41597" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::length</definition>
        <argsstring>(int dir) const </argsstring>
        <name>length</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a6052fac9bf06e28ed582f406f7c0bce8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Real *a_lo)</argsstring>
        <name>setLo</name>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1acc7217375bb895c6d6a4fde242601654" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_lo)</argsstring>
        <name>setLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a19d75ca2a6ec4bb4467edba92d980403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(int dir, Real a_lo)</argsstring>
        <name>setLo</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ab9fcd9071a83335b66d4dce5b610f68f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Real *a_hi)</argsstring>
        <name>setHi</name>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac93ea11e4bdfca3d01fde34f20fe1552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_hi)</argsstring>
        <name>setHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a9475c45126e80c166a425b2e935e3477" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(int dir, Real a_hi)</argsstring>
        <name>setHi</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a3ab5b6e079c1fc12363c23e221b624e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>Is the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> OK; i.e. does it have non-negative volume? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aa585d37d4c27164a323d8e595073bd65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::volume</definition>
        <argsstring>() const </argsstring>
        <name>volume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the volume of the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. If this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is invalid, it&apos;s volume is considered to be zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac787f56c73dc5cb19deb0b031a5ff8ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::contains</definition>
        <argsstring>(const Real *point, Real eps=0.0) const </argsstring>
        <name>contains</name>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified point contained in the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a96fd4f100c941b923679edc08bf07c0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealBox::contains</definition>
        <argsstring>(const RealVect &amp;rv, Real eps=0.0) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad78dc1c3678aeb01e1dd1d2a0000dacb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::contains</definition>
        <argsstring>(const RealBox &amp;rb, Real eps=0.0) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> contained in this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a46310c3d5ab9f7917fd8b8874e54d163" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::intersects</definition>
        <argsstring>(const RealBox &amp;bx) const </argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Does the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> intersect with this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="109" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with real dimensions. A <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is OK iff volume &gt;= 0. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4840">
        <label>Real</label>
      </node>
      <node id="4839">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="4840" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.H" bodystart="18" bodyend="121"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealBox_1ac787f56c73dc5cb19deb0b031a5ff8ed" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a96fd4f100c941b923679edc08bf07c0b" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1ad78dc1c3678aeb01e1dd1d2a0000dacb" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a7368e5340557dce869e600e61098571a" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a1524f482556a5a51c24672e857afe4a4" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a98360e44960dd0d18c6ed57021bc966f" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a46310c3d5ab9f7917fd8b8874e54d163" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>intersects</name></member>
      <member refid="classamrex_1_1RealBox_1ac1537229e4341b9258c5b5f643a41597" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>length</name></member>
      <member refid="classamrex_1_1RealBox_1a666a129b25cb126d04116c78cc1a151b" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1ad9b9e6ddae390107b6376a814d8fee68" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1afb4094b81b38c7f01d90babab084e0a5" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1a3ab5b6e079c1fc12363c23e221b624e5" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>ok</name></member>
      <member refid="classamrex_1_1RealBox_1aa19b9106c50a3f9adb5d901186230aed" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a5492a299e6c2e2b4702263ff8877d648" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1abed0a3e1d2556869570e069422ac88d3" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a374719494198e4c9d399ddb499386c2a" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a8f0b842bb4cc8fad84c0ebe540f14846" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1ab9fcd9071a83335b66d4dce5b610f68f" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1ac93ea11e4bdfca3d01fde34f20fe1552" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a9475c45126e80c166a425b2e935e3477" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a6052fac9bf06e28ed582f406f7c0bce8" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1acc7217375bb895c6d6a4fde242601654" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1a19d75ca2a6ec4bb4467edba92d980403" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1aa585d37d4c27164a323d8e595073bd65" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>volume</name></member>
      <member refid="classamrex_1_1RealBox_1af7c8319947a6017a36027bc15c3ad065" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xhi</name></member>
      <member refid="classamrex_1_1RealBox_1ae4725fce5cb9ab4e306e9cb7a9c37f3c" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
