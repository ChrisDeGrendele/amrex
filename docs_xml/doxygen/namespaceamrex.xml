<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex" kind="namespace" language="C++">
    <compoundname>amrex</compoundname>
    <innerclass refid="classamrex_1_1ABec2" prot="public">amrex::ABec2</innerclass>
    <innerclass refid="classamrex_1_1ABec4" prot="public">amrex::ABec4</innerclass>
    <innerclass refid="classamrex_1_1ABecLaplacian" prot="public">amrex::ABecLaplacian</innerclass>
    <innerclass refid="classamrex_1_1AllPrint" prot="public">amrex::AllPrint</innerclass>
    <innerclass refid="classamrex_1_1AllPrintToFile" prot="public">amrex::AllPrintToFile</innerclass>
    <innerclass refid="classamrex_1_1Amr" prot="public">amrex::Amr</innerclass>
    <innerclass refid="classamrex_1_1AmrCore" prot="public">amrex::AmrCore</innerclass>
    <innerclass refid="classamrex_1_1AmrData" prot="public">amrex::AmrData</innerclass>
    <innerclass refid="classamrex_1_1AmrDataAdaptor" prot="public">amrex::AmrDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AmrInSituBridge" prot="public">amrex::AmrInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1AmrLevel" prot="public">amrex::AmrLevel</innerclass>
    <innerclass refid="classamrex_1_1AmrMesh" prot="public">amrex::AmrMesh</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshDataAdaptor" prot="public">amrex::AmrMeshDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshInSituBridge" prot="public">amrex::AmrMeshInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1AmrParGDB" prot="public">amrex::AmrParGDB</innerclass>
    <innerclass refid="classamrex_1_1AmrParticleContainer" prot="public">amrex::AmrParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1AmrTracerParticleContainer" prot="public">amrex::AmrTracerParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1Arena" prot="public">amrex::Arena</innerclass>
    <innerclass refid="structamrex_1_1Array4" prot="public">amrex::Array4</innerclass>
    <innerclass refid="classamrex_1_1ArrayOfStructs" prot="public">amrex::ArrayOfStructs</innerclass>
    <innerclass refid="classamrex_1_1BArena" prot="public">amrex::BArena</innerclass>
    <innerclass refid="classamrex_1_1BaseFab" prot="public">amrex::BaseFab</innerclass>
    <innerclass refid="structamrex_1_1BaseFabData" prot="public">amrex::BaseFabData</innerclass>
    <innerclass refid="classamrex_1_1BaseUmap" prot="public">amrex::BaseUmap</innerclass>
    <innerclass refid="classamrex_1_1BCRec" prot="public">amrex::BCRec</innerclass>
    <innerclass refid="structamrex_1_1BLBackTrace" prot="public">amrex::BLBackTrace</innerclass>
    <innerclass refid="classamrex_1_1BLProfiler" prot="public">amrex::BLProfiler</innerclass>
    <innerclass refid="classamrex_1_1BndryData" prot="public">amrex::BndryData</innerclass>
    <innerclass refid="classamrex_1_1BndryFuncArray" prot="public">amrex::BndryFuncArray</innerclass>
    <innerclass refid="classamrex_1_1BndryRegister" prot="public">amrex::BndryRegister</innerclass>
    <innerclass refid="classamrex_1_1BoundCond" prot="public">amrex::BoundCond</innerclass>
    <innerclass refid="classamrex_1_1Box" prot="public">amrex::Box</innerclass>
    <innerclass refid="classamrex_1_1BoxArray" prot="public">amrex::BoxArray</innerclass>
    <innerclass refid="classamrex_1_1BoxCommHelper" prot="public">amrex::BoxCommHelper</innerclass>
    <innerclass refid="classamrex_1_1BoxConverter" prot="public">amrex::BoxConverter</innerclass>
    <innerclass refid="classamrex_1_1BoxDomain" prot="public">amrex::BoxDomain</innerclass>
    <innerclass refid="classamrex_1_1BoxIterator" prot="public">amrex::BoxIterator</innerclass>
    <innerclass refid="classamrex_1_1BoxList" prot="public">amrex::BoxList</innerclass>
    <innerclass refid="classamrex_1_1CArena" prot="public">amrex::CArena</innerclass>
    <innerclass refid="classamrex_1_1CellBilinear" prot="public">amrex::CellBilinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeLinear" prot="public">amrex::CellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeProtected" prot="public">amrex::CellConservativeProtected</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeQuartic" prot="public">amrex::CellConservativeQuartic</innerclass>
    <innerclass refid="classamrex_1_1CellQuadratic" prot="public">amrex::CellQuadratic</innerclass>
    <innerclass refid="classamrex_1_1CGSolver" prot="public">amrex::CGSolver</innerclass>
    <innerclass refid="classamrex_1_1Cluster" prot="public">amrex::Cluster</innerclass>
    <innerclass refid="classamrex_1_1ClusterList" prot="public">amrex::ClusterList</innerclass>
    <innerclass refid="classamrex_1_1CoordSys" prot="public">amrex::CoordSys</innerclass>
    <innerclass refid="classamrex_1_1CpuBndryFuncFab" prot="public">amrex::CpuBndryFuncFab</innerclass>
    <innerclass refid="classamrex_1_1CutFab" prot="public">amrex::CutFab</innerclass>
    <innerclass refid="classamrex_1_1DataServices" prot="public">amrex::DataServices</innerclass>
    <innerclass refid="classamrex_1_1DefaultFabFactory" prot="public">amrex::DefaultFabFactory</innerclass>
    <innerclass refid="classamrex_1_1DeriveList" prot="public">amrex::DeriveList</innerclass>
    <innerclass refid="classamrex_1_1DeriveRec" prot="public">amrex::DeriveRec</innerclass>
    <innerclass refid="classamrex_1_1DescriptorList" prot="public">amrex::DescriptorList</innerclass>
    <innerclass refid="structamrex_1_1DestComp" prot="public">amrex::DestComp</innerclass>
    <innerclass refid="structamrex_1_1Dim3" prot="public">amrex::Dim3</innerclass>
    <innerclass refid="classamrex_1_1distFcnElement2d" prot="public">amrex::distFcnElement2d</innerclass>
    <innerclass refid="classamrex_1_1DistributionMapping" prot="public">amrex::DistributionMapping</innerclass>
    <innerclass refid="classamrex_1_1DivVis" prot="public">amrex::DivVis</innerclass>
    <innerclass refid="classamrex_1_1EBCellConservativeLinear" prot="public">amrex::EBCellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlag" prot="public">amrex::EBCellFlag</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlagFab" prot="public">amrex::EBCellFlagFab</innerclass>
    <innerclass refid="classamrex_1_1EBDataCollection" prot="public">amrex::EBDataCollection</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBox" prot="public">amrex::EBFArrayBox</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBoxFactory" prot="public">amrex::EBFArrayBoxFactory</innerclass>
    <innerclass refid="classamrex_1_1EBFluxRegister" prot="public">amrex::EBFluxRegister</innerclass>
    <innerclass refid="classamrex_1_1ErrorList" prot="public">amrex::ErrorList</innerclass>
    <innerclass refid="classamrex_1_1ErrorRec" prot="public">amrex::ErrorRec</innerclass>
    <innerclass refid="classamrex_1_1expect" prot="public">amrex::expect</innerclass>
    <innerclass refid="classamrex_1_1FabArray" prot="public">amrex::FabArray</innerclass>
    <innerclass refid="classamrex_1_1FabArrayBase" prot="public">amrex::FabArrayBase</innerclass>
    <innerclass refid="classamrex_1_1FabArrayCopyDescriptor" prot="public">amrex::FabArrayCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FabArrayId" prot="public">amrex::FabArrayId</innerclass>
    <innerclass refid="structamrex_1_1FabCopyDescriptor" prot="public">amrex::FabCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FabFactory" prot="public">amrex::FabFactory</innerclass>
    <innerclass refid="structamrex_1_1FabInfo" prot="public">amrex::FabInfo</innerclass>
    <innerclass refid="classamrex_1_1FABio" prot="public">amrex::FABio</innerclass>
    <innerclass refid="classamrex_1_1FABio__8bit" prot="public">amrex::FABio_8bit</innerclass>
    <innerclass refid="classamrex_1_1FABio__ascii" prot="public">amrex::FABio_ascii</innerclass>
    <innerclass refid="classamrex_1_1FABio__binary" prot="public">amrex::FABio_binary</innerclass>
    <innerclass refid="classamrex_1_1FabSet" prot="public">amrex::FabSet</innerclass>
    <innerclass refid="classamrex_1_1FabSetIter" prot="public">amrex::FabSetIter</innerclass>
    <innerclass refid="structamrex_1_1FabView" prot="public">amrex::FabView</innerclass>
    <innerclass refid="classamrex_1_1FArrayBox" prot="public">amrex::FArrayBox</innerclass>
    <innerclass refid="classamrex_1_1FillBoxId" prot="public">amrex::FillBoxId</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIterator" prot="public">amrex::FillPatchIterator</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIteratorHelper" prot="public">amrex::FillPatchIteratorHelper</innerclass>
    <innerclass refid="classamrex_1_1FluxRegister" prot="public">amrex::FluxRegister</innerclass>
    <innerclass refid="classamrex_1_1ForkJoin" prot="public">amrex::ForkJoin</innerclass>
    <innerclass refid="classamrex_1_1FPC" prot="public">amrex::FPC</innerclass>
    <innerclass refid="classamrex_1_1Geometry" prot="public">amrex::Geometry</innerclass>
    <innerclass refid="structamrex_1_1GeometryData" prot="public">amrex::GeometryData</innerclass>
    <innerclass refid="classamrex_1_1GpuBndryFuncFab" prot="public">amrex::GpuBndryFuncFab</innerclass>
    <innerclass refid="classamrex_1_1GShopLSFactory" prot="public">amrex::GShopLSFactory</innerclass>
    <innerclass refid="classamrex_1_1Hypre" prot="public">amrex::Hypre</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap" prot="public">amrex::HypreABecLap</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap2" prot="public">amrex::HypreABecLap2</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap3" prot="public">amrex::HypreABecLap3</innerclass>
    <innerclass refid="classamrex_1_1IArrayBox" prot="public">amrex::IArrayBox</innerclass>
    <innerclass refid="classamrex_1_1iMultiFab" prot="public">amrex::iMultiFab</innerclass>
    <innerclass refid="structamrex_1_1IndexSequence" prot="public">amrex::IndexSequence</innerclass>
    <innerclass refid="classamrex_1_1IndexType" prot="public">amrex::IndexType</innerclass>
    <innerclass refid="classamrex_1_1InSituBridge" prot="public">amrex::InSituBridge</innerclass>
    <innerclass refid="classamrex_1_1IntDescriptor" prot="public">amrex::IntDescriptor</innerclass>
    <innerclass refid="classamrex_1_1InterpBndryData" prot="public">amrex::InterpBndryData</innerclass>
    <innerclass refid="classamrex_1_1InterpHook" prot="public">amrex::InterpHook</innerclass>
    <innerclass refid="classamrex_1_1Interpolater" prot="public">amrex::Interpolater</innerclass>
    <innerclass refid="classamrex_1_1InterpolaterBoxCoarsener" prot="public">amrex::InterpolaterBoxCoarsener</innerclass>
    <innerclass refid="classamrex_1_1IntVect" prot="public">amrex::IntVect</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab" prot="public">amrex::IsBaseFab</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Basc4401839a878456c6d47850080d07e31" prot="public">amrex::IsBaseFab&lt; D, typename std::enable_if&lt; std::is_base_of&lt; BaseFab&lt; typename D::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray" prot="public">amrex::IsFabArray</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Fa50eb808c2316c63b70b55cab20dbec23" prot="public">amrex::IsFabArray&lt; D, typename std::enable_if&lt; std::is_base_of&lt; FabArray&lt; typename D::FABType::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="classamrex_1_1KDTree" prot="public">amrex::KDTree</innerclass>
    <innerclass refid="classamrex_1_1Laplacian" prot="public">amrex::Laplacian</innerclass>
    <innerclass refid="classamrex_1_1LayoutData" prot="public">amrex::LayoutData</innerclass>
    <innerclass refid="classamrex_1_1LevelBld" prot="public">amrex::LevelBld</innerclass>
    <innerclass refid="classamrex_1_1LineDistFcnElement2d" prot="public">amrex::LineDistFcnElement2d</innerclass>
    <innerclass refid="classamrex_1_1LinOp" prot="public">amrex::LinOp</innerclass>
    <innerclass refid="structamrex_1_1LPInfo" prot="public">amrex::LPInfo</innerclass>
    <innerclass refid="classamrex_1_1LSCore" prot="public">amrex::LSCore</innerclass>
    <innerclass refid="classamrex_1_1LSCoreBase" prot="public">amrex::LSCoreBase</innerclass>
    <innerclass refid="classamrex_1_1LSFactory" prot="public">amrex::LSFactory</innerclass>
    <innerclass refid="classamrex_1_1LSUtility" prot="public">amrex::LSUtility</innerclass>
    <innerclass refid="classamrex_1_1MacBndry" prot="public">amrex::MacBndry</innerclass>
    <innerclass refid="classamrex_1_1MacProjector" prot="public">amrex::MacProjector</innerclass>
    <innerclass refid="structamrex_1_1makeIndexSequenceHelper" prot="public">amrex::makeIndexSequenceHelper</innerclass>
    <innerclass refid="structamrex_1_1makeIndexSequenceHelper_3_010_00_01ISs_8_8_8_01_4" prot="public">amrex::makeIndexSequenceHelper&lt; 0, ISs... &gt;</innerclass>
    <innerclass refid="classamrex_1_1Mask" prot="public">amrex::Mask</innerclass>
    <innerclass refid="classamrex_1_1MCCGSolver" prot="public">amrex::MCCGSolver</innerclass>
    <innerclass refid="classamrex_1_1MCInterpBndryData" prot="public">amrex::MCInterpBndryData</innerclass>
    <innerclass refid="classamrex_1_1MCLinOp" prot="public">amrex::MCLinOp</innerclass>
    <innerclass refid="classamrex_1_1MCMultiGrid" prot="public">amrex::MCMultiGrid</innerclass>
    <innerclass refid="classamrex_1_1MemProfiler" prot="public">amrex::MemProfiler</innerclass>
    <innerclass refid="classamrex_1_1MFGhostIter" prot="public">amrex::MFGhostIter</innerclass>
    <innerclass refid="classamrex_1_1MFGraph" prot="public">amrex::MFGraph</innerclass>
    <innerclass refid="structamrex_1_1MFInfo" prot="public">amrex::MFInfo</innerclass>
    <innerclass refid="classamrex_1_1MFIter" prot="public">amrex::MFIter</innerclass>
    <innerclass refid="structamrex_1_1MFItInfo" prot="public">amrex::MFItInfo</innerclass>
    <innerclass refid="classamrex_1_1MLABecLaplacian" prot="public">amrex::MLABecLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLALaplacian" prot="public">amrex::MLALaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLCellABecLap" prot="public">amrex::MLCellABecLap</innerclass>
    <innerclass refid="classamrex_1_1MLCellLinOp" prot="public">amrex::MLCellLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLCGSolver" prot="public">amrex::MLCGSolver</innerclass>
    <innerclass refid="classamrex_1_1MLEBABecLap" prot="public">amrex::MLEBABecLap</innerclass>
    <innerclass refid="classamrex_1_1MLLinOp" prot="public">amrex::MLLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLMG" prot="public">amrex::MLMG</innerclass>
    <innerclass refid="classamrex_1_1MLMGBndry" prot="public">amrex::MLMGBndry</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLaplacian" prot="public">amrex::MLNodeLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLinOp" prot="public">amrex::MLNodeLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLPoisson" prot="public">amrex::MLPoisson</innerclass>
    <innerclass refid="classamrex_1_1MultiCutFab" prot="public">amrex::MultiCutFab</innerclass>
    <innerclass refid="classamrex_1_1MultiFab" prot="public">amrex::MultiFab</innerclass>
    <innerclass refid="classamrex_1_1MultiFabCopyDescriptor" prot="public">amrex::MultiFabCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1MultiGrid" prot="public">amrex::MultiGrid</innerclass>
    <innerclass refid="classamrex_1_1MultiMask" prot="public">amrex::MultiMask</innerclass>
    <innerclass refid="classamrex_1_1MultiMaskIter" prot="public">amrex::MultiMaskIter</innerclass>
    <innerclass refid="classamrex_1_1NeighborParticleContainer" prot="public">amrex::NeighborParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1NFilesIter" prot="public">amrex::NFilesIter</innerclass>
    <innerclass refid="classamrex_1_1NodeBilinear" prot="public">amrex::NodeBilinear</innerclass>
    <innerclass refid="classamrex_1_1NoOpPhysBCFunct" prot="public">amrex::NoOpPhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1NullInterpHook" prot="public">amrex::NullInterpHook</innerclass>
    <innerclass refid="structamrex_1_1NumComps" prot="public">amrex::NumComps</innerclass>
    <innerclass refid="classamrex_1_1OrderedBoxes" prot="public">amrex::OrderedBoxes</innerclass>
    <innerclass refid="classamrex_1_1Orientation" prot="public">amrex::Orientation</innerclass>
    <innerclass refid="classamrex_1_1OrientationIter" prot="public">amrex::OrientationIter</innerclass>
    <innerclass refid="classamrex_1_1ParConstIter" prot="public">amrex::ParConstIter</innerclass>
    <innerclass refid="classamrex_1_1ParGDB" prot="public">amrex::ParGDB</innerclass>
    <innerclass refid="classamrex_1_1ParGDBBase" prot="public">amrex::ParGDBBase</innerclass>
    <innerclass refid="classamrex_1_1ParIter" prot="public">amrex::ParIter</innerclass>
    <innerclass refid="classamrex_1_1ParIterBase" prot="public">amrex::ParIterBase</innerclass>
    <innerclass refid="classamrex_1_1ParmParse" prot="public">amrex::ParmParse</innerclass>
    <innerclass refid="structamrex_1_1Particle" prot="public">amrex::Particle</innerclass>
    <innerclass refid="structamrex_1_1ParticleCommData" prot="public">amrex::ParticleCommData</innerclass>
    <innerclass refid="classamrex_1_1ParticleContainer" prot="public">amrex::ParticleContainer</innerclass>
    <innerclass refid="structamrex_1_1ParticleInitType" prot="public">amrex::ParticleInitType</innerclass>
    <innerclass refid="structamrex_1_1ParticleLocData" prot="public">amrex::ParticleLocData</innerclass>
    <innerclass refid="structamrex_1_1ParticleTile" prot="public">amrex::ParticleTile</innerclass>
    <innerclass refid="classamrex_1_1PCInterp" prot="public">amrex::PCInterp</innerclass>
    <innerclass refid="classamrex_1_1Periodicity" prot="public">amrex::Periodicity</innerclass>
    <innerclass refid="classamrex_1_1PETScABecLap" prot="public">amrex::PETScABecLap</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunct" prot="public">amrex::PhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunctBase" prot="public">amrex::PhysBCFunctBase</innerclass>
    <innerclass refid="classamrex_1_1PlotFileData" prot="public">amrex::PlotFileData</innerclass>
    <innerclass refid="classamrex_1_1PlotFileDataImpl" prot="public">amrex::PlotFileDataImpl</innerclass>
    <innerclass refid="classamrex_1_1Print" prot="public">amrex::Print</innerclass>
    <innerclass refid="classamrex_1_1PrintToFile" prot="public">amrex::PrintToFile</innerclass>
    <innerclass refid="classamrex_1_1RealBox" prot="public">amrex::RealBox</innerclass>
    <innerclass refid="classamrex_1_1RealDescriptor" prot="public">amrex::RealDescriptor</innerclass>
    <innerclass refid="classamrex_1_1RealVect" prot="public">amrex::RealVect</innerclass>
    <innerclass refid="classamrex_1_1SplineDistFcnElement2d" prot="public">amrex::SplineDistFcnElement2d</innerclass>
    <innerclass refid="structamrex_1_1SrcComp" prot="public">amrex::SrcComp</innerclass>
    <innerclass refid="classamrex_1_1StateData" prot="public">amrex::StateData</innerclass>
    <innerclass refid="classamrex_1_1StateDataPhysBCFunct" prot="public">amrex::StateDataPhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1StateDescriptor" prot="public">amrex::StateDescriptor</innerclass>
    <innerclass refid="classamrex_1_1StreamRetry" prot="public">amrex::StreamRetry</innerclass>
    <innerclass refid="structamrex_1_1StructOfArrays" prot="public">amrex::StructOfArrays</innerclass>
    <innerclass refid="classamrex_1_1TagBox" prot="public">amrex::TagBox</innerclass>
    <innerclass refid="classamrex_1_1TagBoxArray" prot="public">amrex::TagBoxArray</innerclass>
    <innerclass refid="classamrex_1_1TinyProfiler" prot="public">amrex::TinyProfiler</innerclass>
    <innerclass refid="classamrex_1_1TinyProfileRegion" prot="public">amrex::TinyProfileRegion</innerclass>
    <innerclass refid="classamrex_1_1TracerParticleContainer" prot="public">amrex::TracerParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1Vector" prot="public">amrex::Vector</innerclass>
    <innerclass refid="classamrex_1_1VisMF" prot="public">amrex::VisMF</innerclass>
    <innerclass refid="classamrex_1_1WeightedBox" prot="public">amrex::WeightedBox</innerclass>
    <innerclass refid="classamrex_1_1WeightedBoxList" prot="public">amrex::WeightedBoxList</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataList" prot="public">amrex::XYPlotDataList</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataListLink" prot="public">amrex::XYPlotDataListLink</innerclass>
    <innerclass refid="classamrex_1_1YAFluxRegister" prot="public">amrex::YAFluxRegister</innerclass>
    <innernamespace refid="namespaceamrex_1_1Amrvis">amrex::Amrvis</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Cuda">amrex::Cuda</innernamespace>
    <innernamespace refid="namespaceamrex_1_1detail">amrex::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2">amrex::EB2</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Extrapolater">amrex::Extrapolater</innernamespace>
    <innernamespace refid="namespaceamrex_1_1InSituUtils">amrex::InSituUtils</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Lazy">amrex::Lazy</innernamespace>
    <innernamespace refid="namespaceamrex_1_1loadBalanceKD">amrex::loadBalanceKD</innernamespace>
    <innernamespace refid="namespaceamrex_1_1machine">amrex::machine</innernamespace>
    <innernamespace refid="namespaceamrex_1_1MFUtil">amrex::MFUtil</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllGather">amrex::ParallelAllGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllReduce">amrex::ParallelAllReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelContext">amrex::ParallelContext</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor">amrex::ParallelDescriptor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelGather">amrex::ParallelGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelReduce">amrex::ParallelReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1system">amrex::system</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" prot="public" static="no">
        <name>InterpEM_t</name>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfaea241117e55edc2764d31a18a4740ff3" prot="public">
          <name>InterpE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfa9d55599aaee42c677bcd175e50bebbca" prot="public">
          <name>InterpB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1abd2e3d292645433cefc947725585f87a" prot="public" static="no">
        <name>FabType</name>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaa72ed46ebb1280e51746ce28ded53942" prot="public">
          <name>covered</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" prot="public">
          <name>regular</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa928c4a180152a4857751871f38d5f9ef" prot="public">
          <name>singlevalued</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf8a062dbd0dba47618be245dc266806" prot="public">
          <name>multivalued</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabFactory.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabFactory.H" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6" prot="public" static="no">
        <name>FillType</name>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a3de07fb14bde47411225509d67e0bda1" prot="public">
          <name>FillLocally</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a8d7828a9196bfb084013996640e84bd4" prot="public">
          <name>FillRemotely</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a86e193c43ac00a14b0943baf3433c6d0" prot="public">
          <name>Unfillable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum and the <ref refid="structamrex_1_1FabCopyDescriptor" kindref="compound">FabCopyDescriptor</ref> class should really be nested in <ref refid="classamrex_1_1FabArrayCopyDescriptor" kindref="compound">FabArrayCopyDescriptor</ref> (not done for portability reasons). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FACopyDescriptor.H" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FACopyDescriptor.H" bodystart="15" bodyend="15"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" prot="public" static="no">
        <name>MakeType</name>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" prot="public">
          <name>make_alias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a0a2bb4bcb2051ae3a06f94b5c1768e90" prot="public">
          <name>make_deep_copy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MakeType.H" line="6" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MakeType.H" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" prot="public" static="no">
        <name>Direction</name>
        <enumvalue id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" prot="public">
          <name>AMREX_D_DECL</name>
          <initializer>=(x = 0, y = 1, z = 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="13" bodyend="13"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" prot="public" static="no">
        <name>EBSupport</name>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcaf17aaabc20bfe045075927934fed52d2" prot="public">
          <name>basic</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca210ab9e731c9c36c2c38db15c28a8d1c" prot="public">
          <name>volume</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>volume fraction </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcae9dc924f238fa6cc29465942875fe8f0" prot="public">
          <name>full</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>area fraction, boundary centroids and face centroids </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBSupport.H" line="6" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBSupport.H" bodystart="6" bodyend="11"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7ae" prot="public" static="no">
        <name>MCBC_Mode</name>
        <enumvalue id="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7aea690909eddef5100a075a6465dc94537f" prot="public">
          <name>MCHomogeneous_BC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ac6a345f3c5f30b5d97087d43bbf1c7aea372bb314280acee54f7e683ec43bbc19" prot="public">
          <name>MCInhomogeneous_BC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCLinOp.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCLinOp.H" bodystart="17" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc) (amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> to compute derived quantity. </para>        </briefdescription>
        <detaileddescription>
<para>Note that AMREX_ARLIM_P will be preprocessed into DIM const int&amp;&apos;s.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dlo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dhi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_lo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_hi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc3D) (amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc3D</name>
        <briefdescription>
<para>This is dimension agnostic. For example, dlo always has three elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFuncFab) (const amrex::Box &amp;bx, amrex::FArrayBox &amp;derfab, int dcomp, int ncomp, const amrex::FArrayBox &amp;datafab, const amrex::Geometry &amp;geomdata, amrex::Real time, const int *bcrec, int level)</definition>
        <argsstring>)(const amrex::Box &amp;bx, amrex::FArrayBox &amp;derfab, int dcomp, int ncomp, const amrex::FArrayBox &amp;datafab, const amrex::Geometry &amp;geomdata, amrex::Real time, const int *bcrec, int level)</argsstring>
        <name>DeriveFuncFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Derive.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a1a30e1b65c56dcadc792e4ecdbe258f8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFuncFabDefault) (Box const &amp;bx, FArrayBox &amp;data, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</definition>
        <argsstring>)(Box const &amp;bx, FArrayBox &amp;data, const int dcomp, const int numcomp, Geometry const &amp;geom, const Real time, const Vector&lt; BCRec &gt; &amp;bcr, const int bcomp, const int scomp)</argsstring>
        <name>BndryFuncFabDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateDescriptor.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1accd616989af467165f35b0b213ee2e1a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFuncDefault) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFuncDefault</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> to do tagging of cells for refinement. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a712777d91904823bb5241758651b9709" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc2Default) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</argsstring>
        <name>ErrorFunc2Default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a198cab9c3268f289bedd23e83dd7e95d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc3DDefault) (int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFunc3DDefault</name>
        <briefdescription>
<para>Dimension agnostic version that always has three elements. Note that this is only implemented for the ErrorFunc class, not ErrorFunc2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::PTR_TO_VOID_FUNC) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>PTR_TO_VOID_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorHandler) (const char *msg)</definition>
        <argsstring>)(const char *msg)</argsstring>
        <name>ErrorHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1afe930d74045516fece8591f173e57007" prot="public" static="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>using amrex::Array = typedef std::array&lt;T,N&gt;</definition>
        <argsstring></argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::RealArray = typedef Array&lt;Real, AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2b58b8c81ca5e47c17a861e86354eba1" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::IntArray = typedef Array&lt;int , AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>IntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a317082290117984ef29e149750e2c7a8" prot="public" static="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>using amrex::GpuArray = typedef std::array&lt;T,N&gt;</definition>
        <argsstring></argsstring>
        <name>GpuArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" prot="public" static="no">
        <type>int</type>
        <definition>typedef int amrex::key_table_type</definition>
        <argsstring></argsstring>
        <name>key_table_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abd282e9563d85643f4469e82aaea4d5c" prot="public" static="no">
        <type>std::allocator&lt; T &gt;</type>
        <definition>using amrex::CudaManagedAllocator = typedef std::allocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>CudaManagedAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaAllocators.H" line="205" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaAllocators.H" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ac3aaf3d47b0fc6e69f9405fcebcdc4fe" prot="public" static="no">
        <type>std::runtime_error</type>
        <definition>using amrex::RuntimeError = typedef std::runtime_error</definition>
        <argsstring></argsstring>
        <name>RuntimeError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Exception.H" line="8" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Exception.H" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" prot="public" static="no">
        <type><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt;</type>
        <definition>using amrex::FArrayBoxFactory = typedef DefaultFabFactory&lt;FArrayBox&gt;</definition>
        <argsstring></argsstring>
        <name>FArrayBoxFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="415" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ad9f3a92c061d8ad8de35370ed5ce28b8" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1makeIndexSequenceHelper" kindref="compound">makeIndexSequenceHelper</ref>&lt; N &gt;::type</type>
        <definition>using amrex::makeIndexSequence = typedef typename makeIndexSequenceHelper&lt;N&gt;::type</definition>
        <argsstring></argsstring>
        <name>makeIndexSequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexSequence.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexSequence.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArrayId" kindref="compound">FabArrayId</ref></type>
        <definition>typedef FabArrayId amrex::MultiFabId</definition>
        <argsstring></argsstring>
        <name>MultiFabId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.H" line="12" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.H" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a395b6c263aecc344bf7648fe2d8d75cf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFuncDefault) (Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFuncDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ab0cdf132a72bb586fa96bbdc53a19149" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFunc3DDefault) (Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFunc3DDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ad1be4bb2ad60b6e47ba5cc3b7d001e79" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::UserFillBox) (Box const &amp;bx, FArrayBox &amp;dest, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</definition>
        <argsstring>)(Box const &amp;bx, FArrayBox &amp;dest, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>UserFillBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a62563da3fe4e55c8bba5b5e1aadf2495" prot="public" static="no">
        <type>std::array&lt; T, N &gt;</type>
        <definition>using amrex::Tuple = typedef std::array&lt;T,N&gt;</definition>
        <argsstring></argsstring>
        <name>Tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Tuple.H" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Tuple.H" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" prot="public" static="no">
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using amrex::EnableIf_t = typedef typename std::enable_if&lt;B,T&gt;::type</definition>
        <argsstring></argsstring>
        <name>EnableIf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_TypeTraits.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ae337b46a7ca54b353861635503079536" prot="public" static="no">
        <type>std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
        <definition>using amrex::MaxResSteadyClock = typedef std::conditional&lt;std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock&gt;::type</definition>
        <argsstring></argsstring>
        <name>MaxResSteadyClock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2172ed493dfadbd34d5cdb72995f96af" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter" kindref="compound">ParIter</ref>&lt; AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::TracerParIter = typedef ParIter&lt;AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>TracerParIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_TracerParticles.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_TracerParticles.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1aee4d1d20e920bfb1eceeb7db0a36be0f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::plot_nfiles</definition>
        <argsstring></argsstring>
        <name>plot_nfiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a5b71dcdf9f42d1ea8bf9c95f24d150b4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::mffile_nstreams</definition>
        <argsstring></argsstring>
        <name>mffile_nstreams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aee298693c19108f120311352e1404a77" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::probinit_natonce</definition>
        <argsstring></argsstring>
        <name>probinit_natonce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a18ffd2e93f9a414d44ed7d7aa194f549" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::plot_files_output</definition>
        <argsstring></argsstring>
        <name>plot_files_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ac03d4bd20c1a39f7e2d14086558bb511" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::checkpoint_nfiles</definition>
        <argsstring></argsstring>
        <name>checkpoint_nfiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a54360d5e4005db7d308c6aff7628d08d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::regrid_on_restart</definition>
        <argsstring></argsstring>
        <name>regrid_on_restart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1af1ff4a567f8d0cdc485062507aac9742" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::use_efficient_regrid</definition>
        <argsstring></argsstring>
        <name>use_efficient_regrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a8e6b05f30acfc8c62599db29b80f0458" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::plotfile_on_restart</definition>
        <argsstring></argsstring>
        <name>plotfile_on_restart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="117" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4fc063c9af672541af3137ecc39913ae" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::insitu_on_restart</definition>
        <argsstring></argsstring>
        <name>insitu_on_restart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9819d0b6f03d68de014c21d81400ab15" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::checkpoint_on_restart</definition>
        <argsstring></argsstring>
        <name>checkpoint_on_restart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a15554a13b4b666cd9c7771d2f6c50f7e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::checkpoint_files_output</definition>
        <argsstring></argsstring>
        <name>checkpoint_files_output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3effddc12a2d9eb3c02491feacfd59c4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::compute_new_dt_on_regrid</definition>
        <argsstring></argsstring>
        <name>compute_new_dt_on_regrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aee87bad8e223463237efb0e157629193" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::precreateDirectories</definition>
        <argsstring></argsstring>
        <name>precreateDirectories</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a82af7510a857d501de8f3a1de444472a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::prereadFAHeaders</definition>
        <argsstring></argsstring>
        <name>prereadFAHeaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1afdf427459e2b9a7718975c38a36d8be2" prot="public" static="yes" mutable="no">
        <type>constexpr Real</type>
        <definition>constexpr Real amrex::INVALID_TIME</definition>
        <argsstring></argsstring>
        <name>INVALID_TIME</name>
        <initializer>= -1.0e200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a77d7d152de71abe1856e19ee2122a24a" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::MFNEWDATA</definition>
        <argsstring></argsstring>
        <name>MFNEWDATA</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a22e5d2b124fbc2a101b2538d589e2899" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::MFOLDDATA</definition>
        <argsstring></argsstring>
        <name>MFOLDDATA</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" line="22" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acf5df53eeb808ad11275f15efa7d4ab3" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::err_name[]</definition>
        <argsstring>[]</argsstring>
        <name>err_name</name>
        <initializer>= { &quot;Special&quot;, &quot;Standard&quot;, &quot;UseAverage&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1add23b3df81e9353cea327552654d630b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PCInterp" kindref="compound">PCInterp</ref></type>
        <definition>PCInterp amrex::pc_interp</definition>
        <argsstring></argsstring>
        <name>pc_interp</name>
        <briefdescription>
<para>CONSTRUCT A GLOBAL OBJECT OF EACH VERSION. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a7655c2dbeff4b92d06ddf5d3f964e7b2" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1NodeBilinear" kindref="compound">NodeBilinear</ref></type>
        <definition>NodeBilinear amrex::node_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>node_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a5fa0044ab8f93865e1fc48bb78a6e5e8" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellBilinear" kindref="compound">CellBilinear</ref></type>
        <definition>CellBilinear amrex::cell_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>cell_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad21d1e8d053cd312ae67d9bd79b598ac" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellQuadratic" kindref="compound">CellQuadratic</ref></type>
        <definition>CellQuadratic amrex::quadratic_interp</definition>
        <argsstring></argsstring>
        <name>quadratic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acdf3882926f66513ad7885b4cd468233" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>CellConservativeLinear amrex::lincc_interp</definition>
        <argsstring></argsstring>
        <name>lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a5a7cd403bb1a4e3a44a90722f83f40f5" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>CellConservativeLinear amrex::cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.H" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aec5e350e7334dcbe6776eb60a1b77160" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeProtected" kindref="compound">CellConservativeProtected</ref></type>
        <definition>CellConservativeProtected amrex::protected_interp</definition>
        <argsstring></argsstring>
        <name>protected_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2a5decb8ebeab1e499c7c66e78a0eb07" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeQuartic" kindref="compound">CellConservativeQuartic</ref></type>
        <definition>CellConservativeQuartic amrex::quartic_interp</definition>
        <argsstring></argsstring>
        <name>quartic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acb97f6f7553a0dbf1813a0faac636b90" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::private_total_bytes_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total bytes at any given time </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3c18b97e0d09397c5895cf1c3bca7282" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::private_total_bytes_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a583d878122b14b28a3ba6bc38f5e770e" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::private_total_cells_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total cells at any given time </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a8b2e74e23eb671db74129bdc374b9d73" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::private_total_cells_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1af16cddc474435bd51df456e9cf7a2ba3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::istr[]</definition>
        <argsstring>[]</argsstring>
        <name>istr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BLProfiler.cpp" line="1653" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BLProfiler.cpp" bodystart="1653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f43e2df85d0db8585e437a05c9c6a81" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3b82c3e2c727baf0805e10a006744bc0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::sfc_threshold</definition>
        <argsstring></argsstring>
        <name>sfc_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0dc972d04970bb21c8988fb02790526c" prot="public" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::max_efficiency</definition>
        <argsstring></argsstring>
        <name>max_efficiency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a6c6d85a2ab815c914d82842d370a03d3" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::node_size</definition>
        <argsstring></argsstring>
        <name>node_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abd60428797a6f8b12bc87f94351665c2" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::BitsMax</definition>
        <argsstring></argsstring>
        <name>BitsMax</name>
        <initializer>= 8*sizeof(long)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f06187236b4b28934f47fc5bffad56d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::REVERSE_ORDER</definition>
        <argsstring></argsstring>
        <name>REVERSE_ORDER</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abac42537a3d9d5a2f6c6fac15f99f66c" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char amrex::sys_name[]</definition>
        <argsstring>[]</argsstring>
        <name>sys_name</name>
        <initializer>= &quot;IEEE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a213d84de93dd842b45e3deef04de2d08" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::finalize_verbose</definition>
        <argsstring></argsstring>
        <name>finalize_verbose</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae58ed08a7ada5774ab9f0a1cc892113c" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_filename</definition>
        <argsstring></argsstring>
        <name>s_pout_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2728e462d28f66dc62edc4974850d0e2" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_basename</definition>
        <argsstring></argsstring>
        <name>s_pout_basename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acfcde804095e39e72c044334abee8044" prot="public" static="yes" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::s_pout</definition>
        <argsstring></argsstring>
        <name>s_pout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad8d02f5dc33b592a116f7d00f0e9f603" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_init</definition>
        <argsstring></argsstring>
        <name>s_pout_init</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a1541ad04792c78b4f6b342ce289c6afe" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_open</definition>
        <argsstring></argsstring>
        <name>s_pout_open</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a7f37efe5218c4a111e61fa4605f40595" prot="public" static="yes" mutable="no">
        <type>const long</type>
        <definition>const long amrex::gcc_map_node_extra_bytes</definition>
        <argsstring></argsstring>
        <name>gcc_map_node_extra_bytes</name>
        <initializer>= 32L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="303" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a800f0e7b7cc45c727ac9b9bc6dc25405" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheMultiFabHdrFileSuffix</definition>
        <argsstring></argsstring>
        <name>TheMultiFabHdrFileSuffix</name>
        <initializer>= &quot;_H&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9bff146d2660624779e432d43cd9bf39" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::FabFileSuffix</definition>
        <argsstring></argsstring>
        <name>FabFileSuffix</name>
        <initializer>= &quot;_D_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0277cf50400e3022708ae4bac2958edc" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheFabOnDiskPrefix</definition>
        <argsstring></argsstring>
        <name>TheFabOnDiskPrefix</name>
        <initializer>= &quot;FabOnDisk:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9c0be24427378d764043ecb9428022b4" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>EBCellConservativeLinear amrex::eb_lincc_interp</definition>
        <argsstring></argsstring>
        <name>eb_lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBInterpolater.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4e29548e6877049e5a34ef4512bd7263" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>EBCellConservativeLinear amrex::eb_cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>eb_cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBInterpolater.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9b7bd9bff131fc5a847e7465aeba15aa" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int amrex::SSS_MAX</definition>
        <argsstring></argsstring>
        <name>SSS_MAX</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_CGSolver.cpp" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_CGSolver.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acacfdf13ce24ba1836231106e03f7e26" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__MCINTERPBNDRYDATA__F_8H_1aac34416fae2fc211f82c7e6f262b6fac" kindref="member">BDInterpFunc</ref> *</type>
        <definition>BDInterpFunc* amrex::bdfunc[2 *BL_SPACEDIM]</definition>
        <argsstring>[2 *BL_SPACEDIM]</argsstring>
        <name>bdfunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ab9ef0c17cdb5fd8ee696dae85c2d4b3d" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__MCINTERPBNDRYDATA__F_8H_1a5ac96658cf4dcd448ee6f7d46e208264" kindref="member">BDPhysDerivative</ref> *</type>
        <definition>BDPhysDerivative* amrex::bdider[2 *BL_SPACEDIM]</definition>
        <argsstring>[2 *BL_SPACEDIM]</argsstring>
        <name>bdider</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abd4de68ffb451b4f72483202f1d0b905" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::bdfunc_set</definition>
        <argsstring></argsstring>
        <name>bdfunc_set</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" line="12" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1a5d5710eb4e8adfefe7b93086718fe07b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
        <definition>VisMF::Header::Version amrex::plot_headerversion</definition>
        <argsstring>(VisMF::Header::Version_v1)</argsstring>
        <name>plot_headerversion</name>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54dad8a8b7451642ebbf0f06d98d6aec42c5" kindref="member">VisMF::Header::Version_v1</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acd89c8b241e3ebc4d5ce44be10a46368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54d" kindref="member">VisMF::Header::Version</ref></type>
        <definition>VisMF::Header::Version amrex::checkpoint_headerversion</definition>
        <argsstring>(VisMF::Header::Version_v1)</argsstring>
        <name>checkpoint_headerversion</name>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header_1aa4469030a55d4e3be552189f7d06b54dad8a8b7451642ebbf0f06d98d6aec42c5" kindref="member">VisMF::Header::Version_v1</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d9cc4679a3fca647c2d0d91bc0b2cef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::NeedToTouchUpPhysCorners</definition>
        <argsstring>(const Geometry &amp;geom)</argsstring>
        <name>NeedToTouchUpPhysCorners</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="677" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a948d5324e5cf514157eb7e16637e55b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::HasPhysBndry</definition>
        <argsstring>(const Box &amp;b, const Box &amp;dmn, const Geometry &amp;geom)</argsstring>
        <name>HasPhysBndry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dmn</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1104" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf9b8a2c079e01271e32cb7cba3057de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FixUpPhysCorners</definition>
        <argsstring>(FArrayBox &amp;fab, AmrLevel &amp;TheLevel, int state_indx, Real time, int scomp, int dcomp, int ncomp)</argsstring>
        <name>FixUpPhysCorners</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>TheLevel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1124" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad22b2b776284a051ecd35e8dfa6e54d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int amrex::FindCut</definition>
        <argsstring>(const int *hist, int lo, int hi, CutStatus &amp;status)</argsstring>
        <name>FindCut</name>
        <param>
          <type>const int *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>CutStatus &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Cluster.cpp" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="157" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab1b1f90152c1c5636d634b475056389e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ErrorList &amp;elst)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorList" kindref="compound">ErrorList</ref> &amp;</type>
          <declname>elst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="216" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a913d4d8f55e1995cc13187a4a8683271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ProperlyNested</definition>
        <argsstring>(const IntVect &amp;ratio, const IntVect &amp;blocking_factor, int ngrow, const IndexType &amp;boxType, Interpolater *mapper)</argsstring>
        <name>ProperlyNested</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>blocking_factor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>boxType</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="17" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a10ec11fd10345c8863b88a5188b38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillPatchSingleLevel</definition>
        <argsstring>(MultiFab &amp;mf, Real time, const Vector&lt; MultiFab * &gt; &amp;smf, const Vector&lt; Real &gt; &amp;stime, int scomp, int dcomp, int ncomp, const Geometry &amp;geom, PhysBCFunctBase &amp;physbcf, int bcfcomp)</argsstring>
        <name>FillPatchSingleLevel</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>smf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>stime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PhysBCFunctBase" kindref="compound">PhysBCFunctBase</ref> &amp;</type>
          <declname>physbcf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bcfcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="43" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b250e0f2c6f2f0537764b81e8a0a148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillPatchTwoLevels</definition>
        <argsstring>(MultiFab &amp;mf, Real time, const Vector&lt; MultiFab * &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MultiFab * &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, PhysBCFunctBase &amp;cbc, int cbccomp, PhysBCFunctBase &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interpolater *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const InterpHook &amp;pre_interp, const InterpHook &amp;post_interp)</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PhysBCFunctBase" kindref="compound">PhysBCFunctBase</ref> &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PhysBCFunctBase" kindref="compound">PhysBCFunctBase</ref> &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>pre_interp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>post_interp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="131" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abeb995978e122ed6920e430f61cbc72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MultiFab &amp;mf, Real time, const MultiFab &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, const IntVect &amp;ratio, Interpolater *mapper, const InterpHook &amp;pre_interp, const InterpHook &amp;post_interp)</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>pre_interp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>post_interp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="218" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69d6f6444b4d19e5e0bb84a8aafcce02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MultiFab &amp;mf, Real time, const MultiFab &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, PhysBCFunctBase &amp;cbc, int cbccomp, PhysBCFunctBase &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interpolater *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const InterpHook &amp;pre_interp, const InterpHook &amp;post_interp)</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PhysBCFunctBase" kindref="compound">PhysBCFunctBase</ref> &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1PhysBCFunctBase" kindref="compound">PhysBCFunctBase</ref> &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>pre_interp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1InterpHook" kindref="compound">InterpHook</ref> &amp;</type>
          <declname>post_interp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="238" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a331b0725efb68a4f9224f12e6d6df4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;crse, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="332" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="332" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4b250931d7e5f375e7da2ebc1ea0ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;crse, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="344" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="344" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43f885ceb96bd81e5cbfb12954b6a0f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;regfab, const int rcomp, FArrayBox const &amp;flxfab, const int fcomp, const int ncomp, const int, IntVect const &amp;ratio, const Real mult)</argsstring>
        <name>fluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>regfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>flxfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const int</type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flxfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flxfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="25" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8672fd0d3c58b1723817cfa4eb3b52d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineareaadd</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;regfab, const int rcomp, FArrayBox const &amp;areafab, FArrayBox const &amp;flxfab, const int fcomp, const int ncomp, const int, IntVect const &amp;ratio, const Real mult)</argsstring>
        <name>fluxreg_fineareaadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>regfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>areafab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>flxfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const int</type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux times area to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areafab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flxfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>areafab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flxfab</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="61" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a368ca98bbc3a568b1f5df4583beb2c42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_reflux</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;sfab, const int scomp, FArrayBox const &amp;ffab, FArrayBox const &amp;vfab, const int ncomp, const Real mult, const Orientation face)</argsstring>
        <name>fluxreg_reflux</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>sfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ffab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>vfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="82" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2b0118edc0dee59ed66fd069798d8b80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1af7feff7858c7b1d3557509d883c46674" kindref="member">AMREX_GPU_HOST</ref> <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>AMREX_GPU_HOST Vector&lt; Real &gt; amrex::ccinterp_compute_voff</definition>
        <argsstring>(Box const &amp;cbx, IntVect const &amp;ratio, Geometry const &amp;cgeom, Geometry const &amp;fgeom)</argsstring>
        <name>ccinterp_compute_voff</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>cbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fgeom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="14" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2c748db0779d9941a0558521e3c2af70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cellconslin_slopes_linlim</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;ufab, const int icomp, const int ncomp, BCRec const *AMREX_RESTRICT bcr)</argsstring>
        <name>cellconslin_slopes_linlim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="82" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac336a8e7fd83b37948aa3e75e9de8473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cellconslin_interp</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;finefab, const int fcomp, const int ncomp, FArrayBox const &amp;slopesfab, FArrayBox const &amp;crsefab, const int ccomp, Real const *AMREX_RESTRICT voff, IntVect const &amp;ratio)</argsstring>
        <name>cellconslin_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>slopesfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>voff</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="132" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a466dd6c4d1e26e9e1d503de5792f2c9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cellconslin_slopes_mclim</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;ufab, const int icomp, const int ncomp, BCRec const *AMREX_RESTRICT bcr)</argsstring>
        <name>cellconslin_slopes_mclim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="161" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64bad0eb2f3b52d2919d9fef5a3446e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cellconslin_fine_alpha</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;alphafab, FArrayBox const &amp;ccfab, const int ncomp, Real const *AMREX_RESTRICT voff, IntVect const &amp;ratio)</argsstring>
        <name>cellconslin_fine_alpha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>alphafab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>voff</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="204" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a389d014044632470da86b88f7b304311" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cellconslin_slopes_mmlim</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;alphafab, const int ncomp, IntVect const &amp;ratio)</argsstring>
        <name>cellconslin_slopes_mmlim</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>alphafab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="239" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="239" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad06a75c97ed1084cfb1a17c9bde59767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::pcinterp_interp</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;finefab, const int fcomp, const int ncomp, FArrayBox const &amp;crsefab, const int ccomp, IntVect const &amp;ratio)</argsstring>
        <name>pcinterp_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="262" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e494a9be5b8cf5220009925353803ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::nodebilin_slopes</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;slopefab, FArrayBox const &amp;ufab, const int icomp, const int ncomp, IntVect const &amp;ratio)</argsstring>
        <name>nodebilin_slopes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>slopefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="282" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d60a612b5aa9a3f8e782d65aab8ed87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::nodebilin_interp</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;finefab, const int fcomp, const int ncomp, FArrayBox const &amp;slopefab, FArrayBox const &amp;crsefab, const int ccomp, IntVect const &amp;ratio)</argsstring>
        <name>nodebilin_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>slopefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="302" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4158723bb78d3d5f19e396a20c0ce2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="96" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6af1524fbe3cd8da106c62a0707deb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Initialize</definition>
        <argsstring>(MPI_Comm mpi_comm, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="362" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abcb9523b634d8e0d552e198bc4c9c746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, bool build_parm_parse=true, MPI_Comm mpi_comm=MPI_COMM_WORLD, const std::function&lt; void()&gt; &amp;func_parm_parse={}, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errorhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type>int &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_parm_parse</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
          <defval><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref></defval>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>func_parm_parse</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errorhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="372" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98433bd642d901d057750276875f85f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Finalize</definition>
        <argsstring>(bool finalize_parallel=true)</argsstring>
        <name>Finalize</name>
        <param>
          <type>bool</type>
          <declname>finalize_parallel</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="595" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec8ceac1148bd8331f3a51572068f8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnFinalize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnFinalize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
<para>We maintain a stack of functions that need to be called in <ref refid="namespaceamrex_1a98433bd642d901d057750276875f85f6" kindref="member">Finalize()</ref>. The functions are called in LIFO order. The idea here is to allow classes to clean up any &quot;global&quot; state that they maintain when we&apos;re exiting from AMReX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6911748ceb0d88bf5b6bf7f3f0402e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnInitialize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnInitialize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::Error</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Error</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="154" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Error</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a505a9fcb1c91b13f22f94404e0a5a820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::Warning</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out warning message to cerr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="272" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1cc69bc2c0172148e82713abb30d2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Warning</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::Abort</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Abort</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via abort(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="242" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Abort</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Abort</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="93" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6a2e5010fd3fcf597991b9d1a251c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>void amrex::Assert</definition>
        <argsstring>(const char *EX, const char *file, int line, const char *msg=nullptr)</argsstring>
        <name>Assert</name>
        <param>
          <type>const char *</type>
          <declname>EX</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Prints assertion failed messages to cerr and exits via abort(). Intended for use by the <ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT()</ref> macro in &lt;<ref refid="AMReX__BLassert_8H" kindref="compound">AMReX_BLassert.H</ref>&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="293" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a60941081c34a5d500140c8577e11625a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OutOfMemory</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>OutOfMemory</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Prints out an out-of-memory message and aborts. It is called by various routines when a call to new fails. </para>        </briefdescription>
        <detaileddescription>
<para>Called as <ref refid="namespaceamrex_1a60941081c34a5d500140c8577e11625a" kindref="member">amrex::OutOfMemory</ref>(<bold>FILE</bold>, <bold>LINE</bold>); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c0dc9355722e150b88c6fc71422288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::write_to_stderr_without_buffering</definition>
        <argsstring>(const char *str)</argsstring>
        <name>write_to_stderr_without_buffering</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This is used by <ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error()</ref>, <ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort()</ref>, and <ref refid="namespaceamrex_1ab6a2e5010fd3fcf597991b9d1a251c0d" kindref="member">amrex::Assert()</ref> to ensure that when writing the message to stderr, that no additional heap-based memory is allocated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="120" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae82a731c021b58a742101a3d5f803438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetErrorHandler</definition>
        <argsstring>(ErrorHandler errhandler)</argsstring>
        <name>SetErrorHandler</name>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>errhandler</declname>
          <defname>f</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add2f0f36ce80f2f3934e3a8ec2a966df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::OutStream</definition>
        <argsstring>()</argsstring>
        <name>OutStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="704" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e213ab52cdac41e691ab49370b30a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::ErrorStream</definition>
        <argsstring>()</argsstring>
        <name>ErrorStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="710" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95f0930ba986e82b33990bf2cc0423a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Verbose</definition>
        <argsstring>()</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8bc35a2ad51cd8f62e3439b33423b00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetVerbose</definition>
        <argsstring>(int v)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b2451baea738a8717530466c13f37fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command</definition>
        <argsstring>()</argsstring>
        <name>get_command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f3d8f755663a93f3953f7cda5590cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::command_argument_count</definition>
        <argsstring>()</argsstring>
        <name>command_argument_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="133" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="722" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a566544464dedd2d70fe9969fc79658cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command_argument</definition>
        <argsstring>(int number)</argsstring>
        <name>get_command_argument</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Get command line arguments. The executable name is the zero-th argument. Return empty string if there are not that many arguments. std::string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="140" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.cpp" bodystart="728" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d0fa7afb6bbeb5e81b5570445599fbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacater</definition>
        <argsstring>()</argsstring>
        <name>GccPlacater</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX.H" bodystart="142" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" bodystart="190" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97a60825e6e7886b3502c2f4ed1eb417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Device_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Device_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" line="197" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76cc74eb7c42bf4d111ac5cae5db8420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Managed_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Managed_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba0258410952c3ccfe405a462ef2d887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Pinned_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Pinned_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" line="211" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Arena.cpp" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfa5623567b8caee4aa4e268986d0314" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Dim3 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a611b9da2c9b839d176ff0c527f918ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Array4&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6bb121616e4ca0bb124716cf5510beba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a)</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="160" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1faa5795f7698f79e06dedc046e5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a)</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a203249f88d9dcd9f313d57720d438416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a)</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5f19f82d59a0a1a6d5d68f40b5a3b1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;a)</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1c199747508f6a0107b36d8858abbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a)</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" line="184" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array.H" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a652bd22fb8cfcdfeaa4ac62e81a41fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Initialize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="24" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67b24cef9df62e8cced041445b239e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Finalize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4e0f8aface4c69e30b8808160a07dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TotalBytesAllocatedInFabs</definition>
        <argsstring>()</argsstring>
        <name>TotalBytesAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="60" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaca3a1407a187c460afd8a40325c0fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TotalBytesAllocatedInFabsHWM</definition>
        <argsstring>()</argsstring>
        <name>TotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac607f13e7b18e09b26587b4ff806a5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TotalCellsAllocatedInFabs</definition>
        <argsstring>()</argsstring>
        <name>TotalCellsAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="90" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4d27d976bc68dc3af8e3d6953b8e044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TotalCellsAllocatedInFabsHWM</definition>
        <argsstring>()</argsstring>
        <name>TotalCellsAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="105" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abddd18768ababe2fa8aa52a8ae441675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetTotalBytesAllocatedInFabsHWM</definition>
        <argsstring>()</argsstring>
        <name>ResetTotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="120" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2d23320cbd486726af914b5bdb5b6d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(long n, long s, size_t szt)</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f4b74c08c29c8a404ca762145408f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(long n, long s, std::size_t szt)</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab661fbf53776d9252951c57b5e7718b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::makeArray4</definition>
        <argsstring>(T *p, Box const &amp;bx)</argsstring>
        <name>makeArray4</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="98" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af46badc0ebf96b142a032fb4ec9e677b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ForEachImpl</definition>
        <argsstring>(B &amp;fab, const Box &amp;b, int c, int nc, F f)</argsstring>
        <name>ForEachImpl</name>
        <param>
          <type>B &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1475" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee9e40a6bd4e638b22663e0c0249d8d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class B</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ForEachIVImpl</definition>
        <argsstring>(B &amp;fab, const Box &amp;b, int c, int nc, F f)</argsstring>
        <name>ForEachIVImpl</name>
        <param>
          <type>B &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" line="1501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFab.H" bodystart="1501" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07131f5c4527f95edc39856e49949eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tto</type>
          </param>
          <param>
            <type>class Tfrom</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cast</definition>
        <argsstring>(BaseFab&lt; Tto &gt; &amp;tofab, BaseFab&lt; Tfrom &gt; const &amp;fromfab, Box const &amp;bx, SrcComp scomp, DestComp dcomp, NumComps ncomp)</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tto &gt; &amp;</type>
          <declname>tofab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tfrom &gt; const &amp;</type>
          <declname>fromfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFabUtility.H" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseFabUtility.H" bodystart="11" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a29c802e46ab63fd307f16df2ce478081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, int src_comp, int dest_comp, int ncomp, const Vector&lt; BCRec &gt; &amp;bc_dom, Vector&lt; BCRec &gt; &amp;bcr)</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting array of BCs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.cpp" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="9" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a539c997273a93fdaabfc2a131c4425cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BCRec &amp;b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.cpp" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72fcd633cd066d425067db071181223b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, const BCRec &amp;bc_dom, BCRec &amp;bcr)</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting a BC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.H" line="142" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCRec.H" bodystart="142" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b7407c69f5df5cb424eccddb336331b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillDomainBoundary</definition>
        <argsstring>(MultiFab &amp;phi, const Geometry &amp;geom, const Vector&lt; BCRec &gt; &amp;bc)</argsstring>
        <name>FillDomainBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCUtil.cpp" line="8" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BCUtil.cpp" bodystart="8" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a8c3c95822fc26d529026c5ef8b9308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Box &amp;bx)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Write an ASCII representation to the ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" bodystart="18" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac7b44499bc56506bcf5ed89ec42bc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;os, Box &amp;bx)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Read from istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" bodystart="39" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad871bc2fa6939b610a2ad14b3055627f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AllGatherBoxes</definition>
        <argsstring>(Vector&lt; Box &gt; &amp;bxs)</argsstring>
        <name>AllGatherBoxes</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>bxs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.cpp" bodystart="107" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3ab74a1b499759c2a4418335e66aac00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int i)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in all directions by given amount. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1070" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1070" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7237196f37be27885d51d3ec59fb37d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;v)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in each direction by specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1080" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1080" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87b1d55f042637bfb7defd8231c16365" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in direction idir be n_cell cells. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1090" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1090" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7a0aad54e8908dc5f5493830e0d396c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::growLo</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell)</argsstring>
        <name>growLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1099" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1099" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a540ef00ee9cfd347b334ac07e254334c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::growHi</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell)</argsstring>
        <name>growHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1108" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1108" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4031a5b0f85cd24e5c2705b4178536e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, int ref_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1126" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a767d040d96a5792ad199b0c6fbd4af7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1144" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81d255eb1646965dfa1ca4df2cdf8f5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, int ref_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1160" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1160" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af3815d4a169d299329749d2b4fcda721" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1176" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7229d8545cfc0ea39d45354711d4e5ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, int dir, int nzones)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with indices shifted by nzones in dir direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1186" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9c568d373e66a26e6d075904854e5dbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;nzones)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1195" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac580e8e50d0b0db148206dcf35c9df1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b, int dir)</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in direction dir that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. NOTE: equivalent to b.convert(dir,NODE) NOTE: error if b.type(dir) == NODE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1209" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa82469a89cc879bd793115f5da1481d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in all directions that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1222" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a249113c1eb21c759dab73b10a7d4ecf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with different type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1232" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c9ddb102accd4794d2ccedc1842dd69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IndexType &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1241" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a662eb2a651f7223db9bf62983d15f5c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b, int dir)</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in direction dir that is enclosed by b. NOTE: equivalent to b.convert(dir,CELL) NOTE: error if b.type(dir) == CELL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1256" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a82465622a69594b037c70a084ff4434a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b)</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in all directions that is enclosed by b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1269" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1269" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6d03c8a6f99b2adaa3b6c0413aa57ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::bdryLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1)</argsstring>
        <name>bdryLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the low side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1282" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77baa01d9eced2d7e5c5151211a42bfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::bdryHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1)</argsstring>
        <name>bdryHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the high side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1303" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1303" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af626f938226daff3e0afa019c7f88c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::bdryNode</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1)</argsstring>
        <name>bdryNode</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to bdryLo and bdryHi except that it operates on the given face of box b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1325" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8678e2680f6757ab489a2f09efb533be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::adjCellLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1)</argsstring>
        <name>adjCellLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the cell centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> of length len adjacent to b on the low end along the coordinate direction dir. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is identical to b in the other directions. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and b have an empty intersection. NOTE: len &gt;= 1 NOTE: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval = b.adjCellLo(b,dir,len) is equivalent to the following set of operations: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval(b); retval.convert(dir,Box::CELL); retval.setrange(dir,retval.smallEnd(dir)-len,len);. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1365" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1365" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa0778ec9d3b77f068893975a38f11fdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::adjCellHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1)</argsstring>
        <name>adjCellHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo but builds an adjacent <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the high end. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1384" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1384" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a758aba2eafc07264099cadcc6ad260ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::adjCell</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1)</argsstring>
        <name>adjCell</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo and adjCellHi; operates on given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1404" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1404" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24fe52f39e34b20dac818eb73af5e2b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Box amrex::minBox</definition>
        <argsstring>(const Box &amp;b1, const Box &amp;b2)</argsstring>
        <name>minBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to that of the minimum <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> containing both the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the argument. Both Boxes must have identical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1438" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a47d61948fc32994fdf5e72090a97d41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::lbound</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1453" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1453" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3c96656cd70fd8fd4022cfb81deb15e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::ubound</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1466" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1466" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac45a22a20dc106418cb6f2968bc3dcad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::begin</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1479" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1479" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9519b5209a86bace52c1d901c5bb5aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::end</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1492" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a93ec5d2632a2bdd8ab12f30be8e8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::length</definition>
        <argsstring>(Box const &amp;box)</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1505" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1505" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adda81454acd3c18e34e4393c45c518db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Dim3 amrex::length</definition>
        <argsstring>(Box index_bounds, Box const &amp;work_domain)</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>index_bounds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>work_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1521" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1521" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f2414272fed31cce477047f9c48c4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Box amrex::getThreadBox</definition>
        <argsstring>(Box index_bounds, Box const &amp;work_domain)</argsstring>
        <name>getThreadBox</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
          <declname>index_bounds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>work_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1530" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1530" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af95cb111dafb1298311167c6b8fc726b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2)</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that covers all the argument Boxes in index space. The types are ignored. Thus, the arguments can have different index types, and the returned <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>&apos;s index type has no meaning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1544" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1544" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a283979cadf605a71293f80ae3d74a1ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2, Box const &amp;b3)</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1553" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1553" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3cc16e1ec1066892c2d69dc8532fa02e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1)</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1559" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1559" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7b9e14eb26298da3af516e7f2d588ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::getCell</definition>
        <argsstring>(Box const *boxes, int nboxes, long icell)</argsstring>
        <name>getCell</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const *</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type>long</type>
          <declname>icell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" line="1566" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Box.H" bodystart="1566" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada7c77f7ac84c643ea21113e4ff5f2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray &amp;ba)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Write a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to an ostream in ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1424" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4b25f1a81ffa836ed7356d6da7e814e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::boxComplement</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxComplement</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the the complement of b2 in b1in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1448" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1448" bodyend="1452"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8c00ae57393c9f6665f88b80e3cdfb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxArray &amp;ba)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the complement of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> ba in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1455" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1455" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a31f38031bc51519297d88d3234115277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, int ng=0)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1462" bodyend="1485"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2fa5535ba8d983023e1a6bd61c9a4880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, const IntVect &amp;ng)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1488" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1488" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a172c409fe49ab498d9910cc19b732346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the intersection of two BoxArrays. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1514" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1514" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f75454b7ddd1be750318c754c3b1ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const BoxList &amp;bl)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from the intersection of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1527" bodyend="1536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af37f380f72af598af4865070235664c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1539" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1539" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a911442fbfdd591235baf90cac01d9856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1547" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1547" bodyend="1552"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22ce5ec6a27aa7bce43ca708cec77023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1555" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1555" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255709aafea190412cf8a963f450ebc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1563" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1563" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a719e505b04b336141e1a9a6ab52ecbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::GetBndryCells</definition>
        <argsstring>(const BoxArray &amp;ba, int ngrow)</argsstring>
        <name>GetBndryCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Find the ghost cells of a given <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1571" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1571" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9e3d780b53dae76073bd07164d2e1cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readBoxArray</definition>
        <argsstring>(BoxArray &amp;ba, std::istream &amp;s, bool b)</argsstring>
        <name>readBoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReadSpecial</declname>
        </param>
        <briefdescription>
<para>Read a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a stream. If b is true, read in a special way. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1629" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1629" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89eb9459b4109c4f9a9b3225abae29f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::match</definition>
        <argsstring>(const BoxArray &amp;x, const BoxArray &amp;y)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Note that two BoxArrays that match are not necessarily equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1658" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1658" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae7f2c81407f110284eec40dface36cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1BoxArray_1_1RefID" kindref="compound">BoxArray::RefID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" line="1671" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1672" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fb0e9220f2aa85a365f7ec254f2e3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::intersect</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compute the intersection of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af32b91948787281bd9c0c691f3f355dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::refine</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine all Boxes in the domain by the refinement ratio and return the result in dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15969b1b7e5e1431ce9aea3b513ec98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::accrete</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int sz=1)</argsstring>
        <name>accrete</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin by size sz and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7fdcd82c18fdf6c33f4194da8e7da46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::coarsen</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen all Boxes in the domain by the refinement ratio. The result is placed into a new <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a417fa2fe3545ffe81b848760bbe1bcd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref></type>
        <definition>BoxDomain amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxDomain &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns the complement of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="72" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a227c6302f26efd6a5c8fef40c77906f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxDomain &amp;bd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> to an ostream is ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" line="223" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="224" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe22e052a797bf296858f9330273112d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxList &amp;bl, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the intersection of bl with b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1aa5a62080b50fbc4c3646ddbc6c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::refine</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is refined by the given ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2def914169be100afac8106fd618b6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::coarsen</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is coarsened by the given ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac662c42f6780a1a61523d3bb4fa5fba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::accrete</definition>
        <argsstring>(const BoxList &amp;bl, int sz)</argsstring>
        <name>accrete</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is grown by the given size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="129" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af71361ab9190f8aeb8f70488669095c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::removeOverlap</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>removeOverlap</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> which covers the same area but has no overlapping boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="138" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07499fc06f1137386e318ccccca0b5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxList &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the complement of <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="306" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7cb1edb123daa9e2146ae0db8e2ed910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::boxDiff</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the compliment of b2 in b1in. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="506" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23d225d20bb2631874de8edff71dbc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::boxDiff</definition>
        <argsstring>(BoxList &amp;bl_diff, const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl_diff</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="516" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="516" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68a5f9135797f74f352eb1c3d966ab1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxList &amp;blist)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blist</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to an ostream in ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" line="775" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxList.cpp" bodystart="776" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa820e267be1d0dc2b3800553d57ae2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CoordSys &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CoordSys.cpp" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="476" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4058fe437a44e4e9367221fbd9fa9e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, CoordSys &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CoordSys.cpp" line="496" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="496" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad400e946944f8f475f2d6380aa14a231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int coord)</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="14" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac26e22356854f0e76eaf1caaa55f010d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord)</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="56" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad68346161ed50c00b7a1bb6035bebd91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord)</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="95" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d89429afe7132a4e3c616e4d4be8846" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int coord)</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="14" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d5ab6b8bb9147a809a079659678d9a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord)</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="65" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaad93bc55e38d5293ee2284b5136c35b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord)</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="145" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a3d3f711243a9a5a973dd44a2174e1529" kindref="member">AMREX_GPU_GLOBAL</ref> void</type>
        <definition>AMREX_GPU_GLOBAL void amrex::launch_global</definition>
        <argsstring>(L f0)</argsstring>
        <name>launch_global</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="721" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="721" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab00122e9945b91351e217899154404ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a3d3f711243a9a5a973dd44a2174e1529" kindref="member">AMREX_GPU_GLOBAL</ref> void</type>
        <definition>AMREX_GPU_GLOBAL void amrex::launch_global</definition>
        <argsstring>(L f0, Lambdas...fs)</argsstring>
        <name>launch_global</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="724" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="724" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af976b290cc281d74e633685ab74c1a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::call_device</definition>
        <argsstring>(L f0)</argsstring>
        <name>call_device</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="727" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="727" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3476fc2eecec3abf5eaa6015b9abae8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::call_device</definition>
        <argsstring>(L f0, Lambdas...fs)</argsstring>
        <name>call_device</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="730" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acccfedbc2e9ec3c54e9ebf4936896d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0)</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="735" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="735" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e46daf4ff29f01976c0f6990bc99de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0, Lambdas &amp;&amp;...fs)</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="738" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="738" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c49271830e95828382c96c3bdb4cbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::launch</definition>
        <argsstring>(T const &amp;n, L &amp;&amp;f)</argsstring>
        <name>launch</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="920" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="920" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af62e190d903bd4142ab46ab917712531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::For</definition>
        <argsstring>(T n, L &amp;&amp;f)</argsstring>
        <name>For</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="927" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="927" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8ba066dc21b54f86add87b6d05d270c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::ParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="936" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="936" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9282ca5469233f3b226f0ee338f8e3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::For</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f)</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="946" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="946" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3ee4d7b20542ccc00142ae8d9d69c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="959" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="959" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af76c3bfd7da6b4ae6b42ee819dc6fd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::For</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f)</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="973" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="973" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadaa56c3462a266d6dad5dc8a8d12066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_FORCE_INLINE void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" line="988" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_CudaLaunch.H" bodystart="988" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e73900b0d0952fb20c0d612257055f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::knapsack</definition>
        <argsstring>(const std::vector&lt; long &gt; &amp;wgts, int nprocs, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;result, Real &amp;efficiency, bool do_full_knapsack, int nmax)</argsstring>
        <name>knapsack</name>
        <param>
          <type>const std::vector&lt; long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_full_knapsack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="581" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="581" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b11db86486b941e833b78ea24165c01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Distribute</definition>
        <argsstring>(const std::vector&lt; SFCToken &gt; &amp;tokens, int nprocs, Real volpercpu, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;v)</argsstring>
        <name>Distribute</name>
        <param>
          <type>const std::vector&lt; SFCToken &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>volpercpu</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="938" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="938" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e9865ac3868b0b19a46f021f2db2421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping &amp;pmap)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Our output operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1564" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1565" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a1640fc2ba97306ea4b3546daa1e6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1DistributionMapping_1_1RefID" kindref="compound">DistributionMapping::RefID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1583" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1584" bodyend="1588"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0bc81ab4fe0135fc65a2b5154ff25ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_FA_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_FA_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" line="147" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a049702dd862399b25a2acf1c140bf4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FabArrayBase::BDKey &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">FabArrayBase::BDKey</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" line="1677" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1678" bodyend="1682"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad44c272ba71e86300dd3ac8bd9f56e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="14" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee7f1a1ee2e02f8e4260b35a242698dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="73" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a757cbebc6f1c20ccca3af6e64a15f174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="134" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab293beb22abf7411765563a0674c6060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="196" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="196" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9b728058913224a00c8ed52723033b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="261" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68c3578a653478035603a4f59fe8e4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="327" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="327" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1691f89dd29b661d3d2154eddc915de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="392" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad48e997a56ba7e82606ed1670cf89003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="458" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="458" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3d8f8cdbc23cd49eec81272457c6e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="516" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="516" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3ecc8bd8b0ccf312a849b8b0362044d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="576" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="576" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c2b498e70292eed35ae41e1bdd88e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="634" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="634" bodyend="689"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a376ff66b5e6a76d195cace00df41d05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::printCell</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;mf, const IntVect &amp;cell, int comp=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>printCell</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="classamrex_1_1IntVect_1acfa290124ab75f4a94ce37ef98870174" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="693" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="693" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab72e53672887ede3d7ddc5f65002700e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="723" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="723" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae53cc004fbab26533ec33294445a4d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="731" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="731" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1036d99710a96586826f090a3266f5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="755" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe39b5ec64aab9ed8e59747f0983d848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="763" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="763" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54b8b46deca518b441b849bbd1ceda02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="787" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afeebec2f58b85bfde5b88b30810cd82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="795" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="795" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec148f53c2d7fcc3b00c9e91999d4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="819" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="819" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71808e748d2cf6ea301231f278269b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="827" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="827" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f3bb9afb6e1fdfc272654ee6923492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="851" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="851" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98b5b165f2a8926b40da786a678ed7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="859" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="859" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a67d468c456558249ade6f9b145d719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="882" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="882" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19b3cf73acf195779e25b011bf419818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" line="890" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="890" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac185c39750011cc24fb8c1a0b872a34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntDescriptor &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> to an ostream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="53" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ed9b6ea967b3a6cebc43973e1440e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntDescriptor &amp;id)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> from an istream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="69" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69c1f9f47c8c546e09801fc8cf9a1cb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>static const int* amrex::selectOrdering</definition>
        <argsstring>(int prec, int ordering)</argsstring>
        <name>selectOrdering</name>
        <param>
          <type>int</type>
          <declname>prec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="180" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="180" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae1c839b11e4a1bcb2586d8aedab4f59e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ONES_COMP_NEG</definition>
        <argsstring>(long &amp;n, int nb, long incr)</argsstring>
        <name>ONES_COMP_NEG</name>
        <param>
          <type>long &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>long</type>
          <declname>incr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="254" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="254" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae59d387db41e0a212cc803bf4c72cf3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::_pd_get_bit</definition>
        <argsstring>(char *base, int offs, int nby, const int *ord)</argsstring>
        <name>_pd_get_bit</name>
        <param>
          <type>char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="273" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="273" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b51e4b00bca68c55952c880b2ae0337" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long amrex::_pd_extract_field</definition>
        <argsstring>(char *in, int offs, int nbi, int nby, const int *ord)</argsstring>
        <name>_pd_extract_field</name>
        <param>
          <type>char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="303" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="303" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20de0f0e652b28c113a655840fe64eb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::_pd_btrvout</definition>
        <argsstring>(char *out, long nb, long nitems)</argsstring>
        <name>_pd_btrvout</name>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="379" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="379" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cea431d3f24bfcb6da0dae43ee0acb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_insert_field</definition>
        <argsstring>(long in_long, int nb, char *out, int offs, int l_order, int l_bytes)</argsstring>
        <name>_pd_insert_field</name>
        <param>
          <type>long</type>
          <declname>in_long</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="411" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="411" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3daae71af784ea861908589aa58b9e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_set_bit</definition>
        <argsstring>(char *base, int offs)</argsstring>
        <name>_pd_set_bit</name>
        <param>
          <type>char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="475" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0e5bad82db8e32ee375ea9a22ba4353" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::_pd_reorder</definition>
        <argsstring>(char *arr, long nitems, int nbytes, const int *ord)</argsstring>
        <name>_pd_reorder</name>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="495" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad76fc6fd65a6f98aa517265ac59c99a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::permute_real_word_order</definition>
        <argsstring>(void *out, const void *in, long nitems, const int *outord, const int *inord, int REALSIZE)</argsstring>
        <name>permute_real_word_order</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type>int</type>
          <declname>REALSIZE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="520" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="520" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2cbc645bf853e3fd5b0ce829f5f032ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PD_fconvert</definition>
        <argsstring>(void *out, const void *in, long nitems, int boffs, const long *outfor, const int *outord, const long *infor, const int *inord, int l_order, int l_bytes, int onescmp)</argsstring>
        <name>PD_fconvert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>int</type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const long *</type>
          <declname>infor</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l_bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>onescmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="611" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="611" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae98f672f21ad70c104a6dea7813399d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_fixdenormals</definition>
        <argsstring>(void *out, long nitems, const long *outfor, const int *outord)</argsstring>
        <name>PD_fixdenormals</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>outord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="782" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="782" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a571e81ef7e9fdb96f23e2691c59e1b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const RealDescriptor &amp;rd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defname>rd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> to an ostream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="869" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="870" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a543f68ea96151adca9c24601b7f472e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealDescriptor &amp;rd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> from an istream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="886" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="886" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a323846470ccf5b89fecb4cfad2f04de5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_convert</definition>
        <argsstring>(void *out, const void *in, long nitems, int boffs, const RealDescriptor &amp;ord, const RealDescriptor &amp;ird, const IntDescriptor &amp;iid, int onescmp=0)</argsstring>
        <name>PD_convert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>int</type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ird</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>iid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>onescmp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" line="909" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="909" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6013bb90a6872541127823fe4e6d8d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" line="952" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="953" bodyend="959"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ff574ad6dd00e11abbe7b34c9233e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" line="962" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="962" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2da263606d6e874fdce31e2521f1bced" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::filcc_cell</definition>
        <argsstring>(const IntVect &amp;iv, FArrayBox &amp;dest_fab, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>filcc_cell</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest_fab</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bcr</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>bcomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>orig_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FilCC_1D_C.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FilCC_1D_C.H" bodystart="13" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad287398c706f3a1775e0954b73e5c779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Geometry &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5086c850dfa16df677225c8c1139e466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Geometry &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="38" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73fb53c873d555a7a3cc7b33e88a5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IndexType &amp;itype)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Write an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.cpp" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="10" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab982b91919e6fa7eed439d20fc794c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IndexType &amp;itype)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Read an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.cpp" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="30" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac25dfba1079e742467f752e4ee21450f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int16_t</type>
        <definition>std::int16_t amrex::swapBytes</definition>
        <argsstring>(std::int16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="5" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="5" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a591f0270c546f1ece0504803e064d8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t amrex::swapBytes</definition>
        <argsstring>(std::int32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="10" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aafe4e1214f81026ac1c1704afef4ad79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t amrex::swapBytes</definition>
        <argsstring>(std::int64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad65cae2ff531a4079a272c48094ce223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint16_t</type>
        <definition>std::uint16_t amrex::swapBytes</definition>
        <argsstring>(std::uint16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="23" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe5aa643ac55845309ffb09b6cd6bc6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t amrex::swapBytes</definition>
        <argsstring>(std::uint32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa67c20a40ddd4aeebbbb36e32af4b546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::swapBytes</definition>
        <argsstring>(std::uint64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0718da697f64bda3be2152538b70d4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const From *data, std::size_t size, std::ostream &amp;os, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const From *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.H" line="22" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.H" bodystart="22" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8ec915a2cffc7c342e1f15e52cbd697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(To *data, std::size_t size, std::istream &amp;is, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type>To *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntConv.H" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a56a98cb29892cdc924be9c0c6b83cda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3b2b2af01369829d3b37006cd625fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aae7ec7458ff4c93dd73295a9a1680003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::operator+</definition>
        <argsstring>(int s, const IntVect &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="609" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="609" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aedc3e4100c43e39fa3370cc005640a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE AMREX_GPU_HOST_DEVICE IntVect amrex::operator-</definition>
        <argsstring>(int s, const IntVect &amp;p)</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns -p + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="617" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9177bfa13e1f759b560a59c42188723a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::operator*</definition>
        <argsstring>(int s, const IntVect &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p * s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="624" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="624" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af030cf6f4fd19d9e092d9af517ca7d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::min</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise minimum of two argument IntVects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="636" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="636" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5dfec0f824f9542a90dd78d1352c6c53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::max</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise maximum of two argument IntVects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="651" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="651" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab5985bb80e3f71d5a2791b1a2cd502c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::BASISV</definition>
        <argsstring>(int dir)</argsstring>
        <name>BASISV</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a basis vector in the given coordinate direction; eg. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> BASISV(1) == (0,1,0). Note that the coordinate directions are zero based. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="667" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="667" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c00c94d085d319570542fa2a5685460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::scale</definition>
        <argsstring>(const IntVect &amp;p, int s)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by multiplying each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="682" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="682" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb0eeed949a457dd0885d73d499f9ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::reflect</definition>
        <argsstring>(const IntVect &amp;a, int ref_ix, int idir)</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the reflection of input in the plane which passes through ref_ix and normal to the coordinate direction idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="695" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="695" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad4b6ef0625e7547ec598ef1cb76d695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::diagShift</definition>
        <argsstring>(const IntVect &amp;p, int s)</argsstring>
        <name>diagShift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by adding s to each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="712" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="712" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeaa2cc460345d8ce2311cf21398e4c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p, int s)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise integer projection of p by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="724" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="724" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a846018a3b63332ec490f94a30d1a5d16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> which is the component-wise integer projection of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p1 by <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p2. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="740" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="740" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a423e3580397048f06172cb726e50cda5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Dim3 amrex::refine</definition>
        <argsstring>(Dim3 const &amp;coarse, IntVect const &amp;ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>coarse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="749" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="749" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a94581a5d23d8eac33bc45a8d02128922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE int amrex::coarsen</definition>
        <argsstring>(int i, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="761" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aace8540ce2dacb183cdf2f9746250667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE Dim3 amrex::coarsen</definition>
        <argsstring>(Dim3 const &amp;fine, IntVect const &amp;ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="767" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="767" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a92b62b2e393693e759cc2c4fec860c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Bytes &amp;bytes)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Bytes" kindref="compound">MemProfiler::Bytes</ref> &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MemProfiler.cpp" line="330" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="331" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3c395681af12cfb805dd6eb440b68cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Builds &amp;builds)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Builds" kindref="compound">MemProfiler::Builds</ref> &amp;</type>
          <declname>builds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MemProfiler.cpp" line="360" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="361" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b0d01afec5218e25096773af48821bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpAddBox</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, BoxList *returnUnfilledBoxes, Vector&lt; FillBoxId &gt; &amp;returnedFillBoxIds, const Box &amp;subbox, MultiFabId faid1, MultiFabId faid2, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpAddBox</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> *</type>
          <declname>returnUnfilledBoxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>returnedFillBoxIds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="13" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aabdb646a3159210a31ec8dc806eaf7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpFillFab</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, const Vector&lt; FillBoxId &gt; &amp;fillBoxIds, MultiFabId faid1, MultiFabId faid2, FArrayBox &amp;dest, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpFillFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>fillBoxIds</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="77" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab3991c1600b4dee3ed881f334007323a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::TilingIfNotGPU</definition>
        <argsstring>()</argsstring>
        <name>TilingIfNotGPU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFIter.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFIter.H" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8acbac8cbb276629aac10eebf6bee947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::The_MFIter_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_MFIter_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFIter.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MFIter.H" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace75305a25397036be723db66686dd01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillBoundary</definition>
        <argsstring>(Vector&lt; MultiFab * &gt; const &amp;mf, const Periodicity &amp;period)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>This is a special version of FillBoundary for warpx. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFab.cpp" line="1397" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFab.cpp" bodystart="1397" bodyend="1401"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad60aac176908ba51373d63ca49bef063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacaterMF</definition>
        <argsstring>()</argsstring>
        <name>GccPlacaterMF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFab.H" line="626" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFab.H" bodystart="626" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad64dcd62b16d9022d914f067d30d7918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_node_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const MultiFab &amp;nd, int scomp, int ncomp, int ngrow=0)</argsstring>
        <name>average_node_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average nodal-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="59" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78f180e5d6b1326d28084aa66f23d184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_edge_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab * &gt; &amp;edge, int ngrow)</argsstring>
        <name>average_edge_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This fills in ngrow ghost cells in the cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Both cell centered and edge centered MultiFabs need to have ngrow ghost values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="78" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95f27241ad83b39ffc015be064f382e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab * &gt; &amp;fc, int ngrow=0)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="102" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdb4a7a5967743f8bce82ac78128963d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Vector&lt; const MultiFab * &gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f698d44420a9a763d38668d63bf110e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, int ngrow)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="119" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c1981b67416871bbb9ea30a9de5bbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="147" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="147" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed6d9b873fcbb78c76c83c73aa39fb56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Average cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3661bd74499ec0a919b6633f7e5dc428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="186" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, int rr)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="230" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="230" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62368c6c303e36dc51ded56d7881920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average fine cell-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> using volume-weighting. This routine DOES NOT assume that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="237" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="237" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b27497dc89f64ae78be824f2187e698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, int rr)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a66304265cda72ba09821fedbd0998145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::sum_fine_to_coarse</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio, const Geometry &amp;cgeom, const Geometry &amp;fgeom)</argsstring>
        <name>sum_fine_to_coarse</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_Fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a coarsened version of the data contained in the S_fine <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> to S_crse, including ghost cells. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="301" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad04ddc51f3c2757b7749e1a28985cb0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> without volume weighting. This routine DOES NOT assume that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. Work for both cell-centered and nodal MultiFabs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="338" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a610379c3e81725b1696a50804000cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
<para>Average fine face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="415" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afcbe33f2d95c99ef4234b766f5fb8d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="426" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="426" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a8042ae490c1c69750d292dc69ee59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="432" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afffa551617afa39c891c442f06298f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="440" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="440" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aef18b07b3544ac6a7a4ee4fc819526cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average fine edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="486" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="486" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7722774dfdfaa46249b9c4180d95009f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_nodal</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_nodal</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
          <defname>S_fine</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
          <defname>S_crse</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>.</para><para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="515" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="515" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9853b376b9431740468fdf9e549553d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::print_state</definition>
        <argsstring>(const MultiFab &amp;mf, const IntVect &amp;cell, const int n=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>print_state</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Output state data for a single zone. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="540" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78ee47545ca66e809f4f680e7513cbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write each fab individually. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="545" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="545" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f903b417da5fb1d02ea65d0bbf8934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, int comp, int ncomp, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="550" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="550" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ca286511a003d2770dba9c37ab53c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::ToMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="558" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4e1e9cb035ab3904dac7c511d1f63325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; long &gt; &gt;</type>
        <definition>FabArray&lt; BaseFab&lt; long &gt; &gt; amrex::ToLongMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToLongMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to long. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="563" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a431197f206b148529308a7796d5039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::get_slice_data</definition>
        <argsstring>(int dir, Real coord, const MultiFab &amp;cc, const Geometry &amp;geom, int start_comp, int ncomp, bool interpolate)</argsstring>
        <name>get_slice_data</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fstart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>interpolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a slice from the given cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> at coordinate &quot;coord&quot; along direction &quot;dir&quot;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="568" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="568" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adb6a25ecc3b0a78548904c23c20c52a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const MultiFab &amp;cmf, const BoxArray &amp;fba, const IntVect &amp;ratio)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> that has the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> as the coarse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> cmf. Cells covered by the coarsened fine grids are set to one, whereas other cells are set to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="614" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b123b02ae07d8edcaaad7acdbfda099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const BoxArray &amp;fba, const IntVect &amp;ratio)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="619" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="619" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b179e68f86c4a06d176f587ec95148c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes divergence of face-data stored in the umac <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. It is assumed that umac has at least 1 ghost cell and ghost cells have been filled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="647" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="647" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19deaea1de1f8799e4c319910ef2dae4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::isMFIterSafe</definition>
        <argsstring>(const MultiFab &amp;x, const MultiFab &amp;y)</argsstring>
        <name>isMFIterSafe</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is it safe to have these two MultiFabs in the same MFiter? Ture means safe; false means maybe. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="123" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24aa5b51c299dd1337df192681f47e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::cast</definition>
        <argsstring>(U const &amp;mf_in)</argsstring>
        <name>cast</name>
        <param>
          <type>U const &amp;</type>
          <declname>mf_in</declname>
        </param>
        <briefdescription>
<para>example: auto mf = amrex::cast&lt;MultiFab&gt;(imf); </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="148" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="148" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81905902a4760dcc003118f63c9a8cba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_nd_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;ndfab, int cccomp, int ndcomp, int ncomp)</argsstring>
        <name>amrex_avg_nd_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ndfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="14" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab5d905f058679a9ae81dc61395993d20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;exfab, int cccomp)</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>exfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada3b662f81a0f4ff661b1eb0190e50e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;fxfab, int cccomp, GeometryData const &amp;gd)</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="47" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac59cc605513d65f57a2a057b8d914a55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, FArrayBox &amp;fxfab, FArrayBox const &amp;ccfab, GeometryData const &amp;gd)</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="100" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8bc0ca02f27255323f876d9209b6da28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_faces</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;crsefab, FArrayBox const &amp;finefab, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int idir)</argsstring>
        <name>amrex_avgdown_faces</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="154" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a399f220510ef282ea0f7c875e3ed5ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_edges</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;crsefab, FArrayBox const &amp;finefab, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int idir)</argsstring>
        <name>amrex_avgdown_edges</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="174" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa45eb4400f8e7443f574e6eb853945ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;crsefab, FArrayBox const &amp;finefab, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio)</argsstring>
        <name>amrex_avgdown</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="199" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="199" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81b9bc6fd63d3f0430c1c607cac08750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_with_vol</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;crsefab, FArrayBox const &amp;finefab, FArrayBox const &amp;finevolfab, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio)</argsstring>
        <name>amrex_avgdown_with_vol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finevolfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="225" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a27bbd87e135d2616ef4a74c8ef0d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avgdown_nodes</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;crsefab, FArrayBox const &amp;finefab, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio)</argsstring>
        <name>amrex_avgdown_nodes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crsefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>finefab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="253" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a752933b495110f47b5adcf26fb78d817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;divufab, FArrayBox const &amp;ufab, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv)</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>divufab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="274" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9c6a2de0ed3f4a91a1128e6673f1d568" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;exfab, FArrayBox const &amp;eyfab, int cccomp)</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>exfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>eyfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="33" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a53ceb19603bbb842ccb71eb485ac4dca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;fxfab, FArrayBox const &amp;fyfab, int cccomp)</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a08e5a989236fb75584e7955b0ecef590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, Box const &amp;ybx, FArrayBox &amp;fxfab, FArrayBox &amp;fyfab, FArrayBox const &amp;ccfab)</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ccfab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="75" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa1b15a0b8e017ee27242d2eb01feb00d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;divufab, FArrayBox const &amp;ufab, FArrayBox const &amp;vfab, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv)</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>divufab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>vfab</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="302" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a388b93617c3080d326109d2711f2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;exfab, FArrayBox const &amp;eyfab, FArrayBox const &amp;ezfab, int cccomp)</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>exfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>eyfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ezfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="36" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab61a3516be718131ab3c524b74153933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;ccfab, FArrayBox const &amp;fxfab, FArrayBox const &amp;fyfab, FArrayBox const &amp;fzfab, int cccomp)</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>ccfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fzfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="61" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9628f8cba9e65de72f929a948070fac5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(Box const &amp;ndbx, Box const &amp;xbx, Box const &amp;ybx, Box const &amp;zbx, FArrayBox &amp;fxfab, FArrayBox &amp;fyfab, FArrayBox &amp;fzfab, FArrayBox const &amp;ccfab)</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fzfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ccfab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="86" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a50e99f1e774a169df9873e03f14816d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;divufab, FArrayBox const &amp;ufab, FArrayBox const &amp;vfab, FArrayBox const &amp;wfab, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv)</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>divufab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ufab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>vfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>wfab</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="406" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb2d78f47ea5994f10113d82b65acef4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_fill_slice_interp</definition>
        <argsstring>(Box const &amp;bx, FArrayBox &amp;slicefab, FArrayBox const &amp;fullfab, int scomp, int fcomp, int ncomp, int dir, Real coord, GeometryData const &amp;gd)</argsstring>
        <name>amrex_fill_slice_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>slicefab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fullfab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" bodystart="14" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac38f92b345723f71defea15e208ee644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Orientation &amp;o)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Write to an ostream in ASCII format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.cpp" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a0606a9b1a287b48d02aaa194e58c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Orientation &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.cpp" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_BARRIER, bl_pd_barrier)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_BARRIER</type>
        </param>
        <param>
          <type>bl_pd_barrier</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1834" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1834" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdad54fdf5e49fcf78c5851c2d333ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_COMMUNICATOR, bl_pd_communicator)(void *vcomm)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_COMMUNICATOR</type>
        </param>
        <param>
          <type>bl_pd_communicator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1839" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1839" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a13a84b814ae68622a1decbc5896cb9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_MYPROC, bl_pd_myproc)(int *myproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_MYPROC</type>
        </param>
        <param>
          <type>bl_pd_myproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1846" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1846" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f3592da9f9980ce90760b23644dadbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_NPROCS, bl_pd_nprocs)(int *nprocs)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_NPROCS</type>
        </param>
        <param>
          <type>bl_pd_nprocs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1851" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1851" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7788306c7eda72f04b685f775bc62f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IOPROC, bl_pd_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1856" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1856" bodyend="1859"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2cc5629467423a37af491ed73cfce050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_IS_IOPROC, bl_pd_is_ioproc)(int *ioproc)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_IS_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_is_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1861" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1861" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8c2498fd3c6453460fd3d4abc37bef62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_SECOND, bl_pd_second)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_SECOND</type>
        </param>
        <param>
          <type>bl_pd_second</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1866" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1866" bodyend="1869"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afce7ed63031be8af6fe799c2700ac9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_MAX_TO_IOPROC, bl_pd_reduce_real_max_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_REDUCE_REAL_MAX_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_max_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1882" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1882" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6d11645fcd0aa30ab599533c8eefa3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_REDUCE_REAL_SUM_TO_IOPROC, bl_pd_reduce_real_sum_to_ioproc)(double *r)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_REDUCE_REAL_SUM_TO_IOPROC</type>
        </param>
        <param>
          <type>bl_pd_reduce_real_sum_to_ioproc</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1887" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1887" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a140b050e7d7224f1ca159709dd8a2ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BL_FORT_PROC_DECL</definition>
        <argsstring>(BL_PD_ABORT, bl_pd_abort)()</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BL_PD_ABORT</type>
        </param>
        <param>
          <type>bl_pd_abort</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="1893" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="1893" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99b5e66ea694e5ca5a50ee2c335e8678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ParmParse::PP_entry &amp;pp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParmParse_1_1PP__entry" kindref="compound">ParmParse::PP_entry</ref> &amp;</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="114" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebd29bf8d5456e97aae77603a41a032f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::unused_table_entries_q</definition>
        <argsstring>(const ParmParse::Table &amp;table)</argsstring>
        <name>unused_table_entries_q</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1a328b966e328a476f04a86c758c9bc6c1" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" line="1011" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1011" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8975f518b8ac91d8cc884e26a18d7849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::finalize_table</definition>
        <argsstring>(const std::string &amp;pfx, const ParmParse::Table &amp;table)</argsstring>
        <name>finalize_table</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1a328b966e328a476f04a86c758c9bc6c1" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" line="1036" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1036" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::setFileName</definition>
        <argsstring>()</argsstring>
        <name>setFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::openFile</definition>
        <argsstring>()</argsstring>
        <name>openFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::pout</definition>
        <argsstring>()</argsstring>
        <name>pout</name>
        <briefdescription>
<para>the stream that all output except error msgs should use </para>        </briefdescription>
        <detaileddescription>
<para>Use this in place of std::cout for program output.</para><para>In serial this is the standard output, in parallel it is a different file on each proc (see <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>).</para><para>Can be used to replace std::cout. In serial this just returns std::cout. In parallel, this creates a separate file for each proc called &lt;basename&gt;.n where n is the procID and &lt;basename&gt; defaults to &quot;pout&quot; but can be set by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>. Output is then directed to these files. This keeps the output from different processors from getting all jumbled up. If you want fewer files, you can use <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> parameter amrex.pout_int=nproc and it will only output every nproc processors pout.n files (where nnproc == 0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="110" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setPoutBaseName</definition>
        <argsstring>(const std::string &amp;a_Name)</argsstring>
        <name>setPoutBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a_Name</declname>
        </param>
        <briefdescription>
<para>Set the base name for the parallel output files used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Changes the base part of the filename for <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files.</para><para>If the file has already been used and this is a different name, close the current file and open a new one.</para><para>When in parallel, changes the base name of the <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files. If <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> has already been called, it closes the current output file and opens a new one (unless the name is the same, in which case it does nothing). In serial, ignores the argument and does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="156" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b6b28892d1b7c4a6845bcf08ba7a461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::poutFileName</definition>
        <argsstring>()</argsstring>
        <name>poutFileName</name>
        <briefdescription>
<para>return the current filename as used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>Accesses the filename for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file.</para><para>in serial, just return the string &quot;cout&quot;; abort if MPI is not initialized.</para><para>Returns the name used for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file. In parallel this is &quot;\&lt;pout_basename\&gt;.\&lt;procID\&gt;&quot;, where &lt;pout_basename&gt; defaults to &quot;pout&quot; and can be modified by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>, and &lt;procID&gt; is the local proc number. In serial, this always returns the string &quot;cout&quot;. It is an error (exit code 111) to call this in parallel before MPI_Initialize(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp" bodystart="178" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e1c541c50331b9a3c005b80b4503f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelPath</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the name of the level directory, e.g., Level_5 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4ba0c733501dc74a5d254dac0bfc47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabHeaderPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabHeaderPath</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the path of the multifab to write to the header, e.g., Level_5/Cell </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a438b71d250fb65fd385716c745be94ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelFullPath</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelFullPath</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path of the level directory, e.g., plt00005/Level_5 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="26" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81e8d2ba5c7abaf7b2ca9bd2f43d5fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabFileFullPrefix</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabFileFullPrefix</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path multifab prefix, e.g., plt00005/Level_5/Cell </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="38" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa099c9a81b678f94bc075120f85f0df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PreBuildDirectorHierarchy</definition>
        <argsstring>(const std::string &amp;dirName, const std::string &amp;subDirPrefix, int nSubDirs, bool callBarrier)</argsstring>
        <name>PreBuildDirectorHierarchy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dirName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subDirPrefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nSubDirs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callBarrier</declname>
        </param>
        <briefdescription>
<para>prebuild a hierarchy of directories dirName is built first. if dirName exists, it is renamed. then build dirName/subDirPrefix_0 .. dirName/subDirPrefix_nSubDirs-1 if callBarrier is true, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier()</ref> after all directories are built <ref refid="namespaceamrex_1_1ParallelDescriptor_1a30b2c3b76c069be9c22ea40b9b8c5d75" kindref="member">ParallelDescriptor::IOProcessor()</ref> creates the directories </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;dirName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;subDirPrefix</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nSubDirs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callBarrier</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="53" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeaa559cd77a4c889c84b144f59a6e35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteGenericPlotfileHeader</definition>
        <argsstring>(std::ostream &amp;HeaderFile, int nlevels, const Vector&lt; BoxArray &gt; &amp;bArray, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix)</argsstring>
        <name>WriteGenericPlotfileHeader</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>HeaderFile</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>bArray</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
          <defval>&quot;HyperCLaw-V1.1&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
          <defval>&quot;Level_&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
          <defval>&quot;Cell&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>write a generic plot file header to the file plotfilename/Header the plotfilename directory must already exist </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="70" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab16f5968ad28ec7664abd985a11e9c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="152" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87ec6f46642e5c4b2b89b545500be320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMLMF</definition>
        <argsstring>(const std::string &amp;plotfilename, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; Geometry &gt; &amp;geom)</argsstring>
        <name>WriteMLMF</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>write a plotfile to disk given: -plotfile name -vector of MultiFabs -vector of Geometrys variable names are written as &quot;Var0&quot;, &quot;Var1&quot;, etc. refinement ratio is computed from the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> vector &quot;time&quot; and &quot;level_steps&quot; are set to zero </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;plotfilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="234" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace783f22796d80958dc5a14440a432fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHeaders</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHeaders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="270" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="270" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5343920d9b5ee1307ca697274eca84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="327" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="327" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e3af8577a1ee3509e9bd184d2ab575a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const RealBox &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fa033d5f7e81438c45cc3b5f6af3443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, RealBox &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="46" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf4c933fca6a96ef914e6cd861d94bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::BASISREALV</definition>
        <argsstring>(int dir)</argsstring>
        <name>BASISREALV</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a basis vector in the given coordinate direction.<linebreak/>
 In 2-D:<linebreak/>
 BASISREALV(0) == (1.,0.); BASISREALV(1) == (0.,1.).<linebreak/>
 In 3-D:<linebreak/>
 BASISREALV(0) == (1.,0.,0.); BASISREALV(1) == (0.,1.,0.); BASISREALV(2) == (0.,0.,1.).<linebreak/>
 Note that the coordinate directions are based at zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="188" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23506c0800310d5ae6954b08f257ea42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator/</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component divided by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="197" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab38657c34800dd70bc715af6cf7664d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator+</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with a scalar <emphasis>s</emphasis> added to each component. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="203" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd445040bd79a26982f709fde5285e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator-</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="210" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afccfd209cb56e6e9676548761804f657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator*</definition>
        <argsstring>(Real s, const RealVect &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component multiplied by a scalar <emphasis>s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="217" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3dcbf1f5d8d1e62ce8e0327dfb928d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator/</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise quotient <emphasis>p / s</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="224" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7e969e35cc4fd9b0e617fb99e6fcc0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator+</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise sum of RealVects <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a03a8632ee6b45cb0f9ced5f2bc29049b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator-</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="238" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a181edd33e9c1bf59a2ce06e41cb2c86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::operator*</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise product of <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7f948f87bc8aa58451aa8b78e9c883a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const RealVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> to the given output stream in ASCII. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="251" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89d1ab126c05c2eac37ba679a7415a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="259" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8bc7c3f3b28b66bb13e82c9ffb5aa42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::scale</definition>
        <argsstring>(const RealVect &amp;p, Real s)</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> obtained by multiplying each of the components of the given <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by a scalar. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="605" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="605" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1cde406ea8e49a9844e73180a5519d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::min</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise minimum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="662" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="662" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88f35e93c2ab2facab21593b162a801f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::max</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise maximum of two argument RealVects. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" line="671" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_RealVect.H" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f286b9916f92985abdf7743382f6307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ignore_unused</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>ignore_unused</name>
        <param>
          <type>const T &amp;</type>
        </param>
        <briefdescription>
<para>Useful C++ Utility Functions. </para>        </briefdescription>
        <detaileddescription>
<para>This shuts up the compiler about unused variables </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a107cab62d5043f039671cf5b68068ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::is_integer</definition>
        <argsstring>(const char *str)</argsstring>
        <name>is_integer</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Return true if argument is a non-zero length string of digits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ba24cf7211301279ca446ff282a0f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; amrex::Tokenize</definition>
        <argsstring>(const std::string &amp;instr, const std::string &amp;separators)</argsstring>
        <name>Tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>instr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
<para>Splits &quot;instr&quot; into separate pieces based on &quot;separators&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="74" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67bf98d88c814ab458018afd16e64aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toLower</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toLower</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts all characters of the string into lower or uppercase based on std::locale. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="126" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb53573f5330e4753ad1b562e5dd95ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toUpper</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toUpper</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Concatenate</definition>
        <argsstring>(const std::string &amp;root, int num, int mindigits=5)</argsstring>
        <name>Concatenate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mindigits</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Returns rootNNNN where NNNN == num. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::UtilCreateDirectory</definition>
        <argsstring>(const std::string &amp;path, mode_t mode, bool verbose=false)</argsstring>
        <name>UtilCreateDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates the specified directories. path may be either a full pathname or a relative pathname. It will create all the directories in the pathname, if they don&apos;t already exist, so that on successful return the pathname refers to an existing directory. Returns true or false depending upon whether or not it was successful. Also returns true if path is NULL or &quot;/&quot;. mode is the mode passed to mkdir() for any directories that must be created (for example: 0755). verbose will print out the directory creation steps. </para>        </briefdescription>
        <detaileddescription>
<para>For example, if it is passed the string &quot;/a/b/c/d/e/f/g&quot;, it will return successfully when all the directories in the pathname exist; i.e. when the full pathname is a valid directory.</para><para>In a Windows environment, the path separator is a &apos;\&apos;, so that if using the example given above you must pass the string &quot;\\a\\b\\c\\d\\e\\f\\g&quot; (Note that you must escape the backslash in a character string),</para><para>Only the last mkdir return value is checked for success as errno may not be set to EEXIST if a directory exists but mkdir has other reasons to fail such as part of the path being a read-only filesystem (EROFS). If this function fails, it will print out an error stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="155" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CreateDirectoryFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>CreateDirectoryFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t create the directory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="246" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FileOpenFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>FileOpenFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t open the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="254" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cc0b90b2ed3e37910db70d81484fee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UnlinkFile</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>UnlinkFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Attempt to unlink the file. Ignore any errors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FileExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check if a file already exists. Return true if the filename is an existing file, directory, or link. For links, this operates on the link and not what the link points to. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="268" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::UniqueString</definition>
        <argsstring>()</argsstring>
        <name>UniqueString</name>
        <briefdescription>
<para>Create a (probably) unique string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="275" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateCleanDirectory</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateCleanDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a new directory, renaming the old one if it exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="284" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebce007d4152715af0cf44f3ab94d1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateDirectoryDestructive</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateDirectoryDestructive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new directory, removing old one if it exists. This will only work on unix systems, as it has a system call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="307" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2d0c6a2a5153df0d38d7cde07a89c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilRenameDirectoryToOld</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilRenameDirectoryToOld</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Rename a current directory if it exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="337" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe890be0bd82650235456eabcf50e309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OutOfMemory</definition>
        <argsstring>()</argsstring>
        <name>OutOfMemory</name>
        <briefdescription>
<para>Aborts after printing message indicating out-of-memory; i.e. operator new has failed. This is the &quot;supported&quot; set_new_handler() function for BoxLib applications. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDist</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDist</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para>The algorithm uses a minimax approximation by rational functions and the result has a relative error whose absolute value is less than 1.15e-9.</para><para><simplesect kind="author"><para>Peter J. Acklam Time-stamp: 2002-06-09 18:45:44 +0200 E-mail: <ulink url="mailto:jacklam@math.uio.no">jacklam@math.uio.no</ulink> WWW URL: <ulink url="http://www.math.uio.no/~jacklam">http://www.math.uio.no/~jacklam</ulink></para></simplesect>
&quot;p&quot; MUST be in the open interval (0,1).</para><para>Entry points for Fortran:</para><para>REAL_T val call blinvnormdist(val)</para><para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="641" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0dace3a79fc48a8b02686c10363b70a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDistBest</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDistBest</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>        </briefdescription>
        <detaileddescription>
<para>Original FORTRAN77 version by Michael Wichura.</para><para>Michael Wichura, The Percentage Points of the Normal Distribution, Algorithm AS 241, Applied Statistics, Volume 37, Number 3, pages 477-484, 1988.</para><para>Our version is based on the C++ version by John Burkardt.</para><para>The algorithm uses a minimax approximation by rational functions and the result is good to roughly machine precision. This routine is roughly 30% more costly than <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">InvNormDist()</ref> above.</para><para>&quot;p&quot; MUST be in the open interval (0,1).</para><para>Entry points for Fortran:</para><para>REAL_T val call blinvnormdistbest(val)</para><para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="171" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="777" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a782cbf4ddd90250b3483f95844dea114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::RandomNormal</definition>
        <argsstring>(double mean, double stddev)</argsstring>
        <name>RandomNormal</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random double using C++11&apos;s mt19937. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) from a normal distribution with mean &apos;mean&apos; and standard deviation &apos;stddev&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="180" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="397" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2dbda9b9aada55aae2f6c7379fff09f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <briefdescription>
<para>Generate a psuedo-random double using C++11&apos;s mt19937. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) which is uniformly distributed on [0,1)-interval for each call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="189" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="409" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7916c1f3adf571c67baaf478cf139bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long amrex::Random_int</definition>
        <argsstring>(unsigned long n)</argsstring>
        <name>Random_int</name>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random int using C++11&apos;s mt19937. </para>        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom unsigned long integer which is uniformly distributed on [0,n-1]-interval for each call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="198" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="421" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a063e0c5d4ce2c053f2ed607639481832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InitRandom</definition>
        <argsstring>(unsigned long seed, int nprocs=ParallelDescriptor::NProcs())</argsstring>
        <name>InitRandom</name>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0455b3ad4f2a4c13b57d33e4c6325dca" kindref="member">ParallelDescriptor::NProcs</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the seed of the random number generator. </para>        </briefdescription>
        <detaileddescription>
<para>There is also an entry point for Fortran callable as:</para><para>INTEGER seed call blutilinitrand(seed)</para><para>or</para><para>INTEGER seed call blinitrand(seed) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="369" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a916b42a59d03ab2bbefddf68e90be0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetRandomSeed</definition>
        <argsstring>(unsigned long seed)</argsstring>
        <name>ResetRandomSeed</name>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="214" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1b283df95b292f478597bc503170459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SaveRandomState</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>SaveRandomState</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Save and restore random state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="219" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="433" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae45a9a3a96e46d7b15173894b25134fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RestoreRandomState</definition>
        <argsstring>(std::istream &amp;is, int nthreads_old, int nstep_old)</argsstring>
        <name>RestoreRandomState</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nthreads_old</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nstep_old</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="441" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2c1209819cd8dd79499c2b9f088120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UniqueRandomSubset</definition>
        <argsstring>(Vector&lt; int &gt; &amp;uSet, int setSize, int poolSize, bool printSet=false)</argsstring>
        <name>UniqueRandomSubset</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>uSet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>setSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>poolSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>printSet</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a unique subset of random numbers from a pool of integers in the range [0, poolSize - 1] the set will be in the order they are found setSize must be &lt;= poolSize uSet will be resized to setSize if you want all processors to have the same set, call this on one processor and broadcast the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="232" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="461" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf97cdbc0db387b57d9641d57cce591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NItemsPerBin</definition>
        <argsstring>(int totalItems, Vector&lt; int &gt; &amp;binCounts)</argsstring>
        <name>NItemsPerBin</name>
        <param>
          <type>int</type>
          <declname>totalItems</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>binCounts</declname>
        </param>
        <briefdescription>
<para>Fill binCounts with the number of items for each bin. The remainder items are randomly assigned. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="239" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="485" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15ea4e09dbb2ff1919ec42ea7702d5aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::CRRBetweenLevels</definition>
        <argsstring>(int fromlevel, int tolevel, const Vector&lt; int &gt; &amp;refratios)</argsstring>
        <name>CRRBetweenLevels</name>
        <param>
          <type>int</type>
          <declname>fromlevel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tolevel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>refratios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="242" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="511" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4025063cb67ccaf858eee2f9874998e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::HashDistributionMap</definition>
        <argsstring>(const DistributionMapping &amp;dm, int hashSize)</argsstring>
        <name>HashDistributionMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hashSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="525" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a127a5a54b39c1ac1b75483daf0350ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::HashBoxArray</definition>
        <argsstring>(const BoxArray &amp;ba, int hashSize)</argsstring>
        <name>HashBoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hashSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="251" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="553" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff6b4420435f9951710a37eda411db8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, const expect &amp;exp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1expect" kindref="compound">expect</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="911" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt;</type>
        <definition>amrex::Vector&lt; char &gt; amrex::SerializeStringArray</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;stringArray)</argsstring>
        <name>SerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1236" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>amrex::Vector&lt; std::string &gt; amrex::UnSerializeStringArray</definition>
        <argsstring>(const Vector&lt; char &gt; &amp;charArray)</argsstring>
        <name>UnSerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="294" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1249" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a09ef310468cc24552cfc73abfc282b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SyncStrings</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;localStrings, Vector&lt; std::string &gt; &amp;syncedStrings, bool &amp;alreadySynced)</argsstring>
        <name>SyncStrings</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>localStrings</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>syncedStrings</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>alreadySynced</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1074" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a003d372afe53e36bd0cc6c549c0d1e9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>long</type>
        <definition>long amrex::bytesOf</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="436" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab32cba3a0d91d29340ba231066f019ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>long</type>
        <definition>long amrex::bytesOf</definition>
        <argsstring>(const std::map&lt; Key, T, Compare &gt; &amp;m)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::map&lt; Key, T, Compare &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="305" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af0fd43716fb89a13154ed4c037ebe6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastBool</definition>
        <argsstring>(bool &amp;bBool, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastBool</name>
        <param>
          <type>bool &amp;</type>
          <declname>bBool</declname>
        </param>
        <param>
          <type>int</type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1264" bodyend="1276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60205e03d594df934b5b3afd723c764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastString</definition>
        <argsstring>(std::string &amp;bStr, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastString</name>
        <param>
          <type>std::string &amp;</type>
          <declname>bStr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="309" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1279" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1bfd620fc96f18d04313d70ccca85bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastStringArray</definition>
        <argsstring>(Vector&lt; std::string &gt; &amp;bSA, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastStringArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>bSA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1295" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cf9dce7670dcc62897405af53fafcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BroadcastArray</definition>
        <argsstring>(Vector&lt; T &gt; &amp;aT, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>aT</declname>
        </param>
        <param>
          <type>int</type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="353" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af353083e449d736188c80257c096f518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::USleep</definition>
        <argsstring>(double sleepsec)</argsstring>
        <name>USleep</name>
        <param>
          <type>double</type>
          <declname>sleepsec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1309" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a264e86a5ee72c5d32bf8498067ff2d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::second</definition>
        <argsstring>()</argsstring>
        <name>second</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1319" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a02a312aa2265ef6d255d9e482f4f4ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::hash_combine</definition>
        <argsstring>(uint64_t &amp;seed, const T &amp;val)</argsstring>
        <name>hash_combine</name>
        <param>
          <type>uint64_t &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="321" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="481" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab27dcf01fb1f9274d83e561a7509c005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t amrex::hash_vector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;vec, uint64_t seed=0xDEADBEEFDEADBEEF)</argsstring>
        <name>hash_vector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0xDEADBEEFDEADBEEF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="322" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="488" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b274b97d7cb074bb98afc24ff4ce40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="326" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5961f2b39209d08c50a7cb514d38e954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;...c)</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="333" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf8ee5f1fae69a2a3cec8c89143d3613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="340" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e72af527a6c012edf46e3e5c36ce6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;...c)</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" line="347" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.H" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4ad8b7a21907586ee3a86bda5163cd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="65" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a501f5be1e47c511f000546bcae72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2eb81423f83e826a61bafde352b67e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36a4c65f6872127d9a779ef9f971777d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad81d1dc85ec8a07638d52c68933abfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T * &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77fdd4258ec656fb99a6124a73501803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;T*&gt; &gt; amrex::GetVecOfVecOfPtrs</definition>
        <argsstring>(const Vector&lt; Vector&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="111" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aabc637934b6fa1a7b0664ad3b61f0f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; T * &gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc4288a3fe5ceaea66583df8f170785f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc731523d4241d981e7279b29c5d7a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::RemoveDuplicates</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec)</argsstring>
        <name>RemoveDuplicates</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Vector.H" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefc8755fb6847a4dc04d7de6a11bb9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const int *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeIntDescriptor())</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" kindref="member">FPC::NativeIntDescriptor</ref>()</defval>
        </param>
        <briefdescription>
<para>Functions for writing integer data to disk in a portable, self-describing manner. </para>        </briefdescription>
        <detaileddescription>
<para>Write int data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="5" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69bf266cc5fefb0b385d84f685dd0df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(int *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type>int *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; integers, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="29" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="29" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89e2fbb8fe2b7488d791a48affc4f5b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeLongData</definition>
        <argsstring>(const long *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeLongDescriptor())</argsstring>
        <name>writeLongData</name>
        <param>
          <type>const long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" kindref="member">FPC::NativeLongDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write long data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="53" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6fd22ad663e9cad373c721f38d30ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readLongData</definition>
        <argsstring>(long *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readLongData</name>
        <param>
          <type>long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; longs, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="77" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9790d1f61a6d21ce4e9f92c58ac0600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeRealData</definition>
        <argsstring>(const Real *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::NativeRealDescriptor())</argsstring>
        <name>writeRealData</name>
        <param>
          <type>const Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" kindref="member">FPC::NativeRealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write Real data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6f624229959bee80f1444371bb5babc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readRealData</definition>
        <argsstring>(Real *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readRealData</name>
        <param>
          <type>Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read Real data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f9c3dd444d301063e6190234413bda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFloatData</definition>
        <argsstring>(const float *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::Native32RealDescriptor())</argsstring>
        <name>writeFloatData</name>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1a56bb549e278ccc2611fd389c3d2b6bdb" kindref="member">FPC::Native32RealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write float data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="113" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c085d3b27d107f62bdb36f5ecc0f326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readFloatData</definition>
        <argsstring>(float *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readFloatData</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read float data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a583a444879c864fcc03845f637a122c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeDoubleData</definition>
        <argsstring>(const double *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::NativeRealDescriptor())</argsstring>
        <name>writeDoubleData</name>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" kindref="member">FPC::NativeRealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write double data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="125" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac590394599f7ea721cf8999331d0436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readDoubleData</definition>
        <argsstring>(double *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readDoubleData</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read double data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="131" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af58b88f2bf12a834f4885dcf327fbeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Write a FabOnDisk to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="114" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd06906c35c69c96f95404ef3837e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Read a FabOnDisk from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="127" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadb6da61ab59ea2923bdf326e791654a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Write an Vector&lt;FabOnDisk&gt; to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="146" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35e6a4a987e55646e4f33c6827554dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Read an Vector&lt;FabOnDisk&gt; from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="165" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="187" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="188" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b07822fe1224c3ededd1f68fce74b8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>static std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="213" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1637e435aecce22da819f6df77982d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::Header &amp;hd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Write a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> to an ostream in ASCII. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="260" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd04f69e01ce3c15f6788670823386e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::Header &amp;hd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Read a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" line="328" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="328" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0dfe3c7a9d24df9c4ba72949cd08411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_x_o1</definition>
        <argsstring>(int islo, int ic, int, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r)</argsstring>
        <name>interpbndrydata_x_o1</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <defname>jc</defname>
        </param>
        <param>
          <type>int</type>
          <defname>kc</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7499c19b0fcdb885259d2183d39175d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_x_o3</definition>
        <argsstring>(int islo, int ic, int, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const  &gt; const &amp;mask, int not_covered)</argsstring>
        <name>interpbndrydata_x_o3</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <defname>jc</defname>
        </param>
        <param>
          <type>int</type>
          <defname>kc</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace58e440f60805d4497bb56e08dd4e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_y_o1</definition>
        <argsstring>(int islo, int ic, int jc, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r)</argsstring>
        <name>interpbndrydata_y_o1</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <defname>kc</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" bodystart="24" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a736a19da1c5ebc2b6bb45e8c583de401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_y_o3</definition>
        <argsstring>(int islo, int ic, int jc, int, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const  &gt; const &amp;mask, int not_covered)</argsstring>
        <name>interpbndrydata_y_o3</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <defname>kc</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" bodystart="86" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a17b6d2b067b080d58a39017dc839b2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_z_o1</definition>
        <argsstring>(int islo, int ic, int jc, int kc, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r)</argsstring>
        <name>interpbndrydata_z_o1</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" bodystart="42" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ac326633c191e01ba6a5bf2abad8da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::interpbndrydata_z_o3</definition>
        <argsstring>(int islo, int ic, int jc, int kc, int n, Array4&lt; Real &gt; const &amp;bdry, int nb, Array4&lt; Real const  &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const  &gt; const &amp;mask, int not_covered)</argsstring>
        <name>interpbndrydata_z_o3</name>
        <param>
          <type>int</type>
          <declname>islo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ic</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>kc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" bodystart="136" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebbdca74797dcbb736769778d9cb97ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::poly_interp_coeff</definition>
        <argsstring>(Real xInt, Real const *AMREX_RESTRICT x, int N, Real *AMREX_RESTRICT c)</argsstring>
        <name>poly_interp_coeff</name>
        <param>
          <type>Real</type>
          <declname>xInt</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>Real *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_LOUtil_K.H" line="22" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_LOUtil_K.H" bodystart="22" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255f1f8c5e709392a949283da47211f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Mask &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" line="30" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="31" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeddafb7300c5464e3bf385c510ddb5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Mask &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a74aa3abcfec3f6850dbaea7de03029a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const  &gt; const &amp;flag, FArrayBox const &amp;fxfab, Real dtdx, int nc)</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="9" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a28ca65d066ae432cc050cf7e6231c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::yafluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, FArrayBox const &amp;ffab, Real dtdx, int nc, int dirside, Dim3 const &amp;rr)</argsstring>
        <name>yafluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>ffab</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dirside</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="34" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab63d8a264abb43a4926626082f0f1de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const  &gt; const &amp;flag, FArrayBox const &amp;fxfab, FArrayBox const &amp;fyfab, Real dtdx, Real dtdy, int nc)</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" bodystart="9" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a687fea23dc5c32271e55bc37f26f9a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const  &gt; const &amp;flag, FArrayBox const &amp;fxfab, FArrayBox const &amp;fyfab, FArrayBox const &amp;fzfab, Real dtdx, Real dtdy, Real dtdz, int nc)</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fxfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fyfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const &amp;</type>
          <declname>fzfab</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" bodystart="9" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af3d0b55f537815a445e708f01eede78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillEBNormals</definition>
        <argsstring>(MultiFab &amp;normals, const EBFArrayBoxFactory &amp;eb_factory, const Geometry &amp;geom)</argsstring>
        <name>FillEBNormals</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>normals</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_utils.cpp" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_utils.cpp" bodystart="11" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aca824ed9a83373a83533e948d2175dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagCutCells</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;state)</argsstring>
        <name>TagCutCells</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="14" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae146edcedfbd7eb8509f8c334b764d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagVolfrac</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;volfrac, Real tol)</argsstring>
        <name>TagVolfrac</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volfrac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="45" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="45" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac45d936bf5764d4fc75c7d483c93afaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const EBCellFlag &amp;flag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.cpp" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBCellFlag.cpp" bodystart="49" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad3c5c0681fda33ffa62120cefe254379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="119" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a734109fb8bb0358b898b2cafc191c8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::Level *eb_level, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> *</type>
          <declname>eb_level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="132" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1b764088e7533c8b78b4fea2170c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::IndexSpace *index_space, const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> *</type>
          <declname>index_space</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="143" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4a3bfe1c0cd2c7c8632d1f0ee21b2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &amp;</type>
        <definition>const EBCellFlagFab &amp; amrex::getEBCellFlagFab</definition>
        <argsstring>(const FArrayBox &amp;fab)</argsstring>
        <name>getEBCellFlagFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFArrayBox.cpp" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBFArrayBox.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d1f42bca3823efe8ae8998c9a1ae08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, const Vector&lt; Real &gt; &amp;vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="26" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac619d99ccf677b91c436697814e9a3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8cd575466d847d0c305984dbf30f088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, const Vector&lt; Real &gt; &amp;vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="39" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a233a16599969d91372d51e1befabcbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered_faces</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;umac, Real val)</argsstring>
        <name>EB_set_covered_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="68" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const MultiFab &amp;vol_fine, const MultiFab &amp;vfrac_fine, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol_fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vfrac_fine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="97" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1fc4ae4ef7edec76f3784f1ca78aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, int ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88b5f551ff31c821df1efef0a1983c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="163" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3df9dbf65687fa616a98a6be2789eedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="249" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e516c0390423c9e5017de317c562c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="256" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae62657fb0ffcd40a902dc22f0c64906f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58c0a1915ef06b92abe238304db2cc14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="323" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="323" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1fb6db0bb06fb9a3bed3a671501aca70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>EB_computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="371" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="371" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2ca083595ee0a76ca027da372fadf716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;ccmf, int dcomp, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;fmf)</argsstring>
        <name>EB_average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ccmf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="451" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a917f25f6d844509145da05bf23c5dc29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::compute_integrals</definition>
        <argsstring>(amrex::MultiFab *intg)</argsstring>
        <name>compute_integrals</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> *</type>
          <declname>intg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Algoim/AMReX_algoim_integrals.H" line="8" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a807d001969408582d355a731cedac987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintTopology</definition>
        <argsstring>(const Geometry &amp;geom, const FArrayBox &amp;fab, Node &amp;res)</argsstring>
        <name>FabToBlueprintTopology</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="21" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af70ff73cf1857e1a859a1fbac9ef10b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AddFabGhostIndicatorField</definition>
        <argsstring>(const FArrayBox &amp;fab, int ngrow, Node &amp;res)</argsstring>
        <name>AddFabGhostIndicatorField</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="137" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="137" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd44b852de9a30f6417dfc233d76ef3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintFields</definition>
        <argsstring>(const FArrayBox &amp;fab, const Vector&lt; std::string &gt; &amp;varnames, Node &amp;res)</argsstring>
        <name>FabToBlueprintFields</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="192" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="192" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aede6d4189f1d218b26880a44405df55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, Node &amp;res)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="213" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="213" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58624bde46f31353c6263dd50ec48bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab * &gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, Node &amp;res)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type>int</type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="241" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec07a7132a048a1ab29b5a4b262eda8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteBlueprintFiles</definition>
        <argsstring>(const conduit::Node &amp;bp_mesh, const std::string &amp;fname_base, int step, const std::string &amp;protocol)</argsstring>
        <name>WriteBlueprintFiles</name>
        <param>
          <type>const conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="329" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aecc3c40b87ae2ae19e6aac69ff910cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, conduit::Node &amp;bp_mesh)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a025e5b59bd3848fc86899a836d0800f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab * &gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, conduit::Node &amp;bp_mesh)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type>int</type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b5db41bbc5d361e95d196b9d6fbef41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1Hypre" kindref="compound">Hypre</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Hypre &gt; amrex::makeHypre</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_, Hypre::Interface interface)</argsstring>
        <name>makeHypre</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Hypre_1af08fbb42b4509a32e7f20a6101dfd13f" kindref="member">Hypre::Interface</ref></type>
          <declname>interface</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" bodystart="15" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd0e7692c28626659b75637c2c63528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1PETScABecLap" kindref="compound">PETScABecLap</ref> &gt;</type>
        <definition>std::unique_ptr&lt; PETScABecLap &gt; amrex::makePetsc</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_)</argsstring>
        <name>makePetsc</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::SanitizeName</definition>
        <argsstring>(const std::string &amp;sname)</argsstring>
        <name>SanitizeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="45" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ebc8341ffa9cc6f20e707bfb36ce253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SimpleRemoveOverlap</definition>
        <argsstring>(BoxArray &amp;ba)</argsstring>
        <name>SimpleRemoveOverlap</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="70" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a61e745ad34b00278dec10a2723c3d788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown_doit</definition>
        <argsstring>(const FArrayBox &amp;fine_fab, FArrayBox &amp;crse_fab, const Box &amp;ovlp, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown_doit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fine_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crse_fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ovlp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="89" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acdfc31382ab1f46867b783921a6f465e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>amrex::Box amrex::FixCoarseBoxSize</definition>
        <argsstring>(const Box &amp;fineBox, int rr)</argsstring>
        <name>FixCoarseBoxSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fineBox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a42624827c89b4341f0f95486188ba5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown</definition>
        <argsstring>(MultiFab &amp;S_crse, MultiFab &amp;S_fine, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="132" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee4cc89e337e42259b850eafbad65cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PrintTimeRangeList</definition>
        <argsstring>(const std::list&lt; RegionsProfStats::TimeRange &gt; &amp;trList)</argsstring>
        <name>PrintTimeRangeList</name>
        <param>
          <type>const std::list&lt; <ref refid="structBLProfStats_1_1TimeRange" kindref="compound">RegionsProfStats::TimeRange</ref> &gt; &amp;</type>
          <declname>trList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="158" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a6b7be29b3621c9df4db1d93736597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RedistFiles</definition>
        <argsstring>()</argsstring>
        <name>RedistFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="173" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::NHops</definition>
        <argsstring>(const Box &amp;tbox, const IntVect &amp;ivfrom, const IntVect &amp;ivto)</argsstring>
        <name>NHops</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivfrom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="251" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DText</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DText</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="278" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write3DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const int zdim, const double *data)</argsstring>
        <name>Write3DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>zdim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="299" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>WriteFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="312" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a393accb69353384e42f45a34cb386180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::FileSize</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="338" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MakeFuncPctTimesMF</definition>
        <argsstring>(const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;blpFNames, const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, Real runTime, int dataNProcs)</argsstring>
        <name>MakeFuncPctTimesMF</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>blpFNames</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataNProcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="346" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CollectMProfStats</definition>
        <argsstring>(std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int whichProc)</argsstring>
        <name>CollectMProfStats</name>
        <param>
          <type>std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichProc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="398" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GraphTopPct</definition>
        <argsstring>(const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int dataNProcs, Real gPercent)</argsstring>
        <name>GraphTopPct</name>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dataNProcs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>gPercent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="440" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60440de48a953eec9553933d683ef9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="17" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec030b01162fc088d8de7dc493235430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::VisMFBaseName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>VisMFBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a05e93313b0f001e810b02a69f71c5b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DBoxFrom3D</definition>
        <argsstring>(const Box &amp;box, std::ostream &amp;os, int whichPlane)</argsstring>
        <name>Write2DBoxFrom3D</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="180" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="180" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9dca52e8981b35caa7b00d00c8c6a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref></type>
        <definition>VisMF::FabOnDisk amrex::VisMFWrite</definition>
        <argsstring>(const FArrayBox &amp;fabIn, const std::string &amp;filename, std::ostream &amp;os, long &amp;bytes, int whichPlane)</argsstring>
        <name>VisMFWrite</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fabIn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="215" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="259" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0009871904f8601dbda21f3654b7bb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::VisMFWriteHeader</definition>
        <argsstring>(const std::string &amp;mf_name, VisMF::Header &amp;hdr, int whichPlane)</argsstring>
        <name>VisMFWriteHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="279" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="279" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35ef1d42135f8c075072684f42b02b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile2DFrom3D</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile2DFrom3D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="325" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d39fa37907313633609b0b404501b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrDataAdaptor" kindref="compound">AmrDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/SENSEI/AMReX_AmrDataAdaptor.cpp" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac81456cdd4c1cd623e05a2494f607d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrMeshDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMeshDataAdaptor" kindref="compound">AmrMeshDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/SENSEI/AMReX_AmrMeshDataAdaptor.cpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe14b67eeec40f7b21d1743472bbb09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const LinOp &amp;lp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1LinOp" kindref="compound">LinOp</ref> &amp;</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" line="485" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_LinOp.cpp" bodystart="486" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a897f9881c98a276a81004760a2bf67b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::norm_inf</definition>
        <argsstring>(const MultiFab &amp;res, bool local=false)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_MultiGrid.cpp" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_MultiGrid.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98d93b35767e8e98fcdcfab5217f4e8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Spacer</definition>
        <argsstring>(std::ostream &amp;os, int lev)</argsstring>
        <name>Spacer</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_MultiGrid.cpp" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_CellMG/AMReX_MultiGrid.cpp" bodystart="129" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ddde5b8b87f479d46f4c6729fa0d08c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::bdfunc_init</definition>
        <argsstring>()</argsstring>
        <name>bdfunc_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCInterpBndryData.cpp" bodystart="14" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae9a6e7245f5df7f22c353eede65db960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MCLinOp &amp;lp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MCLinOp" kindref="compound">MCLinOp</ref> &amp;</type>
          <declname>lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCLinOp.cpp" line="488" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCLinOp.cpp" bodystart="489" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a897f9881c98a276a81004760a2bf67b0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>static Real amrex::norm_inf</definition>
        <argsstring>(const MultiFab &amp;res, bool local=false)</argsstring>
        <name>norm_inf</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCMultiGrid.cpp" line="101" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCMultiGrid.cpp" bodystart="101" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98d93b35767e8e98fcdcfab5217f4e8f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Spacer</definition>
        <argsstring>(std::ostream &amp;os, int lev)</argsstring>
        <name>Spacer</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCMultiGrid.cpp" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/C_TensorMG/AMReX_MCMultiGrid.cpp" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98bcbcd1f5d14791eff59903fa738518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mg_cc_interp</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;f, Array4&lt; Real const  &gt; const &amp;c)</argsstring>
        <name>mg_cc_interp</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <defname>j</defname>
        </param>
        <param>
          <type>int</type>
          <defname>k</defname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MG_1D_K.H" line="9" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MG_1D_K.H" bodystart="9" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ae8dc022c68b6262f25814e33c10adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="7" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48745b92457352c145f29188d8e6f4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="28" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac6d826a58e6b8d0c3d763cfc062dc31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;bx, Real fac)</argsstring>
        <name>mlabeclap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="46" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae5667ae7f60cbfbf2527c0af25475a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;bx, Real fac, int xlen)</argsstring>
        <name>mlabeclap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="59" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4cd1339a476e74287a7897ba04ebd232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Box const &amp;vbox, int nc, int redblack)</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="72" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a29ba17a71c045f048cc7b8e851d4c72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="7" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f96f99d29e9cb314b6b3bd4fc67b1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="34" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a727d1eaa982d26a88640b4f4d6a5f206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;by, Real fac)</argsstring>
        <name>mlabeclap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="88" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acc206c3e9f67df9602f2846f575c91d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;by, Real fac, int ylen)</argsstring>
        <name>mlabeclap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="103" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfc16c2addd897bcabb8b65dc3651a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Box const &amp;vbox, int nc, int redblack)</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="122" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6810c9b5e57bea026e01028db834cb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, Array4&lt; Real const  &gt; const &amp;bZ, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="7" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1f0db3a6a0147e5e545534184c035480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, Array4&lt; Real const  &gt; const &amp;bZ, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="40" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98c5e3a45b1640cacff6361a89d5c7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;bz, Real fac)</argsstring>
        <name>mlabeclap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="141" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6aa1cd4e20ec6c82750f5344b17446af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlabeclap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Array4&lt; Real const  &gt; const &amp;bz, Real fac, int zlen)</argsstring>
        <name>mlabeclap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="158" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2b7b3a82d759e639217998e7853ed5ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Real dhz, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;bX, Array4&lt; Real const  &gt; const &amp;bY, Array4&lt; Real const  &gt; const &amp;bZ, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Array4&lt; Real const  &gt; const &amp;f4, Array4&lt; int const  &gt; const &amp;m4, Array4&lt; Real const  &gt; const &amp;f5, Array4&lt; int const  &gt; const &amp;m5, Box const &amp;vbox, int nc, int redblack)</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="182" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a7d2b555942bd934bc860a8639256ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="7" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af0c8ea1d59021f8ce6933ea16f9a36f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="31" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="31" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7612b3f68acc16d37645cf529ddccfbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real fac, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="51" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad872970bb947e004bb79020f7e2fb139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real fac, int xlen, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="64" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a370c2ef71c555efc3768f17849395d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Box const &amp;vbox, int redblack, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="77" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d8b7508a3738927f8508bf49bbf0e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real fac, Real const *AMREX_RESTRICT rc, int rlo)</argsstring>
        <name>mlalap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="90" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="90" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6239ccc54717883e12318c0aae3e3d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real fac, int ylen, Real const *AMREX_RESTRICT rc, int rlo)</argsstring>
        <name>mlalap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="105" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af49e47e4e76e7301ad611b2ae16c53fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="124" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad295d161375c9f98c2cc7a1759a90ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlalap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="7" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e7001a3f46147a1021adf239dfa4aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const  &gt; const &amp;a, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta)</argsstring>
        <name>mlalap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a317082290117984ef29e149750e2c7a8" kindref="member">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="34" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e348216ae94de98efd46732b924ba5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real fac)</argsstring>
        <name>mlalap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="58" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac88a6aef538062d7893ef59ffe8ad276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real fac, int xlen)</argsstring>
        <name>mlalap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="74" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8e2b147551aa43aaa71ce5218526b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real fac)</argsstring>
        <name>mlalap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab904374721074b76ba6107241da74f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real fac, int ylen)</argsstring>
        <name>mlalap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="107" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1b46372de89aa542230136d649da813b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Real fac)</argsstring>
        <name>mlalap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="128" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3648baa5147d56f77366c7ab58f21c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Real fac, int zlen)</argsstring>
        <name>mlalap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="145" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b6b076a01c9564b43de2b3b417669e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Real dhz, Array4&lt; Real const  &gt; const &amp;a, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Array4&lt; Real const  &gt; const &amp;f4, Array4&lt; int const  &gt; const &amp;m4, Array4&lt; Real const  &gt; const &amp;f5, Array4&lt; int const  &gt; const &amp;m5, Box const &amp;vbox, int redblack)</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="169" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d5f9554615ec4e2c857ded8fdb0b812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlmg_lin_cc_interp_r2</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const  &gt; const &amp;cc, int nc)</argsstring>
        <name>mlmg_lin_cc_interp_r2</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="7" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72ec29e58d54b330c01ae154e492ac79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlmg_lin_cc_interp_r4</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const  &gt; const &amp;cc, int nc)</argsstring>
        <name>mlmg_lin_cc_interp_r4</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="24" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="24" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2db50870cf2b90af8605b5fc56fabc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int, int, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Real dhx, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4270d6173de9971d5d0aac54ae3574ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real dxinv, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="19" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e4e6d376c8a171202450a3d249078b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real dxinv, int xlen, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6ee0a5b6c423267768d12db024c8a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real dhx, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Box const &amp;vbox, int redblack, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="47" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acf350a280d981149be0e27c7682f5eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Real const *AMREX_RESTRICT re, int rlo, Real dhx)</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="80" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf97bd81a915b2b941d3ef8941a73815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Real dhx, Real dhy, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="7" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab621a45ee6720fbc043b616cd1d8029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real dyinv, Real const *AMREX_RESTRICT rc, int rlo)</argsstring>
        <name>mlpoisson_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="53" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abcad46900352493d447f45947504af75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real dyinv, int ylen, Real const *AMREX_RESTRICT rc, int rlo)</argsstring>
        <name>mlpoisson_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="69" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add748875bff92057dc06a82ff897b797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real dhx, Real dhy, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo)</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="89" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9572c51242f005a1f7d13bf6e4b9c11c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Real const *AMREX_RESTRICT rc, Real const *AMREX_RESTRICT re, int rlo, Real dhx, Real dhy)</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>rc</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>re</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="131" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a300259232ab09c161b336d2e03843c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const  &gt; const &amp;x, Real dhx, Real dhy, Real dhz)</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="7" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2b1aff8d3d4c39950908469d4b8269a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real dxinv)</argsstring>
        <name>mlpoisson_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="17" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaaa1c41af673aaedf26580279bff87e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const  &gt; const &amp;sol, Real dxinv, int xlen)</argsstring>
        <name>mlpoisson_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="34" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1b0208b1b346c35985b1f0ca46ea94e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real dyinv)</argsstring>
        <name>mlpoisson_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="51" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="51" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab71392eda36a12087f0e2db756f6d6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const  &gt; const &amp;sol, Real dyinv, int ylen)</argsstring>
        <name>mlpoisson_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="68" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af2cd658eb9fc5ac7c9742500abe33db5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Real dzinv)</argsstring>
        <name>mlpoisson_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="89" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ade7d9c173e20e67a7b52b4c065112d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const  &gt; const &amp;sol, Real dzinv, int zlen)</argsstring>
        <name>mlpoisson_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="106" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64da8f2f8e91bd3093f604acde414add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const  &gt; const &amp;rhs, Real dhx, Real dhy, Real dhz, Array4&lt; Real const  &gt; const &amp;f0, Array4&lt; int const  &gt; const &amp;m0, Array4&lt; Real const  &gt; const &amp;f1, Array4&lt; int const  &gt; const &amp;m1, Array4&lt; Real const  &gt; const &amp;f2, Array4&lt; int const  &gt; const &amp;m2, Array4&lt; Real const  &gt; const &amp;f3, Array4&lt; int const  &gt; const &amp;m3, Array4&lt; Real const  &gt; const &amp;f4, Array4&lt; int const  &gt; const &amp;m4, Array4&lt; Real const  &gt; const &amp;f5, Array4&lt; int const  &gt; const &amp;m5, Box const &amp;vbox, int redblack)</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const  &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; int const  &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type>int</type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="130" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab612cdff7b506fd2884de82a842e95b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; NReal, NInt &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="646" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="647" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a680ccf73211338c29c896c0a5b4d18b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::getTileIndex</definition>
        <argsstring>(const IntVect &amp;iv, const Box &amp;box, const bool a_do_tiling, const IntVect &amp;a_tile_size, Box &amp;tbx)</argsstring>
        <name>getTileIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>a_do_tiling</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a_tile_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleUtil.cpp" line="7" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleUtil.cpp" bodystart="7" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Amr/AMReX_Amr.cpp" line="80" column="1"/>
  </compounddef>
</doxygen>
